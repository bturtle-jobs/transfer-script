{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport { setUserData } from 'owp/auth/store/actions/user.actions';\nimport jwtService from 'owp/jwtService';\nexport var LOGIN_ERROR = 'LOGIN_ERROR';\nexport var LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport function submitLogin(_ref) {\n  var rfid = _ref.rfid,\n      email = _ref.email,\n      password = _ref.password;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return !isEmpty(rfid) ? jwtService.signInWithRfid(rfid) : jwtService.signInWithEmailAndPassword(email, password);\n\n            case 3:\n              result = _context.sent;\n\n              if (!(isEmpty(get(result, 'PERMISSIONID')) && !isEmpty(get(result, 'errorCode')))) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dispatch({\n                type: LOGIN_ERROR,\n                payload: result\n              }));\n\n            case 6:\n              dispatch(setUserData(result));\n              return _context.abrupt(\"return\", dispatch({\n                type: LOGIN_SUCCESS\n              }));\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", dispatch({\n                type: LOGIN_ERROR,\n                payload: _context.t0\n              }));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/auth/store/actions/login.actions.js"],"names":["get","isEmpty","setUserData","jwtService","LOGIN_ERROR","LOGIN_SUCCESS","submitLogin","rfid","email","password","dispatch","signInWithRfid","signInWithEmailAndPassword","result","type","payload"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,SAASC,WAAT,OAAgD;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,MAAZC,QAAY,QAAZA,QAAY;AACnD;AAAA,yEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEuB,CAACT,OAAO,CAACM,IAAD,CAAR,GAChBJ,UAAU,CAACQ,cAAX,CAA0BJ,IAA1B,CADgB,GAEhBJ,UAAU,CAACS,0BAAX,CAAsCJ,KAAtC,EAA6CC,QAA7C,CAJP;;AAAA;AAEOI,cAAAA,MAFP;;AAAA,oBAMKZ,OAAO,CAACD,GAAG,CAACa,MAAD,EAAS,cAAT,CAAJ,CAAP,IAAwC,CAACZ,OAAO,CAACD,GAAG,CAACa,MAAD,EAAS,WAAT,CAAJ,CANrD;AAAA;AAAA;AAAA;;AAAA,+CAOYH,QAAQ,CAAC;AACZI,gBAAAA,IAAI,EAAEV,WADM;AAEZW,gBAAAA,OAAO,EAAEF;AAFG,eAAD,CAPpB;;AAAA;AAaCH,cAAAA,QAAQ,CAACR,WAAW,CAACW,MAAD,CAAZ,CAAR;AAbD,+CAeQH,QAAQ,CAAC;AACZI,gBAAAA,IAAI,EAAET;AADM,eAAD,CAfhB;;AAAA;AAAA;AAAA;AAAA,+CAmBQK,QAAQ,CAAC;AACZI,gBAAAA,IAAI,EAAEV,WADM;AAEZW,gBAAAA,OAAO;AAFK,eAAD,CAnBhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAyBH","sourcesContent":["import get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { setUserData } from 'owp/auth/store/actions/user.actions';\r\nimport jwtService from 'owp/jwtService';\r\n\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n\r\nexport function submitLogin({ rfid, email, password }) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const result = await (!isEmpty(rfid)\r\n                ? jwtService.signInWithRfid(rfid)\r\n                : jwtService.signInWithEmailAndPassword(email, password));\r\n\r\n            if (isEmpty(get(result, 'PERMISSIONID')) && !isEmpty(get(result, 'errorCode'))) {\r\n                return dispatch({\r\n                    type: LOGIN_ERROR,\r\n                    payload: result,\r\n                });\r\n            }\r\n\r\n            dispatch(setUserData(result));\r\n\r\n            return dispatch({\r\n                type: LOGIN_SUCCESS,\r\n            });\r\n        } catch (error) {\r\n            return dispatch({\r\n                type: LOGIN_ERROR,\r\n                payload: error,\r\n            });\r\n        }\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}