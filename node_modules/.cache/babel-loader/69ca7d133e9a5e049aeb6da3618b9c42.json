{"ast":null,"code":"Prism.languages.cpp = Prism.languages.extend('c', {\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': /--?|\\+\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|\\|?|\\?|\\*|\\/|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\nPrism.languages.insertBefore('cpp', 'keyword', {\n  'class-name': {\n    pattern: /(class\\s+)\\w+/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/prismjs/components/prism-cpp.js"],"names":["Prism","languages","cpp","extend","insertBefore","pattern","lookbehind","alias","greedy"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,GAAsBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,GAAvB,EAA4B;AACjD,aAAW,6lBADsC;AAEjD,aAAW,oBAFsC;AAGjD,cAAY;AAHqC,CAA5B,CAAtB;AAMAH,KAAK,CAACC,SAAN,CAAgBG,YAAhB,CAA6B,KAA7B,EAAoC,SAApC,EAA+C;AAC9C,gBAAc;AACbC,IAAAA,OAAO,EAAE,gBADI;AAEbC,IAAAA,UAAU,EAAE;AAFC;AADgC,CAA/C;AAOAN,KAAK,CAACC,SAAN,CAAgBG,YAAhB,CAA6B,KAA7B,EAAoC,QAApC,EAA8C;AAC7C,gBAAc;AACbC,IAAAA,OAAO,EAAE,mCADI;AAEbE,IAAAA,KAAK,EAAE,QAFM;AAGbC,IAAAA,MAAM,EAAE;AAHK;AAD+B,CAA9C","sourcesContent":["Prism.languages.cpp = Prism.languages.extend('c', {\n\t'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'operator': /--?|\\+\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|\\|?|\\?|\\*|\\/|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\n\nPrism.languages.insertBefore('cpp', 'keyword', {\n\t'class-name': {\n\t\tpattern: /(class\\s+)\\w+/i,\n\t\tlookbehind: true\n\t}\n});\n\nPrism.languages.insertBefore('cpp', 'string', {\n\t'raw-string': {\n\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n\t\talias: 'string',\n\t\tgreedy: true\n\t}\n});\n"]},"metadata":{},"sourceType":"script"}