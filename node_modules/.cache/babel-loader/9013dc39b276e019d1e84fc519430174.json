{"ast":null,"code":"/**\r\n * Bullet module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Bullet } from \"../../charts/elements/Bullet\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { PointedCircle } from \"./PointedCircle\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a pin-shaped bullet with an optional text label and/or image inside\r\n * it.\r\n *\r\n * The background/body of the flag is a [[PointedCircle]] element. Most of\r\n * its the visual appearance is configured via `background` property.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let series = chart.series.push(new am4charts.LineSeries());\r\n * // ...\r\n * let pinBullet = series.bullets.push(new am4plugins_bullets.PinBullet());\r\n * pinBullet.poleHeight = 15;\r\n * pinBullet.label.text = \"{valueY}\";\r\n * ```\r\n * ```JavaScript\r\n * var series = chart.series.push(new am4charts.LineSeries());\r\n * // ...\r\n * var pinBullet = series.bullets.push(new am4plugins_bullets.PinBullet());\r\n * pinBullet.poleHeight = 15;\r\n * pinBullet.label.text = \"{valueY}\";\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     // ...\r\n *     \"bullets\": [{\r\n *       \"type\": \"PinBullet\",\r\n *       \"poleHeight\": 15,\r\n *       \"label\": {\r\n *         \"text\": \"{valueY}\"\r\n *       }\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.5.7\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n */\n\nvar PinBullet =\n/** @class */\nfunction (_super) {\n  __extends(PinBullet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PinBullet() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PinBullet\";\n    var interfaceColors = new InterfaceColorSet();\n\n    var circle = _this.createChild(Circle);\n\n    circle.shouldClone = false;\n    circle.isMeasured = false;\n    circle.fill = interfaceColors.getFor(\"background\");\n    circle.radius = percent(85);\n    _this.circle = circle;\n    var background = _this.background;\n    background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    background.fillOpacity = 1;\n    background.pointerBaseWidth = 20;\n    background.pointerLength = 20;\n    background.radius = 25;\n    background.events.on(\"propertychanged\", _this.invalidate, _this, false);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Validates element:\r\n   * * Triggers events\r\n   * * Redraws the element\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PinBullet.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var background = this.background;\n    var px = background.pointerX;\n    var py = background.pointerY;\n    var pl = background.pointerLength;\n    var pw = background.pointerBaseWidth;\n    var pa = background.pointerAngle + 180;\n    var r = background.radius;\n\n    if (pw > 2 * r) {\n      pw = 2 * r;\n    }\n\n    var da = $math.DEGREES * Math.atan(pw / 2 / pl);\n\n    if (da <= 0.001) {\n      da = 0.001;\n    }\n\n    var a1 = pa - da;\n    var a2 = pa + da;\n    var p1 = {\n      x: px + pl * $math.cos(a1),\n      y: py + pl * $math.sin(a1)\n    };\n    var p2 = {\n      x: px + pl * $math.cos(a2),\n      y: py + pl * $math.sin(a2)\n    };\n    var x1 = p1.x;\n    var x2 = p2.x;\n    var y1 = p1.y;\n    var y2 = p2.y;\n    var radsq = r * r;\n    var q = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    var x3 = (x1 + x2) / 2;\n    var cx = x3 - Math.sqrt(radsq - q / 2 * (q / 2)) * ((y1 - y2) / q);\n    var y3 = (y1 + y2) / 2;\n    var cy = y3 - Math.sqrt(radsq - q / 2 * (q / 2)) * ((x2 - x1) / q);\n\n    if (this.circle) {\n      var circleRadius = this.circle.radius;\n\n      if (circleRadius instanceof Percent) {\n        this.circle.width = r * 2;\n        this.circle.height = r * 2;\n      }\n    }\n\n    var image = this.image;\n\n    if (image) {\n      image.x = cx;\n      image.y = cy;\n      image.width = r * 2;\n      image.height = r * 2;\n      image.element.attr({\n        preserveAspectRatio: \"xMidYMid slice\"\n      });\n\n      if (this.circle) {\n        this.circle.scale = 1 / image.scale;\n      }\n    } else {\n      if (this.circle) {\n        this.circle.x = cx;\n        this.circle.y = cy;\n      }\n    }\n\n    var label = this.label;\n\n    if (label) {\n      label.x = cx;\n      label.y = cy;\n    }\n  };\n\n  Object.defineProperty(PinBullet.prototype, \"image\", {\n    /**\r\n     * @return Image\r\n     */\n    get: function get() {\n      return this._image;\n    },\n\n    /**\r\n     * An element of type [[Image]] to show inside pin's circle.\r\n     *\r\n     * @param  image  Image\r\n     */\n    set: function set(image) {\n      if (image) {\n        this._image = image;\n\n        this._disposers.push(image);\n\n        image.shouldClone = false;\n        image.parent = this;\n        image.horizontalCenter = \"middle\";\n        image.verticalCenter = \"middle\";\n\n        if (this.circle) {\n          image.mask = this.circle;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PinBullet.prototype, \"label\", {\n    /**\r\n     * @return Label\r\n     */\n    get: function get() {\n      return this._label;\n    },\n\n    /**\r\n     * A [[Label]] element for displaying within flag.\r\n     *\r\n     * Use it's `text` property to set actual text, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * pinBullet.text = \"Hello\";\r\n     * ```\r\n     * ```JavaScript\r\n     * pinBullet.text = \"Hello\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"bullets\": [{\r\n     *       \"type\": \"PinBullet\",\r\n     *       \"label\": {\r\n     *         \"text\": \"Hello\"\r\n     *       }\r\n     *     }]\r\n     *   }]\r\n     * }\r\n     * ```\r\n     * @param  label  Label\r\n     */\n    set: function set(label) {\n      if (label) {\n        this._label = label;\n\n        this._disposers.push(label);\n\n        label.shouldClone = false;\n        label.parent = this;\n        label.horizontalCenter = \"middle\";\n        label.verticalCenter = \"middle\";\n        label.textAlign = \"middle\";\n        label.dy = 2;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all proprities and related stuff from another instance of\r\n   * [[PinBullet]].\r\n   *\r\n   * @param source  Source element\r\n   */\n\n  PinBullet.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (source.image) {\n      if (!this._image) {\n        this.image = source.image.clone();\n      }\n\n      this._image.copyFrom(source.image);\n    }\n\n    if (this.circle && source.circle) {\n      this.circle.copyFrom(source.circle);\n    }\n\n    if (source.label) {\n      if (!this._label) {\n        this.label = source.label.clone();\n      }\n\n      this._label.copyFrom(source.label);\n    }\n  };\n  /**\r\n   * Creates and returns a background element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n\n\n  PinBullet.prototype.createBackground = function () {\n    return new PointedCircle();\n  };\n\n  return PinBullet;\n}(Bullet);\n\nexport { PinBullet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PinBullet\"] = PinBullet;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/bullets/PinBullet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"../../charts/elements/Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { PointedCircle } from \"./PointedCircle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Image } from \"../../core/elements/Image\";\r\nimport { Label } from \"../../core/elements/Label\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PinBullet]].\r\n */\r\nexport interface IPinBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[PinBullet]].\r\n */\r\nexport interface IPinBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters.\r\n * \r\n * Includes both the [[Adapter]] definitions and properties\r\n * \r\n * @see {@link Adapter}\r\n */\r\nexport interface IPinBulletAdapters extends IBulletAdapters, IPinBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a pin-shaped bullet with an optional text label and/or image inside\r\n * it.\r\n *\r\n * The background/body of the flag is a [[PointedCircle]] element. Most of\r\n * its the visual appearance is configured via `background` property.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * Example:\r\n * \r\n * ```TypeScript\r\n * let series = chart.series.push(new am4charts.LineSeries());\r\n * // ...\r\n * let pinBullet = series.bullets.push(new am4plugins_bullets.PinBullet());\r\n * pinBullet.poleHeight = 15;\r\n * pinBullet.label.text = \"{valueY}\";\r\n * ```\r\n * ```JavaScript\r\n * var series = chart.series.push(new am4charts.LineSeries());\r\n * // ...\r\n * var pinBullet = series.bullets.push(new am4plugins_bullets.PinBullet());\r\n * pinBullet.poleHeight = 15;\r\n * pinBullet.label.text = \"{valueY}\";\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     // ...\r\n *     \"bullets\": [{\r\n *       \"type\": \"PinBullet\",\r\n *       \"poleHeight\": 15,\r\n *       \"label\": {\r\n *         \"text\": \"{valueY}\"\r\n *       }\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.5.7\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n */\r\nexport class PinBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPinBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPinBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPinBulletEvents;\r\n\r\n\t/**\r\n\t * A [[Circle]] element of the pin. It is used for the \"inside\" of the pin.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * A type for the background element.\r\n\t */\r\n\tpublic _background: PointedCircle;\r\n\r\n\t/**\r\n\t * Image element.\r\n\t */\r\n\tprotected _image: Image;\r\n\r\n\t/**\r\n\t * Label element.\r\n\t */\r\n\tprotected _label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PinBullet\";\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.isMeasured = false;\r\n\t\tcircle.fill = interfaceColors.getFor(\"background\");\r\n\t\tcircle.radius = percent(85);\r\n\r\n\t\tthis.circle = circle;\r\n\t\tlet background = this.background;\r\n\t\tbackground.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tbackground.fillOpacity = 1;\r\n\t\tbackground.pointerBaseWidth = 20;\r\n\t\tbackground.pointerLength = 20;\r\n\t\tbackground.radius = 25;\r\n\t\tbackground.events.on(\"propertychanged\", this.invalidate, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet background = this.background;\r\n\r\n\t\tlet px = background.pointerX;\r\n\t\tlet py = background.pointerY;\r\n\t\tlet pl = background.pointerLength;\r\n\t\tlet pw = background.pointerBaseWidth;\r\n\t\tlet pa = background.pointerAngle + 180;\r\n\t\tlet r = background.radius;\r\n\r\n\t\tif (pw > 2 * r) {\r\n\t\t\tpw = 2 * r;\r\n\t\t}\r\n\r\n\t\tlet da = $math.DEGREES * Math.atan(pw / 2 / pl);\r\n\r\n\t\tif (da <= 0.001) {\r\n\t\t\tda = 0.001;\r\n\t\t}\r\n\r\n\t\tlet a1 = pa - da;\r\n\t\tlet a2 = pa + da;\r\n\r\n\t\tlet p1 = { x: px + pl * $math.cos(a1), y: py + pl * $math.sin(a1) };\r\n\t\tlet p2 = { x: px + pl * $math.cos(a2), y: py + pl * $math.sin(a2) };\r\n\r\n\t\tlet x1 = p1.x;\r\n\t\tlet x2 = p2.x;\r\n\r\n\t\tlet y1 = p1.y;\r\n\t\tlet y2 = p2.y;\r\n\r\n\t\tlet radsq = r * r;\r\n\t\tlet q = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\r\n\r\n\t\tlet x3 = (x1 + x2) / 2;\r\n\t\tlet cx = x3 - Math.sqrt(radsq - ((q / 2) * (q / 2))) * ((y1 - y2) / q);\r\n\r\n\t\tlet y3 = (y1 + y2) / 2;\r\n\t\tlet cy = y3 - Math.sqrt(radsq - ((q / 2) * (q / 2))) * ((x2 - x1) / q);\r\n\r\n\t\tif(this.circle){\r\n\t\t\tlet circleRadius = this.circle.radius;\r\n\r\n\t\t\tif (circleRadius instanceof Percent) {\r\n\t\t\t\tthis.circle.width = r * 2;\r\n\t\t\t\tthis.circle.height = r * 2;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet image = this.image;\r\n\t\tif (image) {\r\n\t\t\timage.x = cx;\r\n\t\t\timage.y = cy;\r\n\t\t\timage.width = r * 2;\r\n\t\t\timage.height = r * 2;\r\n\t\t\timage.element.attr({preserveAspectRatio:\"xMidYMid slice\"})\r\n\t\t\tif(this.circle){\r\n\t\t\t\tthis.circle.scale = 1 / image.scale;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(this.circle){\r\n\t\t\t\tthis.circle.x = cx;\r\n\t\t\t\tthis.circle.y = cy;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet label = this.label;\r\n\t\tif (label) {\r\n\t\t\tlabel.x = cx;\r\n\t\t\tlabel.y = cy;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An element of type [[Image]] to show inside pin's circle.\r\n\t * \r\n\t * @param  image  Image\r\n\t */\r\n\tpublic set image(image: Image) {\r\n\t\tif (image) {\r\n\t\t\tthis._image = image;\r\n\t\t\tthis._disposers.push(image);\r\n\t\t\timage.shouldClone = false;\r\n\t\t\timage.parent = this;\r\n\t\t\timage.horizontalCenter = \"middle\";\r\n\t\t\timage.verticalCenter = \"middle\";\r\n\r\n\t\t\tif (this.circle) {\r\n\t\t\t\timage.mask = this.circle;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image\r\n\t */\r\n\tpublic get image(): Image {\r\n\t\treturn this._image;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Label]] element for displaying within flag.\r\n\t *\r\n\t * Use it's `text` property to set actual text, e.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * pinBullet.text = \"Hello\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * pinBullet.text = \"Hello\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"bullets\": [{\r\n\t *       \"type\": \"PinBullet\",\r\n\t *       \"label\": {\r\n\t *         \"text\": \"Hello\"\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * @param  label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tif (label) {\r\n\t\t\tthis._label = label;\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.horizontalCenter = \"middle\";\r\n\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\tlabel.textAlign = \"middle\";\r\n\t\t\tlabel.dy = 2;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[PinBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.image) {\r\n\t\t\tif (!this._image) {\r\n\t\t\t\tthis.image = source.image.clone();\r\n\t\t\t}\r\n\t\t\tthis._image.copyFrom(source.image);\r\n\t\t}\r\n\t\tif(this.circle && source.circle){\r\n\t\t\tthis.circle.copyFrom(source.circle);\r\n\t\t}\r\n\r\n\t\tif (source.label) {\r\n\t\t\tif (!this._label) {\r\n\t\t\t\tthis.label = source.label.clone();\r\n\t\t\t}\r\n\t\t\tthis._label.copyFrom(source.label);\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a background element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new PointedCircle();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PinBullet\"] = PinBullet;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}