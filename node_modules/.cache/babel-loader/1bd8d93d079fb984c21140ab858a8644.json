{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\owp\\\\src\\\\api\\\\hocs.js\";\n\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { query } from 'owp/api';\nimport React, { useEffect, useRef, useState } from 'react';\n\nfunction usePreviousValue(inputValue) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = inputValue;\n  });\n  return ref.current;\n}\n\nexport var withQuery = function withQuery(mapDataToProps) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$shouldGetLoading = _ref.shouldGetLoadingProp,\n      shouldGetLoadingProp = _ref$shouldGetLoading === void 0 ? false : _ref$shouldGetLoading,\n      _ref$useInputChange = _ref.useInputChange,\n      useInputChange = _ref$useInputChange === void 0 ? false : _ref$useInputChange,\n      _ref$dataKey = _ref.dataKey,\n      dataKey = _ref$dataKey === void 0 ? 'suggestions' : _ref$dataKey;\n\n  if (typeof mapDataToProps !== 'function') {\n    throw new Error('객체(object)를 리턴하는 함수이어야 합니다.');\n  }\n\n  return function (WrappedComponent) {\n    return function (props) {\n      var _props$query = props.query,\n          queryOptions = _props$query === void 0 ? {} : _props$query,\n          _props$defaultInputVa = props.defaultInputValue,\n          defaultInputValue = _props$defaultInputVa === void 0 ? '' : _props$defaultInputVa,\n          onInputChange = props.onInputChange,\n          _props$onChange = props.onChange,\n          _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,\n          restProps = _objectWithoutProperties(props, [\"query\", \"defaultInputValue\", \"onInputChange\", \"onChange\"]);\n\n      var _useState = useState({\n        [dataKey]: [],\n        isLoading: false\n      }),\n          _useState2 = _slicedToArray(_useState, 2),\n          state = _useState2[0],\n          setState = _useState2[1];\n\n      var _useState3 = useState(),\n          _useState4 = _slicedToArray(_useState3, 2),\n          inputValue = _useState4[0],\n          setInputValue = _useState4[1];\n\n      var variableParamKeyRef = useRef(null);\n      var useDefaultInputValueRef = useRef(!isEmpty(defaultInputValue));\n\n      var _suggestions = get(state, dataKey);\n\n      var prevInputValue = usePreviousValue(inputValue);\n      var prevSuggestions = usePreviousValue(_suggestions);\n      useEffect(function () {\n        var _ref2 = queryOptions || {},\n            _ref2$params = _ref2.params,\n            params = _ref2$params === void 0 ? {} : _ref2$params;\n\n        if (useInputChange && !variableParamKeyRef.current) {\n          variableParamKeyRef.current = get(Object.keys(params).filter(function (key) {\n            return !get(params, key);\n          }), 0);\n        }\n      });\n      useEffect(function () {\n        if (useDefaultInputValueRef.current && (isEmpty(_suggestions) || !isEqual(_suggestions, prevSuggestions)) || !isEmpty(queryOptions) && !isEqual(prevInputValue, inputValue) && (!useInputChange || !isEmpty(inputValue))) {\n          shouldGetLoadingProp && setState({\n            isLoading: true\n          });\n          var url = queryOptions.url,\n              params = queryOptions.params;\n          query({\n            url: url,\n            params: {\n              jsondata: JSON.stringify(_objectSpread(_objectSpread({}, params), useInputChange && !!variableParamKeyRef.current && {\n                [variableParamKeyRef.current]: useDefaultInputValueRef.current ? defaultInputValue : inputValue\n              }))\n            }\n          }).then(function (data) {\n            var suggestions = mapDataToProps(data, _objectSpread({}, props));\n            setState(_objectSpread(_objectSpread({}, suggestions), shouldGetLoadingProp && {\n              isLoading: false\n            }));\n            var suggestion = useDefaultInputValueRef.current ? get(suggestions, 'suggestions.0') : '';\n\n            if (useDefaultInputValueRef.current && !isEmpty(suggestion)) {\n              _onChange(suggestion);\n\n              return;\n            }\n          }).catch(function (error) {\n            console.error('error', error);\n            shouldGetLoadingProp && setState({\n              isLoading: false\n            });\n          });\n          return;\n        } // !useDefaultInputValueRef.current && setState({ [dataKey]: [], isLoading: false });\n\n      }, [queryOptions, inputValue]);\n      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, restProps, state, useDefaultInputValueRef.current && {\n        value: get(state, \"\".concat(dataKey, \".0\"))\n      }, {\n        onChange: function onChange(selected) {\n          if (isEmpty(selected)) {\n            useDefaultInputValueRef.current = false;\n            setInputValue('');\n          }\n\n          _onChange(selected);\n        },\n        setUseDefaultInputValue: function setUseDefaultInputValue() {\n          var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n          useDefaultInputValueRef.current = flag;\n        },\n        onInputChange: useInputChange ? debounce(function () {\n          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          useDefaultInputValueRef.current = false;\n          setInputValue(value);\n\n          if (onInputChange instanceof Function) {\n            onInputChange(value);\n          }\n        }, variableParamKeyRef.current ? 300 : 0) : onInputChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }));\n    };\n  };\n};","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/api/hocs.js"],"names":["debounce","get","isEmpty","isEqual","query","React","useEffect","useRef","useState","usePreviousValue","inputValue","ref","current","withQuery","mapDataToProps","shouldGetLoadingProp","useInputChange","dataKey","Error","WrappedComponent","props","queryOptions","defaultInputValue","onInputChange","onChange","restProps","isLoading","state","setState","setInputValue","variableParamKeyRef","useDefaultInputValueRef","_suggestions","prevInputValue","prevSuggestions","params","Object","keys","filter","key","url","jsondata","JSON","stringify","then","data","suggestions","suggestion","catch","error","console","value","selected","flag","Function"],"mappings":"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","sourcesContent":["import debounce from 'lodash/debounce';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { query } from 'owp/api';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction usePreviousValue(inputValue) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = inputValue;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nexport const withQuery = (\r\n    mapDataToProps,\r\n    { shouldGetLoadingProp = false, useInputChange = false, dataKey = 'suggestions' } = {}\r\n) => {\r\n    if (typeof mapDataToProps !== 'function') {\r\n        throw new Error('객체(object)를 리턴하는 함수이어야 합니다.');\r\n    }\r\n\r\n    return (WrappedComponent) => {\r\n        return (props) => {\r\n            const {\r\n                query: queryOptions = {},\r\n                defaultInputValue = '',\r\n                onInputChange,\r\n                onChange = () => {},\r\n                ...restProps\r\n            } = props;\r\n\r\n            const [state, setState] = useState({ [dataKey]: [], isLoading: false });\r\n            const [inputValue, setInputValue] = useState();\r\n\r\n            const variableParamKeyRef = useRef(null);\r\n            const useDefaultInputValueRef = useRef(!isEmpty(defaultInputValue));\r\n\r\n            const _suggestions = get(state, dataKey);\r\n\r\n            const prevInputValue = usePreviousValue(inputValue);\r\n            const prevSuggestions = usePreviousValue(_suggestions);\r\n\r\n            useEffect(() => {\r\n                const { params = {} } = queryOptions || {};\r\n\r\n                if (useInputChange && !variableParamKeyRef.current) {\r\n                    variableParamKeyRef.current = get(\r\n                        Object.keys(params).filter((key) => !get(params, key)),\r\n                        0\r\n                    );\r\n                }\r\n            });\r\n\r\n            useEffect(() => {\r\n                if (\r\n                    (useDefaultInputValueRef.current &&\r\n                        (isEmpty(_suggestions) || !isEqual(_suggestions, prevSuggestions))) ||\r\n                    (!isEmpty(queryOptions) &&\r\n                        !isEqual(prevInputValue, inputValue) &&\r\n                        (!useInputChange || !isEmpty(inputValue)))\r\n                ) {\r\n                    shouldGetLoadingProp && setState({ isLoading: true });\r\n\r\n                    const { url, params } = queryOptions;\r\n\r\n                    query({\r\n                        url,\r\n                        params: {\r\n                            jsondata: JSON.stringify({\r\n                                ...params,\r\n                                ...(useInputChange &&\r\n                                    !!variableParamKeyRef.current && {\r\n                                        [variableParamKeyRef.current]: useDefaultInputValueRef.current\r\n                                            ? defaultInputValue\r\n                                            : inputValue,\r\n                                    }),\r\n                            }),\r\n                        },\r\n                    })\r\n                        .then((data) => {\r\n                            const suggestions = mapDataToProps(data, { ...props });\r\n                            setState({\r\n                                ...suggestions,\r\n                                ...(shouldGetLoadingProp && { isLoading: false }),\r\n                            });\r\n\r\n                            const suggestion = useDefaultInputValueRef.current\r\n                                ? get(suggestions, 'suggestions.0')\r\n                                : '';\r\n                            if (useDefaultInputValueRef.current && !isEmpty(suggestion)) {\r\n                                onChange(suggestion);\r\n                                return;\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('error', error);\r\n                            shouldGetLoadingProp && setState({ isLoading: false });\r\n                        });\r\n\r\n                    return;\r\n                }\r\n\r\n                // !useDefaultInputValueRef.current && setState({ [dataKey]: [], isLoading: false });\r\n            }, [queryOptions, inputValue]);\r\n\r\n            return (\r\n                <WrappedComponent\r\n                    {...restProps}\r\n                    {...state}\r\n                    {...(useDefaultInputValueRef.current && { value: get(state, `${dataKey}.0`) })}\r\n                    onChange={(selected) => {\r\n                        if (isEmpty(selected)) {\r\n                            useDefaultInputValueRef.current = false;\r\n                            setInputValue('');\r\n                        }\r\n                        onChange(selected);\r\n                    }}\r\n                    setUseDefaultInputValue={(flag = true) => {\r\n                        useDefaultInputValueRef.current = flag;\r\n                    }}\r\n                    onInputChange={\r\n                        useInputChange\r\n                            ? debounce(\r\n                                  (value = '') => {\r\n                                      useDefaultInputValueRef.current = false;\r\n                                      setInputValue(value);\r\n                                      if (onInputChange instanceof Function) {\r\n                                          onInputChange(value);\r\n                                      }\r\n                                  },\r\n                                  variableParamKeyRef.current ? 300 : 0\r\n                              )\r\n                            : onInputChange\r\n                    }\r\n                />\r\n            );\r\n        };\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}