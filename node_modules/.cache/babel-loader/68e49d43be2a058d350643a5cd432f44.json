{"ast":null,"code":"/**\r\n * Module that defines everything related to building CurveColumns.\r\n * It is a container which has CurveColumn element which is a Slice.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Column } from \"../../charts/elements/Column\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to create CurveColumns.\r\n *\r\n * @see {@link ICurveColumnEvents} for a list of available events\r\n * @see {@link ICurveColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar CurveColumn =\n/** @class */\nfunction (_super) {\n  __extends(CurveColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveColumn() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurveColumn\";\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  CurveColumn.prototype.createAssets = function () {\n    this.curveColumn = this.createChild(Sprite);\n    this.CurveColumn = this.curveColumn; // because of an inital mistake, leave ref\n\n    this.curveColumn.shouldClone = false;\n    this.curveColumn.strokeOpacity = undefined; // some dirty hack so that if user access column, it won't get error\n\n    this.column = this.curveColumn;\n  };\n  /**\r\n   * Copies all parameters from another [[CurveColumn]].\r\n   *\r\n   * @param source Source CurveColumn\r\n   */\n\n\n  CurveColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.curveColumn) {\n      this.curveColumn.copyFrom(source.curveColumn);\n    }\n  };\n\n  return CurveColumn;\n}(Column);\n\nexport { CurveColumn };\n/**\r\n * Regiscolumn system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurveColumn\"] = CurveColumn;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/CurveColumn.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AAEH;;;;;AAKG;;AACH,SAAS,MAAT,QAA0E,8BAA1E;AACA,SAAS,MAAT,QAAuB,mBAAvB;AACA,SAAS,QAAT,QAAyB,qBAAzB;AA2BA;;;;;AAKG;;AAEH;;;;;;AAMG;;AACH,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;AA4BhC;;AAEG;;;AACH,WAAA,WAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,aAAjB;;AACA;AAED;;AAEG;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAV,YAAA;AACC,SAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,MAAjB,CAAnB;AACA,SAAK,WAAL,GAAmB,KAAK,WAAxB,CAFD,CAEsC;;AACrC,SAAK,WAAL,CAAiB,WAAjB,GAA+B,KAA/B;AACA,SAAK,WAAL,CAAiB,aAAjB,GAAiC,SAAjC,CAJD,CAKC;;AACA,SAAK,MAAL,GAAmB,KAAK,WAAxB;AACA,GAPS;AASV;;;;AAIG;;;AACI,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,MAAhB,EAA4B;AAC3B,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,MAAf;;AACA,QAAI,KAAK,WAAT,EAAsB;AACrB,WAAK,WAAL,CAAiB,QAAjB,CAA0B,MAAM,CAAC,WAAjC;AACA;AACD,GALM;;AAMR,SAAA,WAAA;AAAC,CA3DD,CAAiC,MAAjC,CAAA;;;AA6DA;;;;;AAKG;;AACH,QAAQ,CAAC,iBAAT,CAA2B,aAA3B,IAA4C,WAA5C","sourcesContent":["/**\r\n * Module that defines everything related to building CurveColumns.\r\n * It is a container which has CurveColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"../../charts/elements/Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurveColumn]].\r\n */\r\nexport interface ICurveColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[CurveColumn]].\r\n */\r\nexport interface ICurveColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveColumnAdapters extends IColumnAdapters, ICurveColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create CurveColumns.\r\n *\r\n * @see {@link ICurveColumnEvents} for a list of available events\r\n * @see {@link ICurveColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurveColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic curveColumn: Sprite;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic CurveColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.curveColumn = this.createChild(Sprite);\r\n\t\tthis.CurveColumn = this.curveColumn; // because of an inital mistake, leave ref\r\n\t\tthis.curveColumn.shouldClone = false;\r\n\t\tthis.curveColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curveColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurveColumn]].\r\n\t *\r\n\t * @param source Source CurveColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curveColumn) {\r\n\t\t\tthis.curveColumn.copyFrom(source.curveColumn)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Regiscolumn system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveColumn\"] = CurveColumn;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}