{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\owp\\\\src\\\\wrapper\\\\OwpCheckBox.js\";\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, FormLabel, withStyles } from '@material-ui/core';\nimport classNames from 'classnames';\nimport { get, isArray, isEmpty, isString, noop, pick } from 'lodash';\nimport { depr } from 'owp/debug';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nvar styles = {\n  formLabel: {\n    transform: 'translate(0, 1.5px) scale(0.75)',\n    transformOrigin: 'top left'\n  },\n  formGroup: {\n    marginTop: '-1.2rem',\n    marginBottom: '-1.2rem'\n  },\n  formControlLabel: {\n    marginTop: '-1.2rem',\n    marginBottom: '-0.6rem'\n  }\n};\n\nfunction OwpCheckBox(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      name = _ref.name,\n      classes = _ref.classes,\n      isSearch = _ref.isSearch,\n      isReset = _ref.isReset,\n      isRow = _ref.isRow,\n      useReset = _ref.useReset,\n      required = _ref.required,\n      disabled = _ref.disabled,\n      errorMessage = _ref.errorMessage,\n      label = _ref.label,\n      optionLabel = _ref.optionLabel,\n      optionLabelPlacement = _ref.optionLabelPlacement,\n      onChange = _ref.onChange,\n      restProps = _objectWithoutProperties(_ref, [\"className\", \"name\", \"classes\", \"isSearch\", \"isReset\", \"isRow\", \"useReset\", \"required\", \"disabled\", \"errorMessage\", \"label\", \"optionLabel\", \"optionLabelPlacement\", \"onChange\"]);\n\n  var options = isEmpty(get(restProps, 'options')) ? get(restProps, 'items', []) : get(restProps, 'options');\n  var isEmptyOptionsProp = isEmpty(options);\n  var defaultValue = isEmptyOptionsProp ? restProps.defaultValue : isString(restProps.defaultValue) ? restProps.defaultValue.split(',') : isArray(restProps.defaultValue) ? restProps.defaultValue : [];\n\n  var _useState = useState(isArray(defaultValue) ? defaultValue.map(function (v) {\n    return v.toString();\n  }) : defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var inputRef = useRef(null);\n  useEffect(function () {\n    if (!isEmptyOptionsProp && required && !isEmpty(defaultValue)) {\n      inputRef.current.value = defaultValue.join(',');\n      inputRef.current.setCustomValidity('');\n    }\n\n    if (!isEmpty(restProps.items)) {\n      depr('[OwpCheckBox]: `items` prop은 deprecate 되었습니다. `options` prop을 사용 바랍니다.');\n    }\n\n    if (!!restProps.itemLabel) {\n      depr('[OwpCheckBox]: `itemLabel` prop은 deprecate 되었습니다. `optionLabel` prop을 사용 바랍니다.');\n    }\n\n    if (!!restProps.itemLabelPlacement) {\n      depr('[OwpCheckBox]: `itemLabelPlacement` prop은 deprecate 되었습니다. `optionLabelPlacement` prop을 사용 바랍니다.');\n    }\n  }, []);\n  useEffect(function () {\n    if (useReset && isReset) {\n      var changedEvent = new Event('change', {\n        bubbles: true\n      });\n      Object.defineProperty(changedEvent, 'target', {\n        writable: false,\n        value: _objectSpread({\n          name: restProps.name,\n          value: defaultValue\n        }, isEmptyOptionsProp && {\n          checked: defaultValue\n        })\n      });\n      handleChange(changedEvent);\n    }\n  }, [useReset, isReset]);\n\n  var handleChange = function handleChange(evt) {\n    if (isEmptyOptionsProp) {\n      if (onChange instanceof Function) {\n        onChange(evt, evt.target.checked);\n      }\n\n      setValue(evt.target.checked);\n      return;\n    }\n\n    var changedValue = isReset ? evt.target.value : evt.target.checked ? [].concat(_toConsumableArray(value), [evt.target.value.toString()]) : value.filter(function (v) {\n      return v !== evt.target.value;\n    });\n    var changedValueStr = changedValue.join(',');\n\n    if (onChange instanceof Function) {\n      var changedEvent = new Event('change', {\n        bubbles: true\n      });\n      Object.defineProperty(changedEvent, 'target', {\n        writable: false,\n        value: {\n          name: restProps.name,\n          value: changedValueStr\n        }\n      });\n      onChange(changedEvent, changedValueStr);\n    }\n\n    if (!isEmptyOptionsProp && required) {\n      inputRef.current.value = changedValueStr;\n      !isEmpty(changedValue) && inputRef.current.setCustomValidity('');\n    }\n\n    setValue(changedValue);\n  };\n\n  var checkboxProps = pick(restProps, ['checkedIcon', 'color', 'disableRipple', 'icon', 'id', 'indeterminate', 'indeterminateIcon', 'inputProps', 'inputRef', 'variant']);\n  return /*#__PURE__*/React.createElement(FormControl, {\n    disabled: disabled,\n    required: !isEmptyOptionsProp && required,\n    name: name,\n    error: Boolean(errorMessage),\n    className: classNames(className, {\n      'mr-20': isSearch\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, label && /*#__PURE__*/React.createElement(FormLabel, {\n    classes: {\n      root: classes.formLabel\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 23\n    }\n  }, label), isEmptyOptionsProp ? /*#__PURE__*/React.createElement(FormControlLabel, {\n    classes: {\n      root: classNames(classes.formControlLabel, !label && 'mt-8')\n    },\n    control: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n      type: \"checkbox\",\n      checked: value,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    })),\n    label: optionLabel || restProps.itemLabel,\n    labelPlacement: optionLabelPlacement || restProps.itemLabelPlacement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(FormGroup, {\n    row: isRow,\n    classes: isRow ? {\n      row: classNames(!!label && classes.formGroup, !label && 'mt-8')\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, options.map(function () {\n    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      label: '',\n      value: '',\n      labelPlacement: 'end'\n    };\n    var index = arguments.length > 1 ? arguments[1] : undefined;\n    return /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: \"checkbox-option-\".concat(index),\n      control: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n        type: \"checkbox\",\n        name: option.label,\n        value: option.value.toString(),\n        checked: value.includes(option.value.toString()),\n        onChange: handleChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 41\n        }\n      })),\n      label: option.label,\n      labelPlacement: !option.labelPlacement ? 'end' : option.labelPlacement,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 33\n      }\n    });\n  })), !isEmptyOptionsProp && required && /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef,\n    tabIndex: -1,\n    autoComplete: \"off\",\n    style: {\n      opacity: 0,\n      height: 0\n    },\n    value: get(inputRef.current, 'value', ''),\n    onChange: noop,\n    onInvalid: function onInvalid(e) {\n      e.target.setCustomValidity('다음 옵션 중 1개이상 선택하세요.');\n    },\n    required: required,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }), Boolean(errorMessage) && /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 39\n    }\n  }, errorMessage));\n}\n\nOwpCheckBox.defaultProps = {\n  className: '',\n  name: 'owp-checkbox',\n  label: '',\n  optionLabel: '',\n  optionLabelPlacement: 'end',\n  options: [],\n  required: false,\n  disabled: false,\n  defaultValue: [],\n  value: false,\n  useReset: false,\n  isReset: false,\n  isSearch: false,\n  isRow: true,\n  errorMessage: '',\n  onChange: function onChange(event) {}\n};\n\nfunction mapStateToProps(_ref2) {\n  var owp = _ref2.owp;\n  return {\n    isReset: owp.wrapper.isReset\n  };\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(OwpCheckBox));","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/wrapper/OwpCheckBox.js"],"names":["Checkbox","FormControl","FormControlLabel","FormGroup","FormHelperText","FormLabel","withStyles","classNames","get","isArray","isEmpty","isString","noop","pick","depr","React","useEffect","useRef","useState","connect","styles","formLabel","transform","transformOrigin","formGroup","marginTop","marginBottom","formControlLabel","OwpCheckBox","className","name","classes","isSearch","isReset","isRow","useReset","required","disabled","errorMessage","label","optionLabel","optionLabelPlacement","onChange","restProps","options","isEmptyOptionsProp","defaultValue","split","map","v","toString","value","setValue","inputRef","current","join","setCustomValidity","items","itemLabel","itemLabelPlacement","changedEvent","Event","bubbles","Object","defineProperty","writable","checked","handleChange","evt","Function","target","changedValue","filter","changedValueStr","checkboxProps","Boolean","root","row","option","labelPlacement","index","includes","opacity","height","e","defaultProps","event","mapStateToProps","owp","wrapper"],"mappings":"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","sourcesContent":["import {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormHelperText,\r\n    FormLabel,\r\n    withStyles,\r\n} from '@material-ui/core';\r\nimport classNames from 'classnames';\r\nimport { get, isArray, isEmpty, isString, noop, pick } from 'lodash';\r\nimport { depr } from 'owp/debug';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst styles = {\r\n    formLabel: {\r\n        transform: 'translate(0, 1.5px) scale(0.75)',\r\n        transformOrigin: 'top left',\r\n    },\r\n    formGroup: {\r\n        marginTop: '-1.2rem',\r\n        marginBottom: '-1.2rem',\r\n    },\r\n    formControlLabel: {\r\n        marginTop: '-1.2rem',\r\n        marginBottom: '-0.6rem',\r\n    },\r\n};\r\n\r\nfunction OwpCheckBox({\r\n    className,\r\n    name,\r\n    classes,\r\n    isSearch,\r\n    isReset,\r\n    isRow,\r\n    useReset,\r\n    required,\r\n    disabled,\r\n    errorMessage,\r\n    label,\r\n    optionLabel,\r\n    optionLabelPlacement,\r\n    onChange,\r\n    ...restProps\r\n}) {\r\n    const options = isEmpty(get(restProps, 'options'))\r\n        ? get(restProps, 'items', [])\r\n        : get(restProps, 'options');\r\n    const isEmptyOptionsProp = isEmpty(options);\r\n    const defaultValue = isEmptyOptionsProp\r\n        ? restProps.defaultValue\r\n        : isString(restProps.defaultValue)\r\n        ? restProps.defaultValue.split(',')\r\n        : isArray(restProps.defaultValue)\r\n        ? restProps.defaultValue\r\n        : [];\r\n\r\n    const [value, setValue] = useState(\r\n        isArray(defaultValue) ? defaultValue.map((v) => v.toString()) : defaultValue\r\n    );\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!isEmptyOptionsProp && required && !isEmpty(defaultValue)) {\r\n            inputRef.current.value = defaultValue.join(',');\r\n            inputRef.current.setCustomValidity('');\r\n        }\r\n\r\n        if (!isEmpty(restProps.items)) {\r\n            depr(\r\n                '[OwpCheckBox]: `items` prop은 deprecate 되었습니다. `options` prop을 사용 바랍니다.'\r\n            );\r\n        }\r\n\r\n        if (!!restProps.itemLabel) {\r\n            depr(\r\n                '[OwpCheckBox]: `itemLabel` prop은 deprecate 되었습니다. `optionLabel` prop을 사용 바랍니다.'\r\n            );\r\n        }\r\n\r\n        if (!!restProps.itemLabelPlacement) {\r\n            depr(\r\n                '[OwpCheckBox]: `itemLabelPlacement` prop은 deprecate 되었습니다. `optionLabelPlacement` prop을 사용 바랍니다.'\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (useReset && isReset) {\r\n            const changedEvent = new Event('change', {\r\n                bubbles: true,\r\n            });\r\n\r\n            Object.defineProperty(changedEvent, 'target', {\r\n                writable: false,\r\n                value: {\r\n                    name: restProps.name,\r\n                    value: defaultValue,\r\n                    ...(isEmptyOptionsProp && { checked: defaultValue }),\r\n                },\r\n            });\r\n\r\n            handleChange(changedEvent);\r\n        }\r\n    }, [useReset, isReset]);\r\n\r\n    const handleChange = (evt) => {\r\n        if (isEmptyOptionsProp) {\r\n            if (onChange instanceof Function) {\r\n                onChange(evt, evt.target.checked);\r\n            }\r\n            setValue(evt.target.checked);\r\n            return;\r\n        }\r\n\r\n        const changedValue = isReset\r\n            ? evt.target.value\r\n            : evt.target.checked\r\n            ? [...value, evt.target.value.toString()]\r\n            : value.filter((v) => v !== evt.target.value);\r\n        const changedValueStr = changedValue.join(',');\r\n\r\n        if (onChange instanceof Function) {\r\n            const changedEvent = new Event('change', {\r\n                bubbles: true,\r\n            });\r\n\r\n            Object.defineProperty(changedEvent, 'target', {\r\n                writable: false,\r\n                value: {\r\n                    name: restProps.name,\r\n                    value: changedValueStr,\r\n                },\r\n            });\r\n\r\n            onChange(changedEvent, changedValueStr);\r\n        }\r\n\r\n        if (!isEmptyOptionsProp && required) {\r\n            inputRef.current.value = changedValueStr;\r\n            !isEmpty(changedValue) && inputRef.current.setCustomValidity('');\r\n        }\r\n\r\n        setValue(changedValue);\r\n    };\r\n\r\n    const checkboxProps = pick(restProps, [\r\n        'checkedIcon',\r\n        'color',\r\n        'disableRipple',\r\n        'icon',\r\n        'id',\r\n        'indeterminate',\r\n        'indeterminateIcon',\r\n        'inputProps',\r\n        'inputRef',\r\n        'variant',\r\n    ]);\r\n\r\n    return (\r\n        <FormControl\r\n            disabled={disabled}\r\n            required={!isEmptyOptionsProp && required}\r\n            name={name}\r\n            error={Boolean(errorMessage)}\r\n            className={classNames(className, { 'mr-20': isSearch })}\r\n        >\r\n            {label && <FormLabel classes={{ root: classes.formLabel }}>{label}</FormLabel>}\r\n            {isEmptyOptionsProp ? (\r\n                <FormControlLabel\r\n                    classes={{ root: classNames(classes.formControlLabel, !label && 'mt-8') }}\r\n                    control={\r\n                        <Checkbox\r\n                            {...checkboxProps}\r\n                            type=\"checkbox\"\r\n                            checked={value}\r\n                            onChange={handleChange}\r\n                        />\r\n                    }\r\n                    label={optionLabel || restProps.itemLabel}\r\n                    labelPlacement={optionLabelPlacement || restProps.itemLabelPlacement}\r\n                />\r\n            ) : (\r\n                <FormGroup\r\n                    row={isRow}\r\n                    classes={\r\n                        isRow\r\n                            ? { row: classNames(!!label && classes.formGroup, !label && 'mt-8') }\r\n                            : {}\r\n                    }\r\n                >\r\n                    {options.map(\r\n                        (option = { label: '', value: '', labelPlacement: 'end' }, index) => {\r\n                            return (\r\n                                <FormControlLabel\r\n                                    key={`checkbox-option-${index}`}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            {...checkboxProps}\r\n                                            type=\"checkbox\"\r\n                                            name={option.label}\r\n                                            value={option.value.toString()}\r\n                                            checked={value.includes(option.value.toString())}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    }\r\n                                    label={option.label}\r\n                                    labelPlacement={\r\n                                        !option.labelPlacement ? 'end' : option.labelPlacement\r\n                                    }\r\n                                />\r\n                            );\r\n                        }\r\n                    )}\r\n                </FormGroup>\r\n            )}\r\n            {!isEmptyOptionsProp && required && (\r\n                <input\r\n                    ref={inputRef}\r\n                    tabIndex={-1}\r\n                    autoComplete=\"off\"\r\n                    style={{ opacity: 0, height: 0 }}\r\n                    value={get(inputRef.current, 'value', '')}\r\n                    onChange={noop}\r\n                    onInvalid={(e) => {\r\n                        e.target.setCustomValidity('다음 옵션 중 1개이상 선택하세요.');\r\n                    }}\r\n                    required={required}\r\n                />\r\n            )}\r\n            {Boolean(errorMessage) && <FormHelperText>{errorMessage}</FormHelperText>}\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nOwpCheckBox.defaultProps = {\r\n    className: '',\r\n    name: 'owp-checkbox',\r\n    label: '',\r\n    optionLabel: '',\r\n    optionLabelPlacement: 'end',\r\n    options: [],\r\n    required: false,\r\n    disabled: false,\r\n    defaultValue: [],\r\n    value: false,\r\n    useReset: false,\r\n    isReset: false,\r\n    isSearch: false,\r\n    isRow: true,\r\n    errorMessage: '',\r\n    onChange: (event) => {},\r\n};\r\n\r\nfunction mapStateToProps({ owp }) {\r\n    return {\r\n        isReset: owp.wrapper.isReset,\r\n    };\r\n}\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps)(OwpCheckBox));\r\n"]},"metadata":{},"sourceType":"module"}