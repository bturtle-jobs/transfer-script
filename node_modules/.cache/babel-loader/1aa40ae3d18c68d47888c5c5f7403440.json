{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _asyncToGenerator from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\owp\\\\src\\\\components\\\\TreeGrid\\\\TreeGrid.js\";\nimport { depr } from 'owp/debug';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { fetchAsText, makeColumnsFromGridLayout, transform } from './util';\n\nfunction createGrid(_ref) {\n  var id = _ref.id,\n      gridData = _ref.gridData,\n      gridUrl = _ref.gridUrl,\n      layoutData = _ref.layoutData,\n      layoutUrl = _ref.layoutUrl,\n      xml = _ref.xml,\n      dataUrl = _ref.dataUrl,\n      TGData = _objectWithoutProperties(_ref, [\"id\", \"gridData\", \"gridUrl\", \"layoutData\", \"layoutUrl\", \"xml\", \"dataUrl\"]);\n\n  if (!!xml) {\n    depr('`xml` prop는 deprecate 되었습니다. `gridData` prop을 사용 바랍니다..');\n    gridData = xml;\n  }\n\n  if (!!dataUrl) {\n    depr('`dataUrl` prop는 deprecate 되었습니다. `gridUrl` prop을 사용 바랍니다..');\n    gridUrl = dataUrl;\n  }\n\n  var _gridInstance = window.TreeGrid({\n    Debug: '',\n    Layout: {\n      Data: layoutData,\n      Url: layoutUrl\n    },\n    Data: {\n      Data: gridData || makeTreeGridData(TGData),\n      Url: gridUrl\n    }\n  }, id, id);\n\n  function destroyInstance() {\n    window.TGDelEvent(null, '');\n    getInstance().Dispose();\n    _gridInstance = null;\n  }\n\n  function getInstance() {\n    return _gridInstance;\n  }\n\n  return {\n    getInstance: getInstance,\n    destroyInstance: destroyInstance\n  };\n}\n\nfunction log() {\n  if (process.env.NODE_ENV === 'development') {\n    var _console;\n\n    (_console = console).log.apply(_console, arguments);\n  }\n}\n\nfunction makeTreeGridData(_ref2) {\n  var columns = _ref2.columns,\n      rows = _ref2.rows,\n      cfgOptions = _ref2.cfgOptions,\n      defOptions = _ref2.defOptions,\n      solidOptions = _ref2.solidOptions,\n      restTreeGridOptions = _objectWithoutProperties(_ref2, [\"columns\", \"rows\", \"cfgOptions\", \"defOptions\", \"solidOptions\"]);\n\n  var treeGridData = transform(columns, rows, restTreeGridOptions);\n  return _objectSpread(_objectSpread({}, treeGridData), {}, {\n    Cfg: _objectSpread({\n      // NoVScroll: 1,\n      // MaxVScroll: 400,\n      // RowIndex: 'NO',\n      // RowIndexType: 6,\n      Code: 'GTSEASWUCRTAW',\n      ConstWidth: 1,\n      ConstHeight: 1,\n      Copying: 1,\n      ColMoving: false,\n      MaxHeight: 1,\n      Dragging: false\n    }, cfgOptions),\n    Def: _objectSpread({}, defOptions),\n    Solid: _toConsumableArray(solidOptions),\n    Toolbar: {\n      Visible: 1,\n      // Formula:\n      //     '\"전체 : \"+count(7)+\" / 추가 : \"+count(\"Row.Added==1\",7)+\" / 수정 : \"+count(\"Row.Changed==1\",7)+\" / 삭제 : \"+count(\"Row.Deleted>0\",7)+\"\"',\n      Add: 0,\n      Export: 0,\n      Scales: 0,\n      Sizes: 0,\n      Split: 0,\n      Columns: 0,\n      Help: 0,\n      Debug: 0,\n      Reload: 0,\n      Styles: 0,\n      AddChild: 0,\n      Cfg: 0,\n      Print: 0\n    }\n  });\n}\n\nfunction makeColumnsFromLayout() {\n  return _makeColumnsFromLayout.apply(this, arguments);\n}\n/**\r\n *\r\n *  @visibleName TreeGrid\r\n */\n\n\nfunction _makeColumnsFromLayout() {\n  _makeColumnsFromLayout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _ref3,\n        layoutUrl,\n        layoutData,\n        xmlStr,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref3 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, layoutUrl = _ref3.layoutUrl, layoutData = _ref3.layoutData;\n            _context2.prev = 1;\n\n            if (!layoutUrl) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 5;\n            return fetchAsText(layoutUrl);\n\n          case 5:\n            xmlStr = _context2.sent;\n            return _context2.abrupt(\"return\", makeColumnsFromGridLayout(xmlStr));\n\n          case 7:\n            if (!layoutData) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", makeColumnsFromGridLayout(layoutData));\n\n          case 9:\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error(_context2.t0);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 11]]);\n  }));\n  return _makeColumnsFromLayout.apply(this, arguments);\n}\n\nvar ReactTreeGrid = /*#__PURE__*/function (_React$Component) {\n  _inherits(ReactTreeGrid, _React$Component);\n\n  var _super = _createSuper(ReactTreeGrid);\n\n  function ReactTreeGrid() {\n    var _this;\n\n    _classCallCheck(this, ReactTreeGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._treeGrid = null;\n    return _this;\n  }\n\n  _createClass(ReactTreeGrid, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$props, onMount, onRowAdd, onRowDelete, onRowUndelete, onRowChange, onSave, onSelect, onChange, layoutUrl, layoutData, layoutColumns, treeGridId;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, onMount = _this$props.onMount, onRowAdd = _this$props.onRowAdd, onRowDelete = _this$props.onRowDelete, onRowUndelete = _this$props.onRowUndelete, onRowChange = _this$props.onRowChange, onSave = _this$props.onSave, onSelect = _this$props.onSelect, onChange = _this$props.onChange, layoutUrl = _this$props.layoutUrl, layoutData = _this$props.layoutData; // set columns from grid layout\n\n                _context.next = 3;\n                return makeColumnsFromLayout({\n                  layoutUrl: layoutUrl,\n                  layoutData: layoutData\n                });\n\n              case 3:\n                layoutColumns = _context.sent;\n                this._treeGrid = createGrid(_objectSpread(_objectSpread({}, this.props), {}, {\n                  layoutColumns: layoutColumns\n                }));\n                treeGridId = this._treeGrid.getInstance().id;\n                window.TGSetEvent('OnRowAdd', treeGridId, onRowAdd);\n                window.TGSetEvent('OnRowDelete', treeGridId, onRowDelete);\n                window.TGSetEvent('OnRowUndelete', treeGridId, onRowUndelete);\n                window.TGSetEvent('OnAfterValueChanged', treeGridId, onRowChange);\n                window.TGSetEvent('OnSelect', treeGridId, onSelect);\n                window.TGSetEvent('OnSave', treeGridId, onSave); //onChange\n\n                window.TGAddEvent('OnRowAdd', treeGridId, onChange);\n                window.TGAddEvent('OnRowDelete', treeGridId, onChange);\n                window.TGAddEvent('OnRowUndelete', treeGridId, onChange);\n                window.TGAddEvent('OnAfterValueChanged', treeGridId, onChange);\n                onMount(this._treeGrid.getInstance());\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {// if (!isEqual(prevProps.columnOptions, this.props.columnOptions)) {\n      //     console.log('fffff', this._treeGrid.getInstance());\n      //     this._treeGrid.getInstance().Refresh(1);\n      // }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._treeGrid.destroyInstance();\n    }\n  }, {\n    key: \"styles\",\n    get: function get() {\n      var style = _objectSpread({\n        width: this.props.width,\n        height: this.props.height\n      }, this.props.style);\n\n      return style;\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      return this.props.className;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.props.id,\n        className: this.classes,\n        style: this.styles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 16\n        }\n      });\n    }\n  }]);\n\n  return ReactTreeGrid;\n}(React.Component);\n\nReactTreeGrid.propTypes = {\n  /**\r\n   * TreeGrid가 마운트 되기 위한 타켓 DOM id와 TreeGrid의 고유 id로 사용\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * TreeGrid 데이터 구조에 미리 맞춰진 XML(string) 또는 JSON을 사용하여 렌더링하고 싶을 때 사용\r\n   * @link http://www.treegrid.com/Doc/Create.htm#Creating\r\n   */\n  gridData: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /**\r\n   * 미리 생성되어 있는 파일(XML, JSON)을 참조하여 TreeGrid를 렌더링하고 싶을 때 사용\r\n   */\n  gridUrl: PropTypes.string,\n\n  /**\r\n   * TreeGrid 데이터 구조에 미리 맞춰진 XML(string) 또는 JSON을 사용하여 TreeGrid의 레이아웃을 렌더링하고 싶을 때 사용\r\n   */\n  layoutData: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /**\r\n   * 미리 생성되어 있는 파일(XML, JSON)을 참조하여 TreeGrid 레이아웃을 렌더링하고 싶을 때 사용\r\n   */\n  layoutUrl: PropTypes.string,\n\n  /**\r\n   * 컬럼 데이터\r\n   */\n  columns: PropTypes.object,\n\n  /**\r\n   * 로우 데이터\r\n   */\n  rows: PropTypes.arrayOf(PropTypes.object),\n\n  /**\r\n   * width\r\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\r\n   * height\r\n   */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.object,\n  className: PropTypes.string,\n\n  /**\r\n   * 컴포넌트가 마운트 된 후 실행\r\n   *\r\n   * @param {TreeGridInstance} treeGridInstance 생성된 TreeGrid의 인스턴스\r\n   */\n  onMount: PropTypes.func,\n\n  /**\r\n   * TreeGrid의 Save 이벤트가 호출 된 후 실행\r\n   *\r\n   * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터\r\n   */\n  onSave: PropTypes.func,\n\n  /**\r\n   * TreeGrid의 Checkbox 이벤트(click) 발생 시 실행\r\n   *\r\n   * @param {Array} object [{rowIdKey: \"1\"}, ...]\r\n   */\n  onSelect: PropTypes.func,\n\n  /**\r\n   * TreeGrid에서 CUD 발생 시 실행\r\n   *\r\n   * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터\r\n   */\n  onChange: PropTypes.func,\n  onRowAdd: PropTypes.func,\n  onRowDelete: PropTypes.func,\n  onRowChange: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  rowOptions: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  cfgOptions: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  defOptions: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  cellOptions: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  headOptions: PropTypes.array,\n\n  /**\r\n   * @ignore\r\n   */\n  solidOptions: PropTypes.array,\n\n  /**\r\n   *\r\n   * @deprecated `gridData` prop 사용\r\n   *\r\n   * TreeGrid 데이터를 XML(string)로 핸들링 할 경우에 필요한 prop\r\n   */\n  xml: PropTypes.string,\n\n  /**\r\n   *\r\n   * @deprecated `gridUrl` prop 사용\r\n   *\r\n   * TreeGrid 데이터를 xml url로 핸들링 할 경우에 필요한 prop\r\n   */\n  dataUrl: PropTypes.string\n};\nReactTreeGrid.defaultProps = {\n  id: 'reactTreeGrid',\n  xml: null,\n  layoutUrl: null,\n  dataUrl: null,\n  columns: {},\n  rows: [],\n  style: {},\n  width: '100%',\n  height: '100%',\n  rowOptions: {},\n  cfgOptions: {},\n  defOptions: {},\n  cellOptions: {},\n  headOptions: [],\n  solidOptions: [],\n  onMount: function onMount(gridInstance) {},\n  onRowAdd: log,\n  onRowDelete: log,\n  onRowChange: log,\n  onSave: log,\n  onSelect: log,\n  onChange: log\n};\nexport default ReactTreeGrid;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/components/TreeGrid/TreeGrid.js"],"names":["depr","PropTypes","React","fetchAsText","makeColumnsFromGridLayout","transform","createGrid","id","gridData","gridUrl","layoutData","layoutUrl","xml","dataUrl","TGData","_gridInstance","window","TreeGrid","Debug","Layout","Data","Url","makeTreeGridData","destroyInstance","TGDelEvent","getInstance","Dispose","log","process","env","NODE_ENV","console","columns","rows","cfgOptions","defOptions","solidOptions","restTreeGridOptions","treeGridData","Cfg","Code","ConstWidth","ConstHeight","Copying","ColMoving","MaxHeight","Dragging","Def","Solid","Toolbar","Visible","Add","Export","Scales","Sizes","Split","Columns","Help","Reload","Styles","AddChild","Print","makeColumnsFromLayout","xmlStr","error","ReactTreeGrid","_treeGrid","props","onMount","onRowAdd","onRowDelete","onRowUndelete","onRowChange","onSave","onSelect","onChange","layoutColumns","treeGridId","TGSetEvent","TGAddEvent","prevProps","style","width","height","className","classes","styles","Component","propTypes","string","oneOfType","object","arrayOf","number","func","rowOptions","cellOptions","headOptions","array","defaultProps","gridInstance"],"mappings":"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","sourcesContent":["import { depr } from 'owp/debug';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { fetchAsText, makeColumnsFromGridLayout, transform } from './util';\r\n\r\nfunction createGrid({\r\n    id,\r\n    gridData,\r\n    gridUrl,\r\n    layoutData,\r\n    layoutUrl,\r\n\r\n    // deprecated\r\n    xml,\r\n    dataUrl,\r\n\r\n    ...TGData\r\n}) {\r\n    if (!!xml) {\r\n        depr('`xml` prop는 deprecate 되었습니다. `gridData` prop을 사용 바랍니다..');\r\n        gridData = xml;\r\n    }\r\n\r\n    if (!!dataUrl) {\r\n        depr('`dataUrl` prop는 deprecate 되었습니다. `gridUrl` prop을 사용 바랍니다..');\r\n        gridUrl = dataUrl;\r\n    }\r\n\r\n    let _gridInstance = window.TreeGrid(\r\n        {\r\n            Debug: '',\r\n            Layout: { Data: layoutData, Url: layoutUrl },\r\n            Data: {\r\n                Data: gridData || makeTreeGridData(TGData),\r\n                Url: gridUrl,\r\n            },\r\n        },\r\n        id,\r\n        id\r\n    );\r\n\r\n    function destroyInstance() {\r\n        window.TGDelEvent(null, '');\r\n        getInstance().Dispose();\r\n        _gridInstance = null;\r\n    }\r\n\r\n    function getInstance() {\r\n        return _gridInstance;\r\n    }\r\n\r\n    return {\r\n        getInstance,\r\n        destroyInstance,\r\n    };\r\n}\r\n\r\nfunction log(...args) {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.log(...args);\r\n    }\r\n}\r\n\r\nfunction makeTreeGridData({\r\n    columns,\r\n    rows,\r\n    cfgOptions,\r\n    defOptions,\r\n    solidOptions,\r\n    ...restTreeGridOptions\r\n}) {\r\n    const treeGridData = transform(columns, rows, restTreeGridOptions);\r\n\r\n    return {\r\n        ...treeGridData,\r\n        Cfg: {\r\n            // NoVScroll: 1,\r\n            // MaxVScroll: 400,\r\n            // RowIndex: 'NO',\r\n            // RowIndexType: 6,\r\n            Code: 'GTSEASWUCRTAW',\r\n            ConstWidth: 1,\r\n            ConstHeight: 1,\r\n            Copying: 1,\r\n            ColMoving: false,\r\n            MaxHeight: 1,\r\n            Dragging: false,\r\n            ...cfgOptions,\r\n        },\r\n        Def: { ...defOptions },\r\n        Solid: [\r\n            ...solidOptions,\r\n            // {\r\n            //     Kind: 'Search',\r\n            // },\r\n        ],\r\n        Toolbar: {\r\n            Visible: 1,\r\n            // Formula:\r\n            //     '\"전체 : \"+count(7)+\" / 추가 : \"+count(\"Row.Added==1\",7)+\" / 수정 : \"+count(\"Row.Changed==1\",7)+\" / 삭제 : \"+count(\"Row.Deleted>0\",7)+\"\"',\r\n            Add: 0,\r\n            Export: 0,\r\n            Scales: 0,\r\n            Sizes: 0,\r\n            Split: 0,\r\n            Columns: 0,\r\n            Help: 0,\r\n            Debug: 0,\r\n            Reload: 0,\r\n            Styles: 0,\r\n            AddChild: 0,\r\n            Cfg: 0,\r\n            Print: 0,\r\n        },\r\n    };\r\n}\r\n\r\nasync function makeColumnsFromLayout({ layoutUrl, layoutData } = {}) {\r\n    try {\r\n        if (!!layoutUrl) {\r\n            const xmlStr = await fetchAsText(layoutUrl);\r\n            return makeColumnsFromGridLayout(xmlStr);\r\n        }\r\n\r\n        if (!!layoutData) {\r\n            return makeColumnsFromGridLayout(layoutData);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n *  @visibleName TreeGrid\r\n */\r\nclass ReactTreeGrid extends React.Component {\r\n    _treeGrid = null;\r\n\r\n    async componentDidMount() {\r\n        const {\r\n            onMount,\r\n            onRowAdd,\r\n            onRowDelete,\r\n            onRowUndelete,\r\n            onRowChange,\r\n            onSave,\r\n            onSelect,\r\n            onChange,\r\n\r\n            layoutUrl,\r\n            layoutData,\r\n        } = this.props;\r\n\r\n        // set columns from grid layout\r\n        const layoutColumns = await makeColumnsFromLayout({\r\n            layoutUrl,\r\n            layoutData,\r\n        });\r\n\r\n        this._treeGrid = createGrid({ ...this.props, layoutColumns });\r\n\r\n        const treeGridId = this._treeGrid.getInstance().id;\r\n\r\n        window.TGSetEvent('OnRowAdd', treeGridId, onRowAdd);\r\n        window.TGSetEvent('OnRowDelete', treeGridId, onRowDelete);\r\n        window.TGSetEvent('OnRowUndelete', treeGridId, onRowUndelete);\r\n        window.TGSetEvent('OnAfterValueChanged', treeGridId, onRowChange);\r\n        window.TGSetEvent('OnSelect', treeGridId, onSelect);\r\n        window.TGSetEvent('OnSave', treeGridId, onSave);\r\n\r\n        //onChange\r\n        window.TGAddEvent('OnRowAdd', treeGridId, onChange);\r\n        window.TGAddEvent('OnRowDelete', treeGridId, onChange);\r\n        window.TGAddEvent('OnRowUndelete', treeGridId, onChange);\r\n        window.TGAddEvent('OnAfterValueChanged', treeGridId, onChange);\r\n\r\n        onMount(this._treeGrid.getInstance());\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // if (!isEqual(prevProps.columnOptions, this.props.columnOptions)) {\r\n        //     console.log('fffff', this._treeGrid.getInstance());\r\n        //     this._treeGrid.getInstance().Refresh(1);\r\n        // }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._treeGrid.destroyInstance();\r\n    }\r\n\r\n    get styles() {\r\n        const style = {\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            ...this.props.style,\r\n        };\r\n\r\n        return style;\r\n    }\r\n\r\n    get classes() {\r\n        return this.props.className;\r\n    }\r\n\r\n    render() {\r\n        return <div id={this.props.id} className={this.classes} style={this.styles} />;\r\n    }\r\n}\r\n\r\nReactTreeGrid.propTypes = {\r\n    /**\r\n     * TreeGrid가 마운트 되기 위한 타켓 DOM id와 TreeGrid의 고유 id로 사용\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * TreeGrid 데이터 구조에 미리 맞춰진 XML(string) 또는 JSON을 사용하여 렌더링하고 싶을 때 사용\r\n     * @link http://www.treegrid.com/Doc/Create.htm#Creating\r\n     */\r\n    gridData: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n\r\n    /**\r\n     * 미리 생성되어 있는 파일(XML, JSON)을 참조하여 TreeGrid를 렌더링하고 싶을 때 사용\r\n     */\r\n    gridUrl: PropTypes.string,\r\n\r\n    /**\r\n     * TreeGrid 데이터 구조에 미리 맞춰진 XML(string) 또는 JSON을 사용하여 TreeGrid의 레이아웃을 렌더링하고 싶을 때 사용\r\n     */\r\n    layoutData: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n\r\n    /**\r\n     * 미리 생성되어 있는 파일(XML, JSON)을 참조하여 TreeGrid 레이아웃을 렌더링하고 싶을 때 사용\r\n     */\r\n    layoutUrl: PropTypes.string,\r\n\r\n    /**\r\n     * 컬럼 데이터\r\n     */\r\n    columns: PropTypes.object,\r\n\r\n    /**\r\n     * 로우 데이터\r\n     */\r\n    rows: PropTypes.arrayOf(PropTypes.object),\r\n\r\n    /**\r\n     * width\r\n     */\r\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n    /**\r\n     * height\r\n     */\r\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * 컴포넌트가 마운트 된 후 실행\r\n     *\r\n     * @param {TreeGridInstance} treeGridInstance 생성된 TreeGrid의 인스턴스\r\n     */\r\n    onMount: PropTypes.func,\r\n\r\n    /**\r\n     * TreeGrid의 Save 이벤트가 호출 된 후 실행\r\n     *\r\n     * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터\r\n     */\r\n    onSave: PropTypes.func,\r\n\r\n    /**\r\n     * TreeGrid의 Checkbox 이벤트(click) 발생 시 실행\r\n     *\r\n     * @param {Array} object [{rowIdKey: \"1\"}, ...]\r\n     */\r\n    onSelect: PropTypes.func,\r\n\r\n    /**\r\n     * TreeGrid에서 CUD 발생 시 실행\r\n     *\r\n     * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터\r\n     */\r\n    onChange: PropTypes.func,\r\n\r\n    onRowAdd: PropTypes.func,\r\n    onRowDelete: PropTypes.func,\r\n    onRowChange: PropTypes.func,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    rowOptions: PropTypes.object,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    cfgOptions: PropTypes.object,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    defOptions: PropTypes.object,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    cellOptions: PropTypes.object,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    headOptions: PropTypes.array,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    solidOptions: PropTypes.array,\r\n\r\n    /**\r\n     *\r\n     * @deprecated `gridData` prop 사용\r\n     *\r\n     * TreeGrid 데이터를 XML(string)로 핸들링 할 경우에 필요한 prop\r\n     */\r\n    xml: PropTypes.string,\r\n\r\n    /**\r\n     *\r\n     * @deprecated `gridUrl` prop 사용\r\n     *\r\n     * TreeGrid 데이터를 xml url로 핸들링 할 경우에 필요한 prop\r\n     */\r\n    dataUrl: PropTypes.string,\r\n};\r\n\r\nReactTreeGrid.defaultProps = {\r\n    id: 'reactTreeGrid',\r\n\r\n    xml: null,\r\n    layoutUrl: null,\r\n    dataUrl: null,\r\n\r\n    columns: {},\r\n    rows: [],\r\n\r\n    style: {},\r\n    width: '100%',\r\n    height: '100%',\r\n\r\n    rowOptions: {},\r\n    cfgOptions: {},\r\n    defOptions: {},\r\n    cellOptions: {},\r\n    headOptions: [],\r\n    solidOptions: [],\r\n    onMount: (gridInstance) => {},\r\n    onRowAdd: log,\r\n    onRowDelete: log,\r\n    onRowChange: log,\r\n    onSave: log,\r\n    onSelect: log,\r\n    onChange: log,\r\n};\r\n\r\nexport default ReactTreeGrid;\r\n"]},"metadata":{},"sourceType":"module"}