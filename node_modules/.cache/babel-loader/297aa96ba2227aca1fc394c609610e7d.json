{"ast":null,"code":"\"use strict\";\n\nvar list = require('postcss').list;\n\nmodule.exports = {\n  /**\n     * Throw special error, to tell beniary,\n     * that this error is from Autoprefixer.\n     */\n  error: function error(text) {\n    var err = new Error(text);\n    err.autoprefixer = true;\n    throw err;\n  },\n\n  /**\n     * Return array, that doesn’t contain duplicates.\n     */\n  uniq: function uniq(array) {\n    var filtered = [];\n\n    for (var _iterator = array, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var i = _ref;\n\n      if (filtered.indexOf(i) === -1) {\n        filtered.push(i);\n      }\n    }\n\n    return filtered;\n  },\n\n  /**\n     * Return \"-webkit-\" on \"-webkit- old\"\n     */\n  removeNote: function removeNote(string) {\n    if (string.indexOf(' ') === -1) {\n      return string;\n    }\n\n    return string.split(' ')[0];\n  },\n\n  /**\n     * Escape RegExp symbols\n     */\n  escapeRegexp: function escapeRegexp(string) {\n    return string.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n  },\n\n  /**\n     * Return regexp to check, that CSS string contain word\n     */\n  regexp: function regexp(word, escape) {\n    if (escape === void 0) {\n      escape = true;\n    }\n\n    if (escape) {\n      word = this.escapeRegexp(word);\n    }\n\n    return new RegExp(\"(^|[\\\\s,(])(\" + word + \"($|[\\\\s(,]))\", 'gi');\n  },\n\n  /**\n     * Change comma list\n     */\n  editList: function editList(value, callback) {\n    var origin = list.comma(value);\n    var changed = callback(origin, []);\n\n    if (origin === changed) {\n      return value;\n    }\n\n    var join = value.match(/,\\s*/);\n    join = join ? join[0] : ', ';\n    return changed.join(join);\n  },\n\n  /**\n     * Split the selector into parts.\n     * It returns 3 level deep array because selectors can be comma\n     * separated (1), space separated (2), and combined (3)\n     * @param {String} selector selector string\n     * @return {Array<Array<Array>>} 3 level deep array of split selector\n     * @see utils.test.js for examples\n     */\n  splitSelector: function splitSelector(selector) {\n    return list.comma(selector).map(function (i) {\n      return list.space(i).map(function (k) {\n        return k.split(/(?=\\.|#)/g);\n      });\n    });\n  }\n};","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/autoprefixer/lib/utils.js"],"names":["list","require","module","exports","error","text","err","Error","autoprefixer","uniq","array","filtered","_iterator","_isArray","Array","isArray","_i","Symbol","iterator","_ref","length","next","done","value","i","indexOf","push","removeNote","string","split","escapeRegexp","replace","regexp","word","escape","RegExp","editList","callback","origin","comma","changed","join","match","splitSelector","selector","map","space","k"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar list = require('postcss').list;\n\nmodule.exports = {\n  /**\n     * Throw special error, to tell beniary,\n     * that this error is from Autoprefixer.\n     */\n  error: function error(text) {\n    var err = new Error(text);\n    err.autoprefixer = true;\n    throw err;\n  },\n\n  /**\n     * Return array, that doesn’t contain duplicates.\n     */\n  uniq: function uniq(array) {\n    var filtered = [];\n\n    for (var _iterator = array, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var i = _ref;\n\n      if (filtered.indexOf(i) === -1) {\n        filtered.push(i);\n      }\n    }\n\n    return filtered;\n  },\n\n  /**\n     * Return \"-webkit-\" on \"-webkit- old\"\n     */\n  removeNote: function removeNote(string) {\n    if (string.indexOf(' ') === -1) {\n      return string;\n    }\n\n    return string.split(' ')[0];\n  },\n\n  /**\n     * Escape RegExp symbols\n     */\n  escapeRegexp: function escapeRegexp(string) {\n    return string.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n  },\n\n  /**\n     * Return regexp to check, that CSS string contain word\n     */\n  regexp: function regexp(word, escape) {\n    if (escape === void 0) {\n      escape = true;\n    }\n\n    if (escape) {\n      word = this.escapeRegexp(word);\n    }\n\n    return new RegExp(\"(^|[\\\\s,(])(\" + word + \"($|[\\\\s(,]))\", 'gi');\n  },\n\n  /**\n     * Change comma list\n     */\n  editList: function editList(value, callback) {\n    var origin = list.comma(value);\n    var changed = callback(origin, []);\n\n    if (origin === changed) {\n      return value;\n    }\n\n    var join = value.match(/,\\s*/);\n    join = join ? join[0] : ', ';\n    return changed.join(join);\n  },\n\n  /**\n     * Split the selector into parts.\n     * It returns 3 level deep array because selectors can be comma\n     * separated (1), space separated (2), and combined (3)\n     * @param {String} selector selector string\n     * @return {Array<Array<Array>>} 3 level deep array of split selector\n     * @see utils.test.js for examples\n     */\n  splitSelector: function splitSelector(selector) {\n    return list.comma(selector).map(function (i) {\n      return list.space(i).map(function (k) {\n        return k.split(/(?=\\.|#)/g);\n      });\n    });\n  }\n};"]},"metadata":{},"sourceType":"script"}