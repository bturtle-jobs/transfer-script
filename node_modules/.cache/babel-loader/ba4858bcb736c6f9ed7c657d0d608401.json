{"ast":null,"code":"/**\r\n * Pointed rectangle module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PointedShape } from \"../../core/elements/PointedShape\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a circle with a pointer.\r\n *\r\n * @since 4.5.7\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IPointedCircleEvents} for a list of available events\r\n * @see {@link IPointedCircleAdapters} for a list of available Adapters\r\n */\n\nvar PointedCircle =\n/** @class */\nfunction (_super) {\n  __extends(PointedCircle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PointedCircle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PointedCircle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.radius = 18;\n    _this.pointerAngle = 90;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PointedCircle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var pw = this.pointerBaseWidth;\n    var pl = this.pointerLength;\n\n    if (pl <= 0.001) {\n      pl = 0.001;\n    }\n\n    var angle = this.pointerAngle + 180;\n    var radius = this.radius;\n\n    if (pw > 2 * radius) {\n      pw = 2 * radius;\n    }\n\n    var x = this.pointerX;\n    var y = this.pointerY;\n    var path = $path.moveTo({\n      x: x,\n      y: x\n    });\n    var da = $math.DEGREES * Math.atan(pw / 2 / pl);\n\n    if (da <= 0.001) {\n      da = 0.001;\n    }\n\n    var a1 = angle - da;\n    var a2 = angle + da;\n    path += $path.lineTo({\n      x: x + pl * $math.cos(a1),\n      y: y + pl * $math.sin(a1)\n    });\n    path += $path.arcToPoint({\n      x: x + pl * $math.cos(a2),\n      y: y + pl * $math.sin(a2)\n    }, radius, radius, true, true);\n    path += $path.lineTo({\n      x: x,\n      y: x\n    });\n    this.path = path;\n  };\n\n  Object.defineProperty(PointedCircle.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of a circle in pixels.\r\n     *\r\n     * @default 18\r\n     * @param  value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedCircle.prototype, \"pointerAngle\", {\n    /**\r\n     * @return Angle of a pointer, in degrees.\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"pointerAngle\");\n    },\n\n    /**\r\n     * Angle of a pointer, in degrees.\r\n     *\r\n     * @default 90\r\n     * @param  value Angle (degrees)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"pointerAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PointedCircle.prototype.getTooltipY = function () {\n    return $math.sin(this.pointerAngle) * (-this.pointerLength * 0.8 - this.radius) - this.radius;\n  };\n\n  PointedCircle.prototype.getTooltipX = function () {\n    return $math.cos(this.pointerAngle) * (-this.pointerLength * 0.8 - this.radius);\n  };\n\n  return PointedCircle;\n}(PointedShape);\n\nexport { PointedCircle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PointerCircle\"] = PointedCircle;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/bullets/PointedCircle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Pointed rectangle module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PointedShape, IPointedShapeProperties, IPointedShapeAdapters, IPointedShapeEvents } from \"../../core/elements/PointedShape\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PointedCircle]].\r\n */\r\nexport interface IPointedCircleProperties extends IPointedShapeProperties {\r\n\r\n\t/**\r\n\t * Radius of a pin, in pixels.\r\n\t *\r\n\t * @default 18\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Angle of a pointer, in degrees.\r\n\t *\r\n\t * @default 90\r\n\t */\r\n\tpointerAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PointedCircle]].\r\n */\r\nexport interface IPointedCircleEvents extends IPointedShapeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PointedCircle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPointedCircleAdapters extends IPointedShapeAdapters, IPointedCircleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a circle with a pointer.\r\n *\r\n * @since 4.5.7\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IPointedCircleEvents} for a list of available events\r\n * @see {@link IPointedCircleAdapters} for a list of available Adapters\r\n */\r\nexport class PointedCircle extends PointedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPointedCircleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPointedCircleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPointedCircleEvents;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PointedCircle\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.radius = 18;\r\n\t\tthis.pointerAngle = 90;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pw = this.pointerBaseWidth;\r\n\t\tlet pl = this.pointerLength;\r\n\r\n\t\tif (pl <= 0.001) {\r\n\t\t\tpl = 0.001;\r\n\t\t}\r\n\r\n\t\tlet angle = this.pointerAngle + 180;\r\n\t\tlet radius = this.radius;\r\n\r\n\r\n\t\tif (pw > 2 * radius) {\r\n\t\t\tpw = 2 * radius;\r\n\t\t}\r\n\r\n\t\tlet x = this.pointerX;\r\n\t\tlet y = this.pointerY;\r\n\r\n\t\tlet path = $path.moveTo({ x: x, y: x });\r\n\r\n\t\tlet da = $math.DEGREES * Math.atan(pw / 2 / pl);\r\n\r\n\t\tif (da <= 0.001) {\r\n\t\t\tda = 0.001;\r\n\t\t}\r\n\r\n\t\tlet a1 = angle - da;\r\n\t\tlet a2 = angle + da;\r\n\r\n\t\tpath += $path.lineTo({ x: x + pl * $math.cos(a1), y: y + pl * $math.sin(a1) });\r\n\t\tpath += $path.arcToPoint({ x: x + pl * $math.cos(a2), y: y + pl * $math.sin(a2) }, radius, radius, true, true);\r\n\t\tpath += $path.lineTo({ x: x, y: x });\r\n\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of a circle in pixels.\r\n\t *\r\n\t * @default 18\r\n\t * @param  value  Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of a pointer, in degrees.\r\n\t * \r\n\t * @default 90\r\n\t * @param  value Angle (degrees)\r\n\t */\r\n\tpublic set pointerAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle of a pointer, in degrees.\r\n\t */\r\n\tpublic get pointerAngle(): number {\r\n\t\treturn this.getPropertyValue(\"pointerAngle\");\r\n\t}\r\n\r\n\tpublic getTooltipY(){\r\n\t\treturn $math.sin(this.pointerAngle) * (-this.pointerLength * 0.8 - this.radius) - this.radius;\r\n\t}\r\n\r\n\tpublic getTooltipX(){\r\n\t\treturn $math.cos(this.pointerAngle) * (-this.pointerLength * 0.8 - this.radius);\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PointerCircle\"] = PointedCircle;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}