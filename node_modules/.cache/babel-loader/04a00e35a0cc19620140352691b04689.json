{"ast":null,"code":"/**\r\n * Curve chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"../../charts/types/XYChart\";\nimport { CurveLineSeries } from \"./CurveLineSeries\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\nimport * as $type from \"../../core/utils/Type\";\nimport { options } from \"../../core/Options\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[CurveChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar CurveChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(CurveChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurveChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return CurveChartDataItem;\n}(XYChartDataItem);\n\nexport { CurveChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Curve chart.\r\n *\r\n * @see {@link ICurveChartEvents} for a list of available Events\r\n * @see {@link ICurveChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/} for documentation\r\n * @important\r\n */\n\nvar CurveChart =\n/** @class */\nfunction (_super) {\n  __extends(CurveChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines X axis renderer type.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererCurveX;\n    /**\r\n     * Defines Y axis renderer type.\r\n     */\n\n    _this._axisRendererY = AxisRendererCurveY;\n    _this.className = \"CurveChart\";\n\n    var curvedContainer = _this.plotContainer.createChild(Container);\n\n    curvedContainer.shouldClone = false;\n    curvedContainer.layout = \"absolute\";\n    curvedContainer.align = \"center\";\n    curvedContainer.valign = \"middle\";\n    _this.seriesContainer.parent = curvedContainer;\n    _this.curveContainer = curvedContainer;\n    _this.bulletsContainer.parent = curvedContainer;\n    _this.axisBulletsContainer.parent = curvedContainer;\n    _this._cursorContainer = curvedContainer;\n    _this._bulletMask = undefined; //this._bulletMask.shouldClone = false;\n    // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  CurveChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {//this.readerTitle = this.language.translate(\"Curved chart\");\n    }\n  };\n  /**\r\n   * Decorates Axis with required properties for this chart.\r\n   *\r\n   * @param axis  Axis\r\n   */\n\n\n  CurveChart.prototype.processAxis = function (axis) {\n    _super.prototype.processAxis.call(this, axis);\n\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = renderer;\n    renderer.breakContainer.parent = renderer;\n    axis.parent = this.curveContainer;\n    renderer.toBack();\n  };\n  /**\r\n   * Updates all X axes after range change event.\r\n   */\n\n  /*\r\n  protected handleXAxisRangeChange() {\r\n     super.handleXAxisRangeChange();\r\n     $iter.each(this.yAxes.iterator(), (axis) => {\r\n         axis.invalidate();\r\n     });\r\n  }*/\n\n  /**\r\n   * Updates all Y axes after range change event.\r\n   */\n\n  /*\r\n  protected handleYAxisRangeChange() {\r\n     super.handleYAxisRangeChange();\r\n     $iter.each(this.xAxes.iterator(), (axis) => {\r\n         axis.invalidate();\r\n     });\r\n  }*/\n\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  CurveChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up cursor\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"CurveCursor\";\n      } // Set up series\n\n\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"CurveLineSeries\";\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Creates and returns a new Series, suitable for [[CurveChart]].\r\n   *\r\n   * @return New Series\r\n   */\n\n\n  CurveChart.prototype.createSeries = function () {\n    return new CurveLineSeries();\n  };\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis Axis\r\n   */\n\n\n  CurveChart.prototype.updateXAxis = function (renderer) {\n    //do not call super!\n    if (renderer) {\n      renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis Axis\r\n   */\n\n\n  CurveChart.prototype.updateYAxis = function (renderer) {\n    // do not call super!\n    if (renderer) {\n      renderer.processRenderer();\n    }\n  };\n  /**\r\n   * @ignore\r\n   * @return Has license?\r\n   */\n\n\n  CurveChart.prototype.hasLicense = function () {\n    if (!_super.prototype.hasLicense.call(this)) {\n      return false;\n    }\n\n    for (var i = 0; i < options.licenses.length; i++) {\n      if (options.licenses[i].match(/^TL.{5,}/i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return CurveChart;\n}(XYChart);\n\nexport { CurveChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurveChart\"] = CurveChart;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/CurveChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Curve chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"../../charts/types/XYChart\";\r\nimport { CurveLineSeries } from \"./CurveLineSeries\";\r\nimport { CurveColumnSeries } from \"./CurveColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { CurveCursor } from \"./CurveCursor\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurveChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurveChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurveChart]].\r\n */\r\nexport interface ICurveChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurveChart]].\r\n */\r\nexport interface ICurveChartProperties extends IXYChartProperties { }\r\n\r\n/**\r\n * Defines events for [[CurveChart]].\r\n */\r\nexport interface ICurveChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveChartAdapters extends IXYChartAdapters, ICurveChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Curve chart.\r\n *\r\n * @see {@link ICurveChartEvents} for a list of available Events\r\n * @see {@link ICurveChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/} for documentation\r\n * @important\r\n */\r\nexport class CurveChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICurveChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: CurveLineSeries | CurveColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCurveX;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererCurveY;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCurveX = AxisRendererCurveX;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererCurveY = AxisRendererCurveY;\r\n\r\n\t/**\r\n\t * Defines type of the cursor used in this chart.\r\n\t */\r\n\tpublic _cursor: CurveCursor;\r\n\r\n\t/**\r\n\t * A container that holds chart's visual elements.\r\n\t */\r\n\tpublic curveContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveChart\";\r\n\r\n\t\tlet curvedContainer = this.plotContainer.createChild(Container);\r\n\t\tcurvedContainer.shouldClone = false;\r\n\t\tcurvedContainer.layout = \"absolute\";\r\n\t\tcurvedContainer.align = \"center\";\r\n\t\tcurvedContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = curvedContainer;\r\n\t\tthis.curveContainer = curvedContainer;\r\n\t\tthis.bulletsContainer.parent = curvedContainer;\r\n\t\tthis.axisBulletsContainer.parent = curvedContainer;\r\n\t\tthis._cursorContainer = curvedContainer;\r\n\r\n\t\tthis._bulletMask = undefined;\r\n\t\t//this._bulletMask.shouldClone = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\t//this.readerTitle = this.language.translate(\"Curved chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.curveContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\t/*\r\n   protected handleXAxisRangeChange() {\r\n\t   super.handleXAxisRangeChange();\r\n\t   $iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t   axis.invalidate();\r\n\t   });\r\n   }*/\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\t/*\r\n   protected handleYAxisRangeChange() {\r\n\t   super.handleYAxisRangeChange();\r\n\t   $iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t   axis.invalidate();\r\n\t   });\r\n   }*/\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"CurveCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"CurveLineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for [[CurveChart]].\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new CurveLineSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Has license?\r\n\t */\r\n\tpublic hasLicense(): boolean {\r\n\t\tif (!super.hasLicense()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (let i = 0; i < options.licenses.length; i++) {\r\n\t\t\tif (options.licenses[i].match(/^TL.{5,}/i)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveChart\"] = CurveChart;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}