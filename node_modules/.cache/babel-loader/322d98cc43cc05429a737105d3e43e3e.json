{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\owp\\\\src\\\\wrapper\\\\OwpExportDataToExcelButton.js\";\n\nimport { Button } from '@material-ui/core';\nimport * as FileSaver from 'file-saver';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport trim from 'lodash/trim';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as XLSX from 'xlsx';\nimport OwpMessage from './OwpMessage';\nvar FILE_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nvar FILE_EXTENTION = 'xlsx';\n\nvar makePivot = function makePivot(label) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return [].concat(_toConsumableArray(!isEmpty(label) ? [].concat(_toConsumableArray(Object.keys(label)), ['']).map(function (key, i) {\n    return {\n      0: key,\n      1: trim(get(label, key, ''))\n    };\n  }) : []), _toConsumableArray((Object.keys(get(data, 0, {})) || []).map(function (key) {\n    return _objectSpread({\n      0: key\n    }, Object.fromEntries(data.map(function (item, i) {\n      return [i + 1, trim(get(item, key, ''))];\n    })));\n  })));\n};\n\nvar makeWorkBook = function makeWorkBook() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var workSheets = data.map(function () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        label = _ref.label,\n        _ref$data = _ref.data,\n        childData = _ref$data === void 0 ? [] : _ref$data,\n        _ref$cols = _ref.cols,\n        cols = _ref$cols === void 0 ? [] : _ref$cols,\n        sheetName = _ref.sheetName,\n        _ref$usePivot = _ref.usePivot,\n        usePivot = _ref$usePivot === void 0 ? false : _ref$usePivot;\n\n    var transformData = childData.map(function (item) {\n      return isEmpty(cols) ? item : Object.fromEntries(cols.map(function () {\n        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref2$key = _ref2.key,\n            key = _ref2$key === void 0 ? '' : _ref2$key,\n            _ref2$value = _ref2.value,\n            value = _ref2$value === void 0 ? '' : _ref2$value;\n\n        return [[trim(value || key).replace(/ /g, '_')], trim(get(item, key, ''))];\n      }));\n    });\n    return XLSX.utils.json_to_sheet(usePivot ? makePivot(label, transformData) : transformData, {\n      skipHeader: usePivot\n    });\n  });\n  var sheetNames = data.map(function () {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$sheetName = _ref3.sheetName,\n        sheetName = _ref3$sheetName === void 0 ? '' : _ref3$sheetName;\n\n    var i = arguments.length > 1 ? arguments[1] : undefined;\n    return sheetName || \"sheet\".concat(i + 1);\n  });\n  return {\n    Sheets: Object.fromEntries(workSheets.map(function (sheet, i) {\n      return [get(sheetNames, i), sheet];\n    })),\n    SheetNames: sheetNames\n  };\n};\n\nvar exportToXlsx = function exportToXlsx(data, fileName) {\n  return function () {\n    try {\n      if (isEmpty(data)) {\n        OwpMessage({\n          message: 'Excel 로 변환할 데이터가 없습니다.',\n          variant: 'warning'\n        });\n        return;\n      }\n\n      var bufferData = XLSX.write(makeWorkBook(data), {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      var blobData = new Blob([bufferData], {\n        type: FILE_TYPE\n      });\n      FileSaver.saveAs(blobData, \"\".concat(fileName, \".\").concat(FILE_EXTENTION));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nvar OwpExportDataToExcelButton = function OwpExportDataToExcelButton(_ref4) {\n  var data = _ref4.data,\n      fileName = _ref4.fileName,\n      title = _ref4.title,\n      useAddTimeToFile = _ref4.useAddTimeToFile,\n      restProps = _objectWithoutProperties(_ref4, [\"data\", \"fileName\", \"title\", \"useAddTimeToFile\"]);\n\n  return /*#__PURE__*/React.createElement(Button, Object.assign({}, restProps, {\n    onClick: exportToXlsx(data, useAddTimeToFile ? \"\".concat(fileName, \"_\").concat(moment().format('YYYY-MM-DD-HH-mm-ss')) : fileName),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), title);\n};\n\nOwpExportDataToExcelButton.propTypes = {\n  data: PropTypes.array.isRequired,\n  fileName: PropTypes.string,\n  title: PropTypes.string,\n  useAddTimeToFile: PropTypes.bool\n};\nOwpExportDataToExcelButton.defaultProps = {\n  data: [],\n  fileName: 'excel',\n  title: 'Excel 로 내보내기',\n  useAddTimeToFile: true\n};\nexport default OwpExportDataToExcelButton;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/wrapper/OwpExportDataToExcelButton.js"],"names":["Button","FileSaver","get","isEmpty","trim","moment","PropTypes","React","XLSX","OwpMessage","FILE_TYPE","FILE_EXTENTION","makePivot","label","data","Object","keys","map","key","i","fromEntries","item","makeWorkBook","workSheets","childData","cols","sheetName","usePivot","transformData","value","replace","utils","json_to_sheet","skipHeader","sheetNames","Sheets","sheet","SheetNames","exportToXlsx","fileName","message","variant","bufferData","write","bookType","type","blobData","Blob","saveAs","error","console","OwpExportDataToExcelButton","title","useAddTimeToFile","restProps","format","propTypes","array","isRequired","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import { Button } from '@material-ui/core';\r\nimport * as FileSaver from 'file-saver';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport trim from 'lodash/trim';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport OwpMessage from './OwpMessage';\r\n\r\nconst FILE_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\nconst FILE_EXTENTION = 'xlsx';\r\n\r\nconst makePivot = (label, data = []) => [\r\n    ...(!isEmpty(label)\r\n        ? [...Object.keys(label), ''].map((key, i) => ({ 0: key, 1: trim(get(label, key, '')) }))\r\n        : []),\r\n    ...(Object.keys(get(data, 0, {})) || []).map(key => ({\r\n        0: key,\r\n        ...Object.fromEntries(data.map((item, i) => [i + 1, trim(get(item, key, ''))])),\r\n    })),\r\n];\r\n\r\nconst makeWorkBook = (data = []) => {\r\n    const workSheets = data.map(\r\n        ({ label, data: childData = [], cols = [], sheetName, usePivot = false } = {}) => {\r\n            const transformData = childData.map(item =>\r\n                isEmpty(cols)\r\n                    ? item\r\n                    : Object.fromEntries(\r\n                          cols.map(({ key = '', value = '' } = {}) => [\r\n                              [trim(value || key).replace(/ /g, '_')],\r\n                              trim(get(item, key, '')),\r\n                          ])\r\n                      )\r\n            );\r\n\r\n            return XLSX.utils.json_to_sheet(\r\n                usePivot ? makePivot(label, transformData) : transformData,\r\n                {\r\n                    skipHeader: usePivot,\r\n                }\r\n            );\r\n        }\r\n    );\r\n\r\n    const sheetNames = data.map(({ sheetName = '' } = {}, i) => sheetName || `sheet${i + 1}`);\r\n\r\n    return {\r\n        Sheets: Object.fromEntries(workSheets.map((sheet, i) => [get(sheetNames, i), sheet])),\r\n        SheetNames: sheetNames,\r\n    };\r\n};\r\n\r\nconst exportToXlsx = (data, fileName) => () => {\r\n    try {\r\n        if (isEmpty(data)) {\r\n            OwpMessage({\r\n                message: 'Excel 로 변환할 데이터가 없습니다.',\r\n                variant: 'warning',\r\n            });\r\n            return;\r\n        }\r\n        const bufferData = XLSX.write(makeWorkBook(data), {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const blobData = new Blob([bufferData], { type: FILE_TYPE });\r\n\r\n        FileSaver.saveAs(blobData, `${fileName}.${FILE_EXTENTION}`);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nconst OwpExportDataToExcelButton = ({ data, fileName, title, useAddTimeToFile, ...restProps }) => {\r\n    return (\r\n        <Button\r\n            {...restProps}\r\n            onClick={exportToXlsx(\r\n                data,\r\n                useAddTimeToFile\r\n                    ? `${fileName}_${moment().format('YYYY-MM-DD-HH-mm-ss')}`\r\n                    : fileName\r\n            )}\r\n        >\r\n            {title}\r\n        </Button>\r\n    );\r\n};\r\n\r\nOwpExportDataToExcelButton.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    fileName: PropTypes.string,\r\n    title: PropTypes.string,\r\n    useAddTimeToFile: PropTypes.bool,\r\n};\r\n\r\nOwpExportDataToExcelButton.defaultProps = {\r\n    data: [],\r\n    fileName: 'excel',\r\n    title: 'Excel 로 내보내기',\r\n    useAddTimeToFile: true,\r\n};\r\n\r\nexport default OwpExportDataToExcelButton;\r\n"]},"metadata":{},"sourceType":"module"}