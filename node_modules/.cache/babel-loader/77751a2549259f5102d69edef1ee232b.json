{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _toConsumableArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { mutate } from 'owp/api';\nimport { getAccessToken } from 'owp/auth';\nimport { validateRestApiResponse } from 'owp/common';\nimport { changesAsJSON } from 'owp/components/TreeGrid/util';\nimport { OwpMessage, OwpSession } from 'owp/wrapper';\nimport XLSX from 'xlsx';\nimport { font } from './SpoqaHanSansRegular-normal'; //import {setNetworkStatus} from \"store/actions\";\n\nexport var getGridByID = function getGridByID(gridId) {\n  var G = window.GetGrids();\n\n  for (var i = 0; i < G.length; i++) {\n    //console.log('GetGrids ',i,gridId,G);\n    if (G[i].Data.id === gridId) {\n      return G[i];\n    }\n  }\n\n  return null;\n};\nexport var OWPTGDataList = function OWPTGDataList(gridId, restAPI, obj, obj2, obj3, obj4) {\n  var G;\n  var intervalCnt = 0;\n  var interval;\n  interval = setInterval(function () {\n    G = getGridByID(gridId);\n    intervalCnt++;\n\n    if (G) {\n      clearInterval(interval);\n\n      _OWPTGDataList(G, restAPI, obj, obj2, obj3, obj4); //console.log('1. clearInterval getGridByID ',gridId,intervalCnt);\n\n    } else {\n      if (intervalCnt > 10) {\n        clearInterval(interval); //console.log('2. clearInterval getGridByID ',gridId,intervalCnt);\n      } else {//console.log('3. retry getGridByID ',gridId,intervalCnt);\n        }\n    }\n  }, 1500);\n};\n\nvar _OWPTGDataList = function _OWPTGDataList(G, restAPI, obj, obj2, obj3, obj4) {\n  //console.log('OWPTGDataList',G);\n  var jsonData = _.merge({}, obj, obj2, obj3, obj4, {\n    VER: '2'\n  });\n\n  if (G) {\n    G.Data.Data.Url = process.env.REACT_APP_REST_API_URL + '/' + restAPI + '?jsondata=' + encodeURI(JSON.stringify(jsonData)) + 'DUMMY=' + Math.random() * 2.0 * Math.PI + '&TOKEN=' + getAccessToken();\n    G.ReloadBody();\n    G.ClearSelection(); // window.Grids.OnDataSend = function (G, source, data, Func) {\n    //     console.log('_OWPTGDataList OnDataSend : ',data);\n    //     //_dispatch(setNetworkStatus('START'));\n    // }\n  }\n};\n\nexport var OWPTGDelEvent = function OWPTGDelEvent() {\n  console.log('OWPTGDelEvent');\n  window.TGDelEvent();\n};\nvar isOnSelect = false;\nexport var OWPTGSelect = function OWPTGSelect(gridId, callbackfunc) {\n  window.TGSetEvent('OnSelect', gridId, function (G, row) {\n    if (!isOnSelect) {\n      //console.log('OWPTGSelect',gridId);\n      isOnSelect = true;\n      setTimeout(function () {\n        var rowCount = G.GetSelRows().length;\n\n        if (rowCount > 0) {\n          callbackfunc(true, row);\n        } else {\n          callbackfunc(false);\n        }\n\n        isOnSelect = false;\n      }, 300);\n    }\n  });\n};\nexport var OWPTGDelete = function OWPTGDelete(gridId, restAPI, rowID) {\n  var callbackfunc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _.noop;\n  //console.log(gridId,restAPI,rowID);\n  var G = getGridByID(gridId);\n  var rowCount = G.GetSelRows().length;\n\n  if (rowCount > 0) {\n    G.GetSelRows().map(function (row, i) {\n      console.log(row[rowID]);\n      mutate({\n        url: restAPI + '/' + row[rowID]\n      }).then(function (res) {\n        console.log('ResultData...', res);\n        G.RemoveRow(row);\n        callbackfunc(res);\n      }).catch(function (error) {\n        return console.error(error);\n      });\n    });\n  } else {\n    OwpMessage({\n      message: '선택 한 행이 없습니다.',\n      //text or html\n      variant: 'warning' //success error info warning null\n\n    });\n  }\n};\nexport var OWPTGAddRow = function OWPTGAddRow(gridId) {\n  var callbackfunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.noop;\n  var islast = arguments.length > 2 ? arguments[2] : undefined;\n  //console.log('OWPTGAddRow girdId',gridId);\n  //const G = window.GetGrids(girdId)[0];\n  var G = getGridByID(gridId);\n  var par;\n  /*\r\n  islast\r\n  true // 밑으로 데이터 추가\r\n  false // 위로 데이터 추가\r\n  */\n\n  if (islast) {\n    // 그리드에 데이터가 있을 경우 마지막 데이터 하단에 Insert\n    if (G.RowCount > 0) {\n      par = G.GetNext(G.GetLast(null), G.RowCount + 1); // 그리드 데이터가 없을 경우\n    } else {\n      par = G.GetLast(null);\n    }\n  } else {\n    par = G.GetFirst(null);\n  } //G.AddRow(par,G.GetSelRows()[0],1);\n\n\n  var R = G.AddRow(par, par, 1);\n  R.CanEdit = 1;\n  callbackfunc(R);\n};\nexport var OWPTGUpdateRow = function OWPTGUpdateRow(gridId) {\n  var callbackfunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.noop;\n  //console.log('OWPTGAddRow girdId',gridId);\n  var G = getGridByID(gridId);\n  var R = G.GetSelRows()[0];\n  R.CanEdit = 1;\n  callbackfunc(R);\n};\nexport var OWPTGCopyRow = function OWPTGCopyRow(gridId) {\n  var callbackfunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.noop;\n  //console.log('OWPTGCopyRow girdId',gridId);\n  //const G = window.GetGrids(girdId)[0];\n  var G = getGridByID(gridId);\n  var R = G.CopyRow(G.GetSelRows()[0], G.GetSelRows()[0]);\n  R.CanEdit = 1;\n  callbackfunc(R);\n};\nexport var OWPTGSave = function OWPTGSave(gridId, restAPI, format) {\n  var callbackfunc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _.noop;\n  var G = getGridByID(gridId);\n\n  var _rows = Object.values(G['Rows']);\n\n  var _format = format;\n\n  _rows.filter(function (item) {\n    return item.Kind == 'Data';\n  }).map(function (row) {\n    if (row['Added'] == 1 || row['Changed'] == 1) {\n      //console.log(\"_format...\", _format,row);\n      var data = _format;\n      Object.keys(_format).filter(function (key) {\n        return _format[key] === null;\n      }).map(function (_key) {\n        //console.log(_key,\"row[_key]...\", row[_key]);\n        data[_key] = row[_key] ? '' + row[_key] : '';\n      }); //data['TOKEN'] = getAccessToken();\n      //console.log(\"data...\", data);\n\n      mutate({\n        url: restAPI,\n        //+\"?TOKEN=\"+getAccessToken()\n        data: data\n      }).then(function (res) {\n        G.ReloadBody();\n        console.log('ResultData...', res);\n        callbackfunc();\n      }).catch(function (error) {\n        return console.error(error);\n      });\n    }\n  });\n};\nexport var OWPTGSaveMulti = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(gridId) {\n    var options,\n        gridInstance,\n        changesData,\n        userSeqKeyName,\n        useDefaultuserSeq,\n        requiredProps,\n        additionalDatakeysOnUpdate,\n        userSeq,\n        addedData,\n        changedData,\n        integrateApiUrl,\n        result,\n        canNext,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {\n              createApiUrl: '',\n              updateApiUrl: '',\n              integrateApiUrl: '',\n              useDefaultuserSeq: false,\n              userSeqKeyName: '',\n              additionalDatakeysOnUpdate: [],\n              requiredProps: {}\n            };\n            _context2.prev = 1;\n\n            if (gridId) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw new Error('TreeGrid Id 는 필수 입니다.');\n\n          case 4:\n            gridInstance = getGridByID(gridId);\n\n            if (!_.isEmpty(gridInstance)) {\n              _context2.next = 7;\n              break;\n            }\n\n            throw new Error('TreeGrid 인스턴스가 없습니다.');\n\n          case 7:\n            changesData = changesAsJSON(gridInstance.GetXmlData('changes,nogrid,noio'));\n\n            if (_.isEmpty(changesData)) {\n              _context2.next = 25;\n              break;\n            }\n\n            userSeqKeyName = _.get(options, 'userSeqKeyName');\n            useDefaultuserSeq = _.get(options, 'useDefaultuserSeq');\n            requiredProps = _.get(options, 'requiredProps', {});\n            additionalDatakeysOnUpdate = _.get(options, 'additionalDatakeysOnUpdate', []);\n            userSeq = useDefaultuserSeq ? 'Y' : OwpSession(userSeqKeyName || 'UserSEQ');\n            addedData = changesData.filter(function (data) {\n              return _.get(data, 'Added') === '1';\n            }).map(function (addedData) {\n              return _objectSpread(_objectSpread(_objectSpread({\n                STATUS: 'create'\n              }, addedData), !!userSeqKeyName && !_.isEmpty(userSeq) && {\n                [userSeqKeyName]: userSeq\n              }), _.isObject(requiredProps) ? requiredProps : {});\n            });\n            changedData = changesData.filter(function (data) {\n              return _.get(data, 'Changed') === '1';\n            }).map(function (_ref2) {\n              var id = _ref2.id,\n                  restChangedData = _objectWithoutProperties(_ref2, [\"id\"]);\n\n              var _row = _.get(gridInstance, \"Rows.\".concat(id));\n\n              return _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n                STATUS: 'update',\n                [_.get(gridInstance, 'IdNames.0', 'id')]: id\n              }, restChangedData), !_.isEmpty(additionalDatakeysOnUpdate) && !_.isEmpty(_row) && Object.fromEntries(additionalDatakeysOnUpdate.map(function (key) {\n                var _value = _.get(_row, key);\n\n                if (_.isNil(_value)) {\n                  return null;\n                }\n\n                return [key, _value];\n              }).filter(function (node) {\n                return !!node;\n              }))), !!userSeqKeyName && !_.isEmpty(userSeq) && {\n                [userSeqKeyName]: userSeq\n              }), _.isObject(requiredProps) ? requiredProps : {});\n            });\n            integrateApiUrl = _.get(options, 'integrateApiUrl');\n\n            if (_.isEmpty(integrateApiUrl)) {\n              _context2.next = 23;\n              break;\n            }\n\n            _context2.next = 20;\n            return mutate({\n              url: integrateApiUrl,\n              data: [].concat(_toConsumableArray(addedData), _toConsumableArray(changedData))\n            });\n\n          case 20:\n            result = _context2.sent;\n\n            if (validateRestApiResponse(result)) {\n              gridInstance.ReloadBody();\n            }\n\n            return _context2.abrupt(\"return\", result);\n\n          case 23:\n            canNext = false;\n            return _context2.abrupt(\"return\", Promise.all([{\n              url: _.get(options, 'createApiUrl'),\n              data: addedData,\n              nextFlag: canNext\n            }, {\n              url: _.get(options, 'updateApiUrl'),\n              data: changedData,\n              nextFlag: !canNext\n            }].map( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3, index) {\n                var url, data, nextFlag, result;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        url = _ref3.url, data = _ref3.data, nextFlag = _ref3.nextFlag;\n\n                        if (!(!_.isEmpty(data) && !!url && canNext === nextFlag)) {\n                          _context.next = 7;\n                          break;\n                        }\n\n                        _context.next = 4;\n                        return mutate({\n                          url: url,\n                          data: data\n                        });\n\n                      case 4:\n                        _context.t0 = _context.sent;\n                        _context.next = 8;\n                        break;\n\n                      case 7:\n                        _context.t0 = data;\n\n                      case 8:\n                        result = _context.t0;\n\n                        if (index === 0 && !canNext) {\n                          canNext = !canNext;\n                        } else if (index === 1 && canNext && validateRestApiResponse(result)) {\n                          gridInstance.ReloadBody();\n                        }\n\n                        return _context.abrupt(\"return\", result);\n\n                      case 11:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x2, _x3) {\n                return _ref4.apply(this, arguments);\n              };\n            }())));\n\n          case 25:\n            console.error('변경할 데이터 없음.');\n            return _context2.abrupt(\"return\", false);\n\n          case 29:\n            _context2.prev = 29;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error(_context2.t0);\n\n          case 32:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 29]]);\n  }));\n\n  return function OWPTGSaveMulti(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var OWPTGExport = function OWPTGExport(gridId) {\n  var callbackfunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.noop;\n  var G = getGridByID(gridId); //G.SaveExport(\"export\");\n  //const x = document.getElementsByClassName(\"TSToolExport\");\n  //const x = document.getElementsByClassName(\" TSToolbarRow TSSolidRow\");\n  //const x = document.getElementsByClassName(\"TSCellSpaceButton TSType TSButton TSToolHtmlIconSingle TSToolExport1 TSToolAlignSingle TSToolHtmlBase TSToolHtmlIcon1 TSWrap0 TSCellSpaceBase\");\n\n  var x = document.querySelectorAll('td.TSCellSpaceButton.TSType.TSButton.TSToolHtmlIconSingle.TSToolExport.TSToolAlignSingle.TSToolHtmlBase.TSToolHtmlIcon.TSWrap0.TSCellSpaceBase');\n\n  for (var i = 0; i < x.length; i++) {\n    x[i].style.backgroundColor = 'red';\n    console.log(x[i]); //triggerEvent(x[i], 'mouseover');\n    //triggerEvent(x[i], 'mousedown');\n    //triggerEvent(x[i], 'mouseup');\n    //triggerEvent(x[i], 'click');\n    //x[i].addEventListener(\"click\", callbackfunc);\n  } // window.GetGrids.OnMouseDown = function(G,row,col,x,y,Event){\n  //     console.log(\"OnMouseDown: Cell [\"+(row?row.id:null)+\",\"+col+\"] at [\"+x+\",\"+y+\"].\",1);\n  // }\n  // const G = window.GetGrids(girdId)[0];\n  //\n  // //console.log('OWPTGExport',G.Data);\n  //\n  // const element = document.querySelectorAll('.TSToolExport1')[0];// element.click();\n\n};\nexport var OWPTGExportExcel = function OWPTGExportExcel() {\n  var gridId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    useAppendCurrentDateToExportName: false,\n    useAppendCurrentDateTimeToExportName: false,\n    exportName: '',\n    exportType: '',\n    exportFontSize: 12\n  };\n\n  try {\n    if (!gridId) {\n      throw new Error('TreeGrid Id 는 필수 입니다.');\n    }\n\n    var gridInstance = getGridByID(gridId);\n\n    if (_.isEmpty(gridInstance)) {\n      throw new Error('TreeGrid 인스턴스가 없습니다.');\n    }\n\n    var exportType = _.get(options, 'exportType', '');\n\n    var exportName = _.get(options, 'exportName', gridInstance.ExportName || gridId);\n\n    var exportFontSize = _.get(options, 'exportFontSize', 12);\n\n    var useAppendCurrentDateToExportName = _.get(options, 'useAppendCurrentDateToExportName', false);\n\n    var useAppendCurrentDateTimeToExportName = _.get(options, 'useAppendCurrentDateTimeToExportName', false);\n\n    gridInstance.ExportName = \"\".concat(exportName).concat(useAppendCurrentDateTimeToExportName ? \"-\".concat(moment().format('YYYY-MM-DD-HH-mm-ss')) : useAppendCurrentDateToExportName ? \"-\".concat(moment().format('YYYY-MM-DD')) : '');\n    gridInstance.ExportFormat = 'xlsx';\n    gridInstance.ExportType = !!gridInstance.ExportType ? \"\".concat(gridInstance.ExportType, \",Hidden,Hide,TextType\").concat(!!exportType ? \",\".concat(exportType) : '') : \"Hidden,Hide,TextType\".concat(!!exportType ? \",\".concat(exportType) : '');\n    gridInstance.ExportFontSize = exportFontSize;\n    gridInstance.ExportCols = 0;\n    gridInstance.ExportVarHeight = 0;\n    gridInstance.ActionExport();\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport var OWPTGExportExcelToSubject = function OWPTGExportExcelToSubject(gridId, title, callbackfunc) {\n  var G = getGridByID(gridId);\n  var cols = [];\n  var headers = [];\n  var body = [];\n  G.GetCols('Visible', 'CanExport').map(function (col, i) {\n    cols.push(col);\n    headers.push(G.Rows.Header[col]);\n  });\n  body.push(headers);\n\n  var _rows = Object.values(G['Rows']);\n\n  _rows.filter(function (item) {\n    return item.Kind == 'Data';\n  }).map(function (row) {\n    var _rowdata = [];\n    cols.map(function (col, i) {\n      //console.log('cols-->col',row[col]);\n      _rowdata.push(row[col]);\n    });\n    body.push(_rowdata);\n  });\n\n  var book = XLSX.utils.book_new();\n  var sheet = XLSX.utils.aoa_to_sheet(body);\n  var wscols = [{\n    wpx: 300\n  }];\n  sheet['!cols'] = wscols;\n  XLSX.utils.book_append_sheet(book, sheet, 'sheet1');\n  XLSX.writeFile(book, \"\".concat(title, \".xls\"));\n};\n\nfunction getAllSiblings(sibling, leng, arr) {\n  if (leng && sibling) {\n    arr.push(sibling);\n    getAllSiblings(sibling.nextSibling, --leng, arr);\n  }\n\n  return arr;\n}\n\nexport var OWPTGExportExcelToSubjectByPageNo = function OWPTGExportExcelToSubjectByPageNo(gridId, title) {\n  var pageNo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var G = getGridByID(gridId);\n  var cols = [];\n  var headers = [];\n  var body = [];\n  G.GetCols('Visible', 'CanExport').map(function (col, i) {\n    cols.push(col);\n    headers.push(G.Rows.Header[col]);\n  });\n  body.push(headers);\n  var target = G.GetPage(pageNo);\n\n  var _rows = getAllSiblings(target.firstChild, target.childNodes.length, [target.firstChild]);\n\n  _rows.filter(function (item) {\n    return item.Kind == 'Data';\n  }).map(function (row) {\n    var _rowdata = [];\n    cols.map(function (col, i) {\n      //console.log('cols-->col',row[col]);\n      _rowdata.push(row[col]);\n    });\n    body.push(_rowdata);\n  });\n\n  var book = XLSX.utils.book_new();\n  var sheet = XLSX.utils.aoa_to_sheet(body);\n  var wscols = [{\n    wpx: 300\n  }];\n  sheet['!cols'] = wscols;\n  XLSX.utils.book_append_sheet(book, sheet, 'sheet1');\n  XLSX.writeFile(book, \"\".concat(title, \".xls\"));\n};\nexport var OWPTGExportPDF = function OWPTGExportPDF(gridId) {\n  var callbackfunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.noop;\n  var G = getGridByID(gridId); //G.SaveExport(\"export\");\n  //console.log(G.Data.Layout.Url);\n  //console.log(G.Rows);\n  //console.log(G.Def);\n  //console.log(G.GetCols(\"Visible\",\"CanExport\"));\n  //let headerName = [];\n\n  var headers = [];\n  var body = [];\n  G.GetCols('Visible', 'CanExport').map(function (col, i) {\n    //headerName.push(G.Rows.Header[col]);\n    headers.push({\n      dataKey: col,\n      title: G.Rows.Header[col]\n    });\n  });\n\n  var _rows = Object.values(G['Rows']);\n\n  _rows.filter(function (item) {\n    return item.Kind == 'Data';\n  }).map(function (row) {\n    var _rowdata = {};\n    G.GetCols('Visible', 'CanExport').map(function (col, i) {\n      _rowdata[col] = row[col];\n    });\n    body.push(_rowdata);\n  }); //console.log('headers',headers);\n  //console.log('body',body);\n\n\n  var doc = new jsPDF('landscape', 'mm', 'a4');\n  doc.addFileToVFS('SpoqaHanSansRegular-normal.ttf', font);\n  doc.addFont('SpoqaHanSansRegular-normal.ttf', 'SpoqaHanSansRegular', 'normal');\n  doc.setFont('SpoqaHanSansRegular');\n  doc.autoTable(headers, body, {\n    theme: 'grid',\n    styles: {\n      fontSize: 8,\n      font: 'SpoqaHanSansRegular',\n      fontStyle: 'normal'\n    },\n    headerStyles: {\n      fontSize: 8,\n      font: 'SpoqaHanSansRegular',\n      fontStyle: 'normal'\n    }\n  });\n  doc.setProperties({\n    title: gridId\n  });\n  doc.setFontSize(8); //doc.table(1, 1, body, headers, { autoSize: true });\n\n  doc.save(gridId + '.pdf'); //alert('OWPTGExportPDF');\n};\n\nvar onDelete = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return mutate({\n              url: url,\n              timeout: 60000\n            }).then(function (res) {\n              console.log('ResultData...', res);\n            }).catch(function (error) {\n              return console.error(error);\n            });\n\n          case 2:\n            result = _context3.sent;\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function onDelete(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/TGEvent/TGEvent.js"],"names":["jsPDF","_","moment","mutate","getAccessToken","validateRestApiResponse","changesAsJSON","OwpMessage","OwpSession","XLSX","font","getGridByID","gridId","G","window","GetGrids","i","length","Data","id","OWPTGDataList","restAPI","obj","obj2","obj3","obj4","intervalCnt","interval","setInterval","clearInterval","_OWPTGDataList","jsonData","merge","VER","Url","process","env","REACT_APP_REST_API_URL","encodeURI","JSON","stringify","Math","random","PI","ReloadBody","ClearSelection","OWPTGDelEvent","console","log","TGDelEvent","isOnSelect","OWPTGSelect","callbackfunc","TGSetEvent","row","setTimeout","rowCount","GetSelRows","OWPTGDelete","rowID","noop","map","url","then","res","RemoveRow","catch","error","message","variant","OWPTGAddRow","islast","par","RowCount","GetNext","GetLast","GetFirst","R","AddRow","CanEdit","OWPTGUpdateRow","OWPTGCopyRow","CopyRow","OWPTGSave","format","_rows","Object","values","_format","filter","item","Kind","data","keys","key","_key","OWPTGSaveMulti","options","createApiUrl","updateApiUrl","integrateApiUrl","useDefaultuserSeq","userSeqKeyName","additionalDatakeysOnUpdate","requiredProps","Error","gridInstance","isEmpty","changesData","GetXmlData","get","userSeq","addedData","STATUS","isObject","changedData","restChangedData","_row","fromEntries","_value","isNil","node","result","canNext","Promise","all","nextFlag","index","OWPTGExport","x","document","querySelectorAll","style","backgroundColor","OWPTGExportExcel","useAppendCurrentDateToExportName","useAppendCurrentDateTimeToExportName","exportName","exportType","exportFontSize","ExportName","ExportFormat","ExportType","ExportFontSize","ExportCols","ExportVarHeight","ActionExport","OWPTGExportExcelToSubject","title","cols","headers","body","GetCols","col","push","Rows","Header","_rowdata","book","utils","book_new","sheet","aoa_to_sheet","wscols","wpx","book_append_sheet","writeFile","getAllSiblings","sibling","leng","arr","nextSibling","OWPTGExportExcelToSubjectByPageNo","pageNo","target","GetPage","firstChild","childNodes","OWPTGExportPDF","dataKey","doc","addFileToVFS","addFont","setFont","autoTable","theme","styles","fontSize","fontStyle","headerStyles","setProperties","setFontSize","save","onDelete","timeout"],"mappings":"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","sourcesContent":["import jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { mutate } from 'owp/api';\r\nimport { getAccessToken } from 'owp/auth';\r\nimport { validateRestApiResponse } from 'owp/common';\r\nimport { changesAsJSON } from 'owp/components/TreeGrid/util';\r\nimport { OwpMessage, OwpSession } from 'owp/wrapper';\r\nimport XLSX from 'xlsx';\r\nimport { font } from './SpoqaHanSansRegular-normal';\r\n\r\n//import {setNetworkStatus} from \"store/actions\";\r\n\r\nexport const getGridByID = function (gridId) {\r\n    const G = window.GetGrids();\r\n\r\n    for (let i = 0; i < G.length; i++) {\r\n        //console.log('GetGrids ',i,gridId,G);\r\n        if (G[i].Data.id === gridId) {\r\n            return G[i];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const OWPTGDataList = function (gridId, restAPI, obj, obj2, obj3, obj4) {\r\n    let G;\r\n    let intervalCnt = 0;\r\n    let interval;\r\n\r\n    interval = setInterval(() => {\r\n        G = getGridByID(gridId);\r\n        intervalCnt++;\r\n        if (G) {\r\n            clearInterval(interval);\r\n            _OWPTGDataList(G, restAPI, obj, obj2, obj3, obj4);\r\n            //console.log('1. clearInterval getGridByID ',gridId,intervalCnt);\r\n        } else {\r\n            if (intervalCnt > 10) {\r\n                clearInterval(interval);\r\n                //console.log('2. clearInterval getGridByID ',gridId,intervalCnt);\r\n            } else {\r\n                //console.log('3. retry getGridByID ',gridId,intervalCnt);\r\n            }\r\n        }\r\n    }, 1500);\r\n};\r\n\r\nconst _OWPTGDataList = function (G, restAPI, obj, obj2, obj3, obj4) {\r\n    //console.log('OWPTGDataList',G);\r\n    const jsonData = _.merge({}, obj, obj2, obj3, obj4, { VER: '2' });\r\n    if (G) {\r\n        G.Data.Data.Url =\r\n            process.env.REACT_APP_REST_API_URL +\r\n            '/' +\r\n            restAPI +\r\n            '?jsondata=' +\r\n            encodeURI(JSON.stringify(jsonData)) +\r\n            'DUMMY=' +\r\n            Math.random() * 2.0 * Math.PI +\r\n            '&TOKEN=' +\r\n            getAccessToken();\r\n        G.ReloadBody();\r\n        G.ClearSelection();\r\n        // window.Grids.OnDataSend = function (G, source, data, Func) {\r\n        //     console.log('_OWPTGDataList OnDataSend : ',data);\r\n        //     //_dispatch(setNetworkStatus('START'));\r\n        // }\r\n    }\r\n};\r\n\r\nexport const OWPTGDelEvent = function () {\r\n    console.log('OWPTGDelEvent');\r\n    window.TGDelEvent();\r\n};\r\n\r\nlet isOnSelect = false;\r\nexport const OWPTGSelect = function (gridId, callbackfunc) {\r\n    window.TGSetEvent('OnSelect', gridId, function (G, row) {\r\n        if (!isOnSelect) {\r\n            //console.log('OWPTGSelect',gridId);\r\n            isOnSelect = true;\r\n            setTimeout(function () {\r\n                const rowCount = G.GetSelRows().length;\r\n\r\n                if (rowCount > 0) {\r\n                    callbackfunc(true, row);\r\n                } else {\r\n                    callbackfunc(false);\r\n                }\r\n\r\n                isOnSelect = false;\r\n            }, 300);\r\n        }\r\n    });\r\n};\r\n\r\nexport const OWPTGDelete = function (gridId, restAPI, rowID, callbackfunc = _.noop) {\r\n    //console.log(gridId,restAPI,rowID);\r\n    const G = getGridByID(gridId);\r\n\r\n    const rowCount = G.GetSelRows().length;\r\n\r\n    if (rowCount > 0) {\r\n        G.GetSelRows().map((row, i) => {\r\n            console.log(row[rowID]);\r\n            mutate({\r\n                url: restAPI + '/' + row[rowID],\r\n            })\r\n                .then((res) => {\r\n                    console.log('ResultData...', res);\r\n                    G.RemoveRow(row);\r\n                    callbackfunc(res);\r\n                })\r\n                .catch((error) => console.error(error));\r\n        });\r\n    } else {\r\n        OwpMessage({\r\n            message: '선택 한 행이 없습니다.', //text or html\r\n            variant: 'warning', //success error info warning null\r\n        });\r\n    }\r\n};\r\n\r\nexport const OWPTGAddRow = function (gridId, callbackfunc = _.noop, islast) {\r\n    //console.log('OWPTGAddRow girdId',gridId);\r\n\r\n    //const G = window.GetGrids(girdId)[0];\r\n    const G = getGridByID(gridId);\r\n\r\n    let par;\r\n    /*\r\n    islast\r\n    true // 밑으로 데이터 추가\r\n    false // 위로 데이터 추가\r\n    */\r\n    if (islast) {\r\n        // 그리드에 데이터가 있을 경우 마지막 데이터 하단에 Insert\r\n        if (G.RowCount > 0) {\r\n            par = G.GetNext(G.GetLast(null), G.RowCount + 1);\r\n\r\n            // 그리드 데이터가 없을 경우\r\n        } else {\r\n            par = G.GetLast(null);\r\n        }\r\n    } else {\r\n        par = G.GetFirst(null);\r\n    }\r\n    //G.AddRow(par,G.GetSelRows()[0],1);\r\n    const R = G.AddRow(par, par, 1);\r\n\r\n    R.CanEdit = 1;\r\n\r\n    callbackfunc(R);\r\n};\r\n\r\nexport const OWPTGUpdateRow = function (gridId, callbackfunc = _.noop) {\r\n    //console.log('OWPTGAddRow girdId',gridId);\r\n\r\n    const G = getGridByID(gridId);\r\n\r\n    const R = G.GetSelRows()[0];\r\n\r\n    R.CanEdit = 1;\r\n\r\n    callbackfunc(R);\r\n};\r\n\r\nexport const OWPTGCopyRow = function (gridId, callbackfunc = _.noop) {\r\n    //console.log('OWPTGCopyRow girdId',gridId);\r\n\r\n    //const G = window.GetGrids(girdId)[0];\r\n    const G = getGridByID(gridId);\r\n\r\n    const R = G.CopyRow(G.GetSelRows()[0], G.GetSelRows()[0]);\r\n\r\n    R.CanEdit = 1;\r\n\r\n    callbackfunc(R);\r\n};\r\n\r\nexport const OWPTGSave = function (gridId, restAPI, format, callbackfunc = _.noop) {\r\n    const G = getGridByID(gridId);\r\n\r\n    const _rows = Object.values(G['Rows']);\r\n\r\n    const _format = format;\r\n\r\n    _rows\r\n        .filter((item) => item.Kind == 'Data')\r\n        .map((row) => {\r\n            if (row['Added'] == 1 || row['Changed'] == 1) {\r\n                //console.log(\"_format...\", _format,row);\r\n\r\n                let data = _format;\r\n\r\n                Object.keys(_format)\r\n                    .filter((key) => _format[key] === null)\r\n                    .map((_key) => {\r\n                        //console.log(_key,\"row[_key]...\", row[_key]);\r\n                        data[_key] = row[_key] ? '' + row[_key] : '';\r\n                    });\r\n\r\n                //data['TOKEN'] = getAccessToken();\r\n                //console.log(\"data...\", data);\r\n\r\n                mutate({\r\n                    url: restAPI, //+\"?TOKEN=\"+getAccessToken()\r\n                    data,\r\n                })\r\n                    .then((res) => {\r\n                        G.ReloadBody();\r\n                        console.log('ResultData...', res);\r\n                        callbackfunc();\r\n                    })\r\n                    .catch((error) => console.error(error));\r\n            }\r\n        });\r\n};\r\n\r\nexport const OWPTGSaveMulti = async function (\r\n    gridId,\r\n    options = {\r\n        createApiUrl: '',\r\n        updateApiUrl: '',\r\n        integrateApiUrl: '',\r\n        useDefaultuserSeq: false,\r\n        userSeqKeyName: '',\r\n        additionalDatakeysOnUpdate: [],\r\n        requiredProps: {},\r\n    }\r\n) {\r\n    try {\r\n        if (!gridId) {\r\n            throw new Error('TreeGrid Id 는 필수 입니다.');\r\n        }\r\n\r\n        const gridInstance = getGridByID(gridId);\r\n\r\n        if (_.isEmpty(gridInstance)) {\r\n            throw new Error('TreeGrid 인스턴스가 없습니다.');\r\n        }\r\n\r\n        const changesData = changesAsJSON(gridInstance.GetXmlData('changes,nogrid,noio'));\r\n\r\n        if (!_.isEmpty(changesData)) {\r\n            const userSeqKeyName = _.get(options, 'userSeqKeyName');\r\n            const useDefaultuserSeq = _.get(options, 'useDefaultuserSeq');\r\n            const requiredProps = _.get(options, 'requiredProps', {});\r\n            const additionalDatakeysOnUpdate = _.get(options, 'additionalDatakeysOnUpdate', []);\r\n\r\n            const userSeq = useDefaultuserSeq ? 'Y' : OwpSession(userSeqKeyName || 'UserSEQ');\r\n\r\n            const addedData = changesData\r\n                .filter((data) => _.get(data, 'Added') === '1')\r\n                .map((addedData) => {\r\n                    return {\r\n                        STATUS: 'create',\r\n                        ...addedData,\r\n                        ...(!!userSeqKeyName &&\r\n                            !_.isEmpty(userSeq) && { [userSeqKeyName]: userSeq }),\r\n                        ...(_.isObject(requiredProps) ? requiredProps : {}),\r\n                    };\r\n                });\r\n\r\n            const changedData = changesData\r\n                .filter((data) => _.get(data, 'Changed') === '1')\r\n                .map(({ id, ...restChangedData }) => {\r\n                    const _row = _.get(gridInstance, `Rows.${id}`);\r\n\r\n                    return {\r\n                        STATUS: 'update',\r\n                        [_.get(gridInstance, 'IdNames.0', 'id')]: id,\r\n                        ...restChangedData,\r\n                        ...(!_.isEmpty(additionalDatakeysOnUpdate) &&\r\n                            !_.isEmpty(_row) &&\r\n                            Object.fromEntries(\r\n                                additionalDatakeysOnUpdate\r\n                                    .map((key) => {\r\n                                        const _value = _.get(_row, key);\r\n                                        if (_.isNil(_value)) {\r\n                                            return null;\r\n                                        }\r\n                                        return [key, _value];\r\n                                    })\r\n                                    .filter((node) => !!node)\r\n                            )),\r\n                        ...(!!userSeqKeyName &&\r\n                            !_.isEmpty(userSeq) && { [userSeqKeyName]: userSeq }),\r\n                        ...(_.isObject(requiredProps) ? requiredProps : {}),\r\n                    };\r\n                });\r\n\r\n            const integrateApiUrl = _.get(options, 'integrateApiUrl');\r\n\r\n            if (!_.isEmpty(integrateApiUrl)) {\r\n                const result = await mutate({\r\n                    url: integrateApiUrl,\r\n                    data: [...addedData, ...changedData],\r\n                });\r\n\r\n                if (validateRestApiResponse(result)) {\r\n                    gridInstance.ReloadBody();\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            let canNext = false;\r\n            return Promise.all(\r\n                [\r\n                    { url: _.get(options, 'createApiUrl'), data: addedData, nextFlag: canNext },\r\n                    { url: _.get(options, 'updateApiUrl'), data: changedData, nextFlag: !canNext },\r\n                ].map(async ({ url, data, nextFlag }, index) => {\r\n                    const result =\r\n                        !_.isEmpty(data) && !!url && canNext === nextFlag\r\n                            ? await mutate({\r\n                                  url,\r\n                                  data,\r\n                              })\r\n                            : data;\r\n\r\n                    if (index === 0 && !canNext) {\r\n                        canNext = !canNext;\r\n                    } else if (index === 1 && canNext && validateRestApiResponse(result)) {\r\n                        gridInstance.ReloadBody();\r\n                    }\r\n\r\n                    return result;\r\n                })\r\n            );\r\n        }\r\n\r\n        console.error('변경할 데이터 없음.');\r\n        return false;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport const OWPTGExport = function (gridId, callbackfunc = _.noop) {\r\n    const G = getGridByID(gridId);\r\n    //G.SaveExport(\"export\");\r\n\r\n    //const x = document.getElementsByClassName(\"TSToolExport\");\r\n    //const x = document.getElementsByClassName(\" TSToolbarRow TSSolidRow\");\r\n    //const x = document.getElementsByClassName(\"TSCellSpaceButton TSType TSButton TSToolHtmlIconSingle TSToolExport1 TSToolAlignSingle TSToolHtmlBase TSToolHtmlIcon1 TSWrap0 TSCellSpaceBase\");\r\n    const x = document.querySelectorAll(\r\n        'td.TSCellSpaceButton.TSType.TSButton.TSToolHtmlIconSingle.TSToolExport.TSToolAlignSingle.TSToolHtmlBase.TSToolHtmlIcon.TSWrap0.TSCellSpaceBase'\r\n    );\r\n    for (let i = 0; i < x.length; i++) {\r\n        x[i].style.backgroundColor = 'red';\r\n\r\n        console.log(x[i]);\r\n\r\n        //triggerEvent(x[i], 'mouseover');\r\n        //triggerEvent(x[i], 'mousedown');\r\n        //triggerEvent(x[i], 'mouseup');\r\n        //triggerEvent(x[i], 'click');\r\n\r\n        //x[i].addEventListener(\"click\", callbackfunc);\r\n    }\r\n\r\n    // window.GetGrids.OnMouseDown = function(G,row,col,x,y,Event){\r\n    //     console.log(\"OnMouseDown: Cell [\"+(row?row.id:null)+\",\"+col+\"] at [\"+x+\",\"+y+\"].\",1);\r\n    // }\r\n\r\n    // const G = window.GetGrids(girdId)[0];\r\n    //\r\n    // //console.log('OWPTGExport',G.Data);\r\n    //\r\n    // const element = document.querySelectorAll('.TSToolExport1')[0];// element.click();\r\n};\r\n\r\nexport const OWPTGExportExcel = (\r\n    gridId = '',\r\n    options = {\r\n        useAppendCurrentDateToExportName: false,\r\n        useAppendCurrentDateTimeToExportName: false,\r\n        exportName: '',\r\n        exportType: '',\r\n        exportFontSize: 12,\r\n    }\r\n) => {\r\n    try {\r\n        if (!gridId) {\r\n            throw new Error('TreeGrid Id 는 필수 입니다.');\r\n        }\r\n\r\n        const gridInstance = getGridByID(gridId);\r\n\r\n        if (_.isEmpty(gridInstance)) {\r\n            throw new Error('TreeGrid 인스턴스가 없습니다.');\r\n        }\r\n\r\n        const exportType = _.get(options, 'exportType', '');\r\n        const exportName = _.get(options, 'exportName', gridInstance.ExportName || gridId);\r\n        const exportFontSize = _.get(options, 'exportFontSize', 12);\r\n\r\n        const useAppendCurrentDateToExportName = _.get(\r\n            options,\r\n            'useAppendCurrentDateToExportName',\r\n            false\r\n        );\r\n        const useAppendCurrentDateTimeToExportName = _.get(\r\n            options,\r\n            'useAppendCurrentDateTimeToExportName',\r\n            false\r\n        );\r\n\r\n        gridInstance.ExportName = `${exportName}${\r\n            useAppendCurrentDateTimeToExportName\r\n                ? `-${moment().format('YYYY-MM-DD-HH-mm-ss')}`\r\n                : useAppendCurrentDateToExportName\r\n                ? `-${moment().format('YYYY-MM-DD')}`\r\n                : ''\r\n        }`;\r\n        gridInstance.ExportFormat = 'xlsx';\r\n        gridInstance.ExportType = !!gridInstance.ExportType\r\n            ? `${gridInstance.ExportType},Hidden,Hide,TextType${\r\n                  !!exportType ? `,${exportType}` : ''\r\n              }`\r\n            : `Hidden,Hide,TextType${!!exportType ? `,${exportType}` : ''}`;\r\n        gridInstance.ExportFontSize = exportFontSize;\r\n        gridInstance.ExportCols = 0;\r\n        gridInstance.ExportVarHeight = 0;\r\n\r\n        gridInstance.ActionExport();\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport const OWPTGExportExcelToSubject = function (gridId, title, callbackfunc) {\r\n    const G = getGridByID(gridId);\r\n\r\n    let cols = [];\r\n    let headers = [];\r\n    let body = [];\r\n\r\n    G.GetCols('Visible', 'CanExport').map((col, i) => {\r\n        cols.push(col);\r\n        headers.push(G.Rows.Header[col]);\r\n    });\r\n    body.push(headers);\r\n\r\n    const _rows = Object.values(G['Rows']);\r\n    _rows\r\n        .filter((item) => item.Kind == 'Data')\r\n        .map((row) => {\r\n            let _rowdata = [];\r\n            cols.map((col, i) => {\r\n                //console.log('cols-->col',row[col]);\r\n                _rowdata.push(row[col]);\r\n            });\r\n            body.push(_rowdata);\r\n        });\r\n\r\n    const book = XLSX.utils.book_new();\r\n    const sheet = XLSX.utils.aoa_to_sheet(body);\r\n\r\n    const wscols = [{ wpx: 300 }];\r\n    sheet['!cols'] = wscols;\r\n\r\n    XLSX.utils.book_append_sheet(book, sheet, 'sheet1');\r\n    XLSX.writeFile(book, `${title}.xls`);\r\n};\r\n\r\nfunction getAllSiblings(sibling, leng, arr) {\r\n    if (leng && sibling) {\r\n        arr.push(sibling);\r\n        getAllSiblings(sibling.nextSibling, --leng, arr);\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nexport const OWPTGExportExcelToSubjectByPageNo = function (gridId, title, pageNo = 0) {\r\n    const G = getGridByID(gridId);\r\n\r\n    let cols = [];\r\n    let headers = [];\r\n    let body = [];\r\n\r\n    G.GetCols('Visible', 'CanExport').map((col, i) => {\r\n        cols.push(col);\r\n        headers.push(G.Rows.Header[col]);\r\n    });\r\n    body.push(headers);\r\n\r\n    const target = G.GetPage(pageNo);\r\n\r\n    const _rows = getAllSiblings(target.firstChild, target.childNodes.length, [target.firstChild]);\r\n    _rows\r\n        .filter((item) => item.Kind == 'Data')\r\n        .map((row) => {\r\n            let _rowdata = [];\r\n            cols.map((col, i) => {\r\n                //console.log('cols-->col',row[col]);\r\n                _rowdata.push(row[col]);\r\n            });\r\n            body.push(_rowdata);\r\n        });\r\n\r\n    const book = XLSX.utils.book_new();\r\n    const sheet = XLSX.utils.aoa_to_sheet(body);\r\n\r\n    const wscols = [{ wpx: 300 }];\r\n    sheet['!cols'] = wscols;\r\n\r\n    XLSX.utils.book_append_sheet(book, sheet, 'sheet1');\r\n    XLSX.writeFile(book, `${title}.xls`);\r\n};\r\n\r\nexport const OWPTGExportPDF = function (gridId, callbackfunc = _.noop) {\r\n    const G = getGridByID(gridId);\r\n\r\n    //G.SaveExport(\"export\");\r\n    //console.log(G.Data.Layout.Url);\r\n    //console.log(G.Rows);\r\n    //console.log(G.Def);\r\n    //console.log(G.GetCols(\"Visible\",\"CanExport\"));\r\n\r\n    //let headerName = [];\r\n    let headers = [];\r\n    let body = [];\r\n\r\n    G.GetCols('Visible', 'CanExport').map((col, i) => {\r\n        //headerName.push(G.Rows.Header[col]);\r\n        headers.push({\r\n            dataKey: col,\r\n            title: G.Rows.Header[col],\r\n        });\r\n    });\r\n\r\n    const _rows = Object.values(G['Rows']);\r\n    _rows\r\n        .filter((item) => item.Kind == 'Data')\r\n        .map((row) => {\r\n            let _rowdata = {};\r\n            G.GetCols('Visible', 'CanExport').map((col, i) => {\r\n                _rowdata[col] = row[col];\r\n            });\r\n            body.push(_rowdata);\r\n        });\r\n\r\n    //console.log('headers',headers);\r\n    //console.log('body',body);\r\n\r\n    const doc = new jsPDF('landscape', 'mm', 'a4');\r\n\r\n    doc.addFileToVFS('SpoqaHanSansRegular-normal.ttf', font);\r\n    doc.addFont('SpoqaHanSansRegular-normal.ttf', 'SpoqaHanSansRegular', 'normal');\r\n    doc.setFont('SpoqaHanSansRegular');\r\n\r\n    doc.autoTable(headers, body, {\r\n        theme: 'grid',\r\n\r\n        styles: {\r\n            fontSize: 8,\r\n\r\n            font: 'SpoqaHanSansRegular',\r\n\r\n            fontStyle: 'normal',\r\n        },\r\n\r\n        headerStyles: {\r\n            fontSize: 8,\r\n\r\n            font: 'SpoqaHanSansRegular',\r\n\r\n            fontStyle: 'normal',\r\n        },\r\n    });\r\n\r\n    doc.setProperties({\r\n        title: gridId,\r\n    });\r\n\r\n    doc.setFontSize(8);\r\n    //doc.table(1, 1, body, headers, { autoSize: true });\r\n    doc.save(gridId + '.pdf');\r\n\r\n    //alert('OWPTGExportPDF');\r\n};\r\n\r\nconst onDelete = async (url) => {\r\n    const result = await mutate({\r\n        url: url,\r\n        timeout: 60000,\r\n    })\r\n        .then((res) => {\r\n            console.log('ResultData...', res);\r\n        })\r\n        .catch((error) => console.error(error));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}