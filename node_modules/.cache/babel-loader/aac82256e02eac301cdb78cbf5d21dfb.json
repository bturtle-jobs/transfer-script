{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { clone } from 'ramda';\n\nfunction traverseNav(navs, loc, parent, result) {\n  if (navs && navs.length) {\n    var _iterator = _createForOfIteratorHelper(navs),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var nav = _step.value;\n        nav.parent = parent;\n\n        if (nav.url === loc.pathname) {\n          result = nav;\n          return result;\n        } else {\n          result = traverseNav(nav.children, loc, nav, result);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return result;\n}\n\nfunction flattenNav(nav) {\n  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!nav) {\n    return;\n  }\n\n  if (nav.parent) {\n    flattenNav(nav.parent, arr);\n  }\n\n  arr.push(nav);\n  return arr;\n}\n\nexport function getFlatNavigation(navigationItems, flatNavigation) {\n  flatNavigation = flatNavigation ? flatNavigation : [];\n\n  var _iterator2 = _createForOfIteratorHelper(navigationItems),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var navItem = _step2.value;\n\n      if (navItem.type === 'subheader') {\n        continue;\n      }\n\n      if (navItem.type === 'item') {\n        flatNavigation.push(_objectSpread({}, navItem));\n        continue;\n      }\n\n      if (navItem.type === 'collapse' || navItem.type === 'group') {\n        if (navItem.children) {\n          getFlatNavigation(navItem.children, flatNavigation);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return flatNavigation;\n}\nexport function getPath(navs, loc) {\n  return flattenNav(traverseNav(clone(navs), loc)) || [];\n}","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/common/navigation.js"],"names":["clone","traverseNav","navs","loc","parent","result","length","nav","url","pathname","children","flattenNav","arr","push","getFlatNavigation","navigationItems","flatNavigation","navItem","type","getPath"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,OAAtB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwCC,MAAxC,EAAgD;AAC5C,MAAIH,IAAI,IAAIA,IAAI,CAACI,MAAjB,EAAyB;AAAA,+CACHJ,IADG;AAAA;;AAAA;AACrB,0DAAwB;AAAA,YAAbK,GAAa;AACpBA,QAAAA,GAAG,CAACH,MAAJ,GAAaA,MAAb;;AAEA,YAAIG,GAAG,CAACC,GAAJ,KAAYL,GAAG,CAACM,QAApB,EAA8B;AAC1BJ,UAAAA,MAAM,GAAGE,GAAT;AAEA,iBAAOF,MAAP;AACH,SAJD,MAIO;AACHA,UAAAA,MAAM,GAAGJ,WAAW,CAACM,GAAG,CAACG,QAAL,EAAeP,GAAf,EAAoBI,GAApB,EAAyBF,MAAzB,CAApB;AACH;AACJ;AAXoB;AAAA;AAAA;AAAA;AAAA;AAYxB;;AAED,SAAOA,MAAP;AACH;;AAED,SAASM,UAAT,CAAoBJ,GAApB,EAAmC;AAAA,MAAVK,GAAU,uEAAJ,EAAI;;AAC/B,MAAI,CAACL,GAAL,EAAU;AACN;AACH;;AAED,MAAIA,GAAG,CAACH,MAAR,EAAgB;AACZO,IAAAA,UAAU,CAACJ,GAAG,CAACH,MAAL,EAAaQ,GAAb,CAAV;AACH;;AAEDA,EAAAA,GAAG,CAACC,IAAJ,CAASN,GAAT;AAEA,SAAOK,GAAP;AACH;;AAED,OAAO,SAASE,iBAAT,CAA2BC,eAA3B,EAA4CC,cAA5C,EAA4D;AAC/DA,EAAAA,cAAc,GAAGA,cAAc,GAAGA,cAAH,GAAoB,EAAnD;;AAD+D,8CAEzCD,eAFyC;AAAA;;AAAA;AAE/D,2DAAuC;AAAA,UAA5BE,OAA4B;;AACnC,UAAIA,OAAO,CAACC,IAAR,KAAiB,WAArB,EAAkC;AAC9B;AACH;;AAED,UAAID,OAAO,CAACC,IAAR,KAAiB,MAArB,EAA6B;AACzBF,QAAAA,cAAc,CAACH,IAAf,mBAAyBI,OAAzB;AAEA;AACH;;AAED,UAAIA,OAAO,CAACC,IAAR,KAAiB,UAAjB,IAA+BD,OAAO,CAACC,IAAR,KAAiB,OAApD,EAA6D;AACzD,YAAID,OAAO,CAACP,QAAZ,EAAsB;AAClBI,UAAAA,iBAAiB,CAACG,OAAO,CAACP,QAAT,EAAmBM,cAAnB,CAAjB;AACH;AACJ;AACJ;AAlB8D;AAAA;AAAA;AAAA;AAAA;;AAoB/D,SAAOA,cAAP;AACH;AAED,OAAO,SAASG,OAAT,CAAiBjB,IAAjB,EAAuBC,GAAvB,EAA4B;AAC/B,SAAOQ,UAAU,CAACV,WAAW,CAACD,KAAK,CAACE,IAAD,CAAN,EAAcC,GAAd,CAAZ,CAAV,IAA6C,EAApD;AACH","sourcesContent":["import { clone } from 'ramda';\r\n\r\nfunction traverseNav(navs, loc, parent, result) {\r\n    if (navs && navs.length) {\r\n        for (const nav of navs) {\r\n            nav.parent = parent;\r\n\r\n            if (nav.url === loc.pathname) {\r\n                result = nav;\r\n\r\n                return result;\r\n            } else {\r\n                result = traverseNav(nav.children, loc, nav, result);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction flattenNav(nav, arr = []) {\r\n    if (!nav) {\r\n        return;\r\n    }\r\n\r\n    if (nav.parent) {\r\n        flattenNav(nav.parent, arr);\r\n    }\r\n\r\n    arr.push(nav);\r\n\r\n    return arr;\r\n}\r\n\r\nexport function getFlatNavigation(navigationItems, flatNavigation) {\r\n    flatNavigation = flatNavigation ? flatNavigation : [];\r\n    for (const navItem of navigationItems) {\r\n        if (navItem.type === 'subheader') {\r\n            continue;\r\n        }\r\n\r\n        if (navItem.type === 'item') {\r\n            flatNavigation.push({ ...navItem });\r\n\r\n            continue;\r\n        }\r\n\r\n        if (navItem.type === 'collapse' || navItem.type === 'group') {\r\n            if (navItem.children) {\r\n                getFlatNavigation(navItem.children, flatNavigation);\r\n            }\r\n        }\r\n    }\r\n\r\n    return flatNavigation;\r\n}\r\n\r\nexport function getPath(navs, loc) {\r\n    return flattenNav(traverseNav(clone(navs), loc)) || [];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}