{"ast":null,"code":"import _ from 'lodash';\nimport { ERROR_REST_API_URL } from 'owp/constants/error';\nimport qs from 'qs';\nimport { path } from 'ramda';\nimport { showMessage } from '../common/util';\nimport { createAxios } from './axios';\nimport { getAccessToken } from 'owp/auth';\nvar statusMap = {\n  success: 'STATUS_1',\n  error: 'STATUS_0'\n};\n\nvar _axiosQuery = createAxios({\n  method: 'get',\n  paramsSerializer: function paramsSerializer(params) {\n    return qs.stringify(params, {\n      indices: false\n    });\n  }\n});\n\n_axiosQuery.interceptors.response.use(function (res) {\n  if (_.get(res, 'config.custom.showErrorMessage') && _.get(res, 'data.resultCode') === statusMap.error) {\n    showMessage({\n      message: _.get(res, 'data.resultMessage', ''),\n      variant: 'error'\n    });\n  }\n\n  return _.isEmpty(_.get(res, 'data.resultData2')) ? _.get(res, 'data.resultData', _.get(res, 'data.Body[0]')) : _.get(res, 'data');\n});\n\nvar _axiosMutate = createAxios();\n\n_axiosMutate.interceptors.response.use(function (res) {\n  var data = path(['data'], res) || {};\n  var resultCode = data.resultCode,\n      resultMessage = data.resultMessage;\n  var isSuccess = resultCode === statusMap.success;\n\n  if (resultMessage) {\n    showMessage({\n      message: resultMessage,\n      variant: isSuccess ? 'success' : 'error'\n    });\n  }\n\n  return isSuccess ? data : Promise.reject(res);\n}); // query\n\n/**\r\n *\r\n * @param { url, params } object\r\n * { url: '/restApi', params: { ...getParameter }}\r\n */\n\n\nexport var query = function query() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      url = _ref.url,\n      _ref$params = _ref.params,\n      params = _ref$params === void 0 ? {} : _ref$params,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 10000 : _ref$timeout;\n\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$showErrorMessag = _ref2.showErrorMessage,\n      showErrorMessage = _ref2$showErrorMessag === void 0 ? true : _ref2$showErrorMessag;\n\n  _axiosQuery.defaults.timeout = timeout;\n  params = _.merge(params, {\n    TOKEN: getAccessToken()\n  });\n  return !!url ? _axiosQuery(encodeURI(url), {\n    params: params,\n    custom: {\n      showErrorMessage: showErrorMessage\n    }\n  }) : Promise.reject(ERROR_REST_API_URL);\n};\n/**\r\n *\r\n * @param {Array} object\r\n *\r\n * [{ url, params}, {url, params}...]\r\n */\n\nexport var queryAll = function queryAll() {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return Array.isArray(args) && args.length ? Promise.all(args.map(query)) : Promise.reject(ERROR_REST_API_URL);\n}; // mutate\n\n/**\r\n *\r\n * @param { url, data } object\r\n *\r\n * { url: '/restApi', data: { ... } }\r\n * url -> prefix 로 Create, Update, Delete 구분\r\n * cudtype 은 자동생성\r\n */\n\nexport var mutate = function mutate() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      url = _ref3.url,\n      _ref3$data = _ref3.data,\n      data = _ref3$data === void 0 ? {} : _ref3$data,\n      timeout = _ref3.timeout;\n\n  _axiosMutate.defaults.timeout = timeout || 10000;\n\n  if (!url) {\n    return Promise.reject(ERROR_REST_API_URL);\n  }\n\n  if (url.includes('?')) {\n    url = url + '&TOKEN=' + getAccessToken();\n  } else {\n    url = url + '?TOKEN=' + getAccessToken();\n  }\n\n  var DELETE = 'delete';\n  var UPDATE = 'update';\n  var CREATE = 'create';\n  var isUpdate = url.includes(UPDATE);\n  var isDelete = !isUpdate && url.includes(DELETE);\n\n  if (isUpdate || isDelete) {\n    data.cudtype = isUpdate ? UPDATE : DELETE;\n    return _axiosMutate.put(url, data);\n  }\n\n  if (url.includes(CREATE)) {\n    data.cudtype = CREATE;\n  }\n\n  return _axiosMutate.post(url, data);\n};","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/api/index.js"],"names":["_","ERROR_REST_API_URL","qs","path","showMessage","createAxios","getAccessToken","statusMap","success","error","_axiosQuery","method","paramsSerializer","params","stringify","indices","interceptors","response","use","res","get","message","variant","isEmpty","_axiosMutate","data","resultCode","resultMessage","isSuccess","Promise","reject","query","url","timeout","showErrorMessage","defaults","merge","TOKEN","encodeURI","custom","queryAll","args","Array","isArray","length","all","map","mutate","includes","DELETE","UPDATE","CREATE","isUpdate","isDelete","cudtype","put","post"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport { ERROR_REST_API_URL } from 'owp/constants/error';\r\nimport qs from 'qs';\r\nimport { path } from 'ramda';\r\nimport { showMessage } from '../common/util';\r\nimport { createAxios } from './axios';\r\nimport { getAccessToken } from 'owp/auth';\r\n\r\nconst statusMap = {\r\n    success: 'STATUS_1',\r\n    error: 'STATUS_0',\r\n};\r\n\r\nconst _axiosQuery = createAxios({\r\n    method: 'get',\r\n    paramsSerializer: function (params) {\r\n        return qs.stringify(params, { indices: false });\r\n    },\r\n});\r\n_axiosQuery.interceptors.response.use((res) => {\r\n    if (\r\n        _.get(res, 'config.custom.showErrorMessage') &&\r\n        _.get(res, 'data.resultCode') === statusMap.error\r\n    ) {\r\n        showMessage({\r\n            message: _.get(res, 'data.resultMessage', ''),\r\n            variant: 'error',\r\n        });\r\n    }\r\n\r\n    return _.isEmpty(_.get(res, 'data.resultData2'))\r\n        ? _.get(res, 'data.resultData', _.get(res, 'data.Body[0]'))\r\n        : _.get(res, 'data');\r\n});\r\n\r\nconst _axiosMutate = createAxios();\r\n_axiosMutate.interceptors.response.use((res) => {\r\n    const data = path(['data'], res) || {};\r\n    const { resultCode, resultMessage } = data;\r\n    const isSuccess = resultCode === statusMap.success;\r\n\r\n    if (resultMessage) {\r\n        showMessage({\r\n            message: resultMessage,\r\n            variant: isSuccess ? 'success' : 'error',\r\n        });\r\n    }\r\n\r\n    return isSuccess ? data : Promise.reject(res);\r\n});\r\n\r\n// query\r\n/**\r\n *\r\n * @param { url, params } object\r\n * { url: '/restApi', params: { ...getParameter }}\r\n */\r\nexport const query = (\r\n    { url, params = {}, timeout = 10000 } = {},\r\n    { showErrorMessage = true } = {}\r\n) => {\r\n    _axiosQuery.defaults.timeout = timeout;\r\n\r\n    params = _.merge(params, { TOKEN: getAccessToken() });\r\n\r\n    return !!url\r\n        ? _axiosQuery(encodeURI(url), { params, custom: { showErrorMessage } })\r\n        : Promise.reject(ERROR_REST_API_URL);\r\n};\r\n\r\n/**\r\n *\r\n * @param {Array} object\r\n *\r\n * [{ url, params}, {url, params}...]\r\n */\r\nexport const queryAll = (args = []) => {\r\n    return Array.isArray(args) && args.length\r\n        ? Promise.all(args.map(query))\r\n        : Promise.reject(ERROR_REST_API_URL);\r\n};\r\n\r\n// mutate\r\n/**\r\n *\r\n * @param { url, data } object\r\n *\r\n * { url: '/restApi', data: { ... } }\r\n * url -> prefix 로 Create, Update, Delete 구분\r\n * cudtype 은 자동생성\r\n */\r\nexport const mutate = ({ url, data = {}, timeout } = {}) => {\r\n    _axiosMutate.defaults.timeout = timeout || 10000;\r\n\r\n    if (!url) {\r\n        return Promise.reject(ERROR_REST_API_URL);\r\n    }\r\n\r\n    if (url.includes('?')) {\r\n        url = url + '&TOKEN=' + getAccessToken();\r\n    } else {\r\n        url = url + '?TOKEN=' + getAccessToken();\r\n    }\r\n\r\n    const DELETE = 'delete';\r\n    const UPDATE = 'update';\r\n    const CREATE = 'create';\r\n\r\n    const isUpdate = url.includes(UPDATE);\r\n    const isDelete = !isUpdate && url.includes(DELETE);\r\n\r\n    if (isUpdate || isDelete) {\r\n        data.cudtype = isUpdate ? UPDATE : DELETE;\r\n        return _axiosMutate.put(url, data);\r\n    }\r\n\r\n    if (url.includes(CREATE)) {\r\n        data.cudtype = CREATE;\r\n    }\r\n    return _axiosMutate.post(url, data);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}