{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n// TODO: convert it to ramda style function\nimport isPlainObject from 'lodash/isPlainObject';\nimport mapKeys from 'lodash/mapKeys';\nimport { assoc, complement, cond, curry, filter, has, isNil, keys, map, merge, mergeAll, omit, path, pathEq, pipe, prop, props, reduce, toPairs } from 'ramda';\nvar isNotNil = complement(isNil);\nvar renameKeys = curry(function (keysMap, obj) {\n  return reduce(function (acc, key) {\n    return assoc(keysMap[key] || key, obj[key], acc);\n  }, {}, keys(obj));\n});\n\nvar makeJsonFromXmlNodes = function makeJsonFromXmlNodes(nodes) {\n  try {\n    var newItem = {};\n\n    var _iterator = _createForOfIteratorHelper(nodes.attributes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var attr = _step.value;\n        newItem[attr.name] = attr.value;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return newItem;\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport var transform = function transform() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$columnOptions = _ref.columnOptions,\n      columnOptions = _ref$columnOptions === void 0 ? {} : _ref$columnOptions,\n      _ref$cellOptions = _ref.cellOptions,\n      cellOptions = _ref$cellOptions === void 0 ? {} : _ref$cellOptions,\n      _ref$headOptions = _ref.headOptions,\n      headOptions = _ref$headOptions === void 0 ? [] : _ref$headOptions,\n      _ref$selectColumns = _ref.selectColumns,\n      selectColumns = _ref$selectColumns === void 0 ? {} : _ref$selectColumns,\n      _ref$radioColumns = _ref.radioColumns,\n      radioColumns = _ref$radioColumns === void 0 ? {} : _ref$radioColumns,\n      _ref$suggestColumns = _ref.suggestColumns,\n      suggestColumns = _ref$suggestColumns === void 0 ? {} : _ref$suggestColumns,\n      layoutColumns = _ref.layoutColumns,\n      selectCells = _ref.selectCells,\n      radioCells = _ref.radioCells;\n\n  var header = _objectSpread({}, obj);\n\n  var cols = map(function (column) {\n    return mergeAll([column, prop(column.Name, columnOptions), prop(column.Name, suggestColumns), makeEnumCell(selectColumns[column.Name], 'Enum'), makeEnumCell(radioColumns[column.Name], 'Radio')]);\n  }, Array.isArray(layoutColumns) ? layoutColumns : pipe(keys, map(function (key) {\n    return {\n      Name: key,\n      RelWidth: 1\n    };\n  }))(obj));\n  var bodyItem = reduce(function (newItem, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    // const newKey = ifElse(\n    //     arr => gt(length(arr), 1),\n    //     arr => join('.')(tail(arr)),\n    //     head\n    // )(key.split('.'));\n    var newKey = key;\n\n    if (isPlainObject(value)) {\n      newItem = value;\n    } else {\n      newItem[newKey] = value;\n    }\n\n    if (cellOptions[newKey]) {\n      newItem = mapToValidKeys(newKey, newItem, cellOptions[newKey]);\n    }\n\n    if (selectCells && selectCells[newKey]) {\n      var selectEnumCell = makeEnumCell(selectCells[newKey], 'Enum');\n      newItem = mapToValidKeys(newKey, newItem, selectEnumCell);\n    }\n\n    if (radioCells && radioCells[newKey]) {\n      var radioEnumCell = makeEnumCell(radioCells[newKey], 'Radio');\n      newItem = mapToValidKeys(newKey, newItem, radioEnumCell);\n    }\n\n    return newItem;\n  });\n  var body = map(function (item) {\n    return bodyItem({}, toPairs(item));\n  }, data);\n  return {\n    Cols: cols,\n    Header: header,\n    Head: headOptions,\n    Body: [body]\n  };\n};\n\nvar makeEnumCell = function makeEnumCell(cell) {\n  var enumType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Enum';\n  if (!cell) return;\n  var enumCell = transformToEnum([cell.labelKey, cell.valueKey], cell.data);\n  enumCell.Type = enumType;\n  return enumCell;\n};\n\nvar mapToValidKeys = function mapToValidKeys(baseKey, base, item) {\n  return merge(base, mapKeys(item, function (value, key) {\n    return \"\".concat(baseKey).concat(key);\n  }));\n};\n\nexport var transformToEnum = function transformToEnum(keys, data) {\n  var pairs = map(props(keys), data);\n\n  var toValidEnumFormat = function toValidEnumFormat(o, cur) {\n    o.Enum = \"\".concat(o.Enum, \"|\").concat(cur[0]);\n    o.EnumKeys = \"\".concat(o.EnumKeys, \"|\").concat(cur[1]);\n    return o;\n  };\n\n  return reduce(toValidEnumFormat, {\n    Enum: '',\n    EnumKeys: ''\n  }, pairs);\n};\nexport var parseXML = function parseXML(xmlString) {\n  if (typeof DOMParser !== 'function') {\n    return;\n  }\n\n  return new DOMParser().parseFromString(xmlString, 'text/xml');\n};\nexport var changesAsJSON = pipe(parseXML, path(['firstChild', 'childNodes']), map(makeJsonFromXmlNodes));\nexport var getSelectedData = pipe(function (data) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      rowIdKey = _ref4.rowIdKey;\n\n  return map(cond([[has('Selected'), pipe(omit(['Selected']), renameKeys({\n    id: rowIdKey\n  }))]]), data);\n}, filter(isNotNil));\nexport var makeBatchData = pipe(function (data) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      rowIdKey = _ref5.rowIdKey,\n      userSeq = _ref5.userSeq;\n\n  return map(cond([[has('Deleted'), pipe(omit(['Deleted']), renameKeys({\n    id: rowIdKey\n  }), merge({\n    STATUS: 'Delete'\n  }))], [has('Changed'), pipe(omit(['Changed']), renameKeys({\n    id: rowIdKey\n  }), merge({\n    STATUS: 'Update'\n  }))], [has('Added'), pipe(omit(['Added', 'id', 'Def', 'Next', 'Parent', 'Prev' // pkName, // TODO: https://github.com/leeinbae/owp/issues/42#issuecomment-463965528\n  ]), merge({\n    STATUS: 'Create',\n    [rowIdKey ? \"\".concat(rowIdKey.split('.')[0], \".WUSERSEQ\") : 'WUSERSEQ']: userSeq\n  }))]]), data);\n}, filter(isNotNil));\nexport var makeColumnsFromGridLayout = pipe(parseXML, path(['firstChild', 'childNodes']), filter(pathEq(['nodeName'], 'Cols')), path(['0', 'childNodes']), map(makeJsonFromXmlNodes), filter(isNotNil));\nexport var fetchAsText = function fetchAsText(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    fetch(url, options).then(function (response) {\n      return resolve(response.text());\n    }).catch(function (error) {\n      return reject(error);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/components/TreeGrid/util.js"],"names":["isPlainObject","mapKeys","assoc","complement","cond","curry","filter","has","isNil","keys","map","merge","mergeAll","omit","path","pathEq","pipe","prop","props","reduce","toPairs","isNotNil","renameKeys","keysMap","obj","acc","key","makeJsonFromXmlNodes","nodes","newItem","attributes","attr","name","value","error","undefined","transform","data","columnOptions","cellOptions","headOptions","selectColumns","radioColumns","suggestColumns","layoutColumns","selectCells","radioCells","header","cols","column","Name","makeEnumCell","Array","isArray","RelWidth","bodyItem","newKey","mapToValidKeys","selectEnumCell","radioEnumCell","body","item","Cols","Header","Head","Body","cell","enumType","enumCell","transformToEnum","labelKey","valueKey","Type","baseKey","base","pairs","toValidEnumFormat","o","cur","Enum","EnumKeys","parseXML","xmlString","DOMParser","parseFromString","changesAsJSON","getSelectedData","rowIdKey","id","makeBatchData","userSeq","STATUS","split","makeColumnsFromGridLayout","fetchAsText","url","options","Promise","resolve","reject","fetch","then","response","text","catch"],"mappings":"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","sourcesContent":["// TODO: convert it to ramda style function\r\nimport isPlainObject from 'lodash/isPlainObject';\r\nimport mapKeys from 'lodash/mapKeys';\r\nimport {\r\n    assoc,\r\n    complement,\r\n    cond,\r\n    curry,\r\n    filter,\r\n    has,\r\n    isNil,\r\n    keys,\r\n    map,\r\n    merge,\r\n    mergeAll,\r\n    omit,\r\n    path,\r\n    pathEq,\r\n    pipe,\r\n    prop,\r\n    props,\r\n    reduce,\r\n    toPairs,\r\n} from 'ramda';\r\n\r\nconst isNotNil = complement(isNil);\r\nconst renameKeys = curry((keysMap, obj) =>\r\n    reduce(\r\n        (acc, key) => assoc(keysMap[key] || key, obj[key], acc),\r\n        {},\r\n        keys(obj)\r\n    )\r\n);\r\nconst makeJsonFromXmlNodes = nodes => {\r\n    try {\r\n        const newItem = {};\r\n        for (const attr of nodes.attributes) {\r\n            newItem[attr.name] = attr.value;\r\n        }\r\n\r\n        return newItem;\r\n    } catch (error) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const transform = (\r\n    obj = {},\r\n    data = [],\r\n    {\r\n        columnOptions = {},\r\n        cellOptions = {},\r\n        headOptions = [],\r\n        selectColumns = {},\r\n        radioColumns = {},\r\n        suggestColumns = {},\r\n        layoutColumns,\r\n        selectCells,\r\n        radioCells,\r\n    } = {}\r\n) => {\r\n    const header = { ...obj };\r\n\r\n    const cols = map(\r\n        column =>\r\n            mergeAll([\r\n                column,\r\n                prop(column.Name, columnOptions),\r\n                prop(column.Name, suggestColumns),\r\n                makeEnumCell(selectColumns[column.Name], 'Enum'),\r\n                makeEnumCell(radioColumns[column.Name], 'Radio'),\r\n            ]),\r\n        Array.isArray(layoutColumns)\r\n            ? layoutColumns\r\n            : pipe(\r\n                  keys,\r\n                  map(key => ({ Name: key, RelWidth: 1 }))\r\n              )(obj)\r\n    );\r\n\r\n    const bodyItem = reduce((newItem, [key, value]) => {\r\n        // const newKey = ifElse(\r\n        //     arr => gt(length(arr), 1),\r\n        //     arr => join('.')(tail(arr)),\r\n        //     head\r\n        // )(key.split('.'));\r\n        const newKey = key;\r\n\r\n        if (isPlainObject(value)) {\r\n            newItem = value;\r\n        } else {\r\n            newItem[newKey] = value;\r\n        }\r\n\r\n        if (cellOptions[newKey]) {\r\n            newItem = mapToValidKeys(newKey, newItem, cellOptions[newKey]);\r\n        }\r\n\r\n        if (selectCells && selectCells[newKey]) {\r\n            const selectEnumCell = makeEnumCell(selectCells[newKey], 'Enum');\r\n            newItem = mapToValidKeys(newKey, newItem, selectEnumCell);\r\n        }\r\n\r\n        if (radioCells && radioCells[newKey]) {\r\n            const radioEnumCell = makeEnumCell(radioCells[newKey], 'Radio');\r\n            newItem = mapToValidKeys(newKey, newItem, radioEnumCell);\r\n        }\r\n\r\n        return newItem;\r\n    });\r\n\r\n    const body = map(item => bodyItem({}, toPairs(item)), data);\r\n\r\n    return {\r\n        Cols: cols,\r\n        Header: header,\r\n        Head: headOptions,\r\n        Body: [body],\r\n    };\r\n};\r\n\r\nconst makeEnumCell = (cell, enumType = 'Enum') => {\r\n    if (!cell) return;\r\n\r\n    const enumCell = transformToEnum([cell.labelKey, cell.valueKey], cell.data);\r\n    enumCell.Type = enumType;\r\n\r\n    return enumCell;\r\n};\r\n\r\nconst mapToValidKeys = (baseKey, base, item) =>\r\n    merge(\r\n        base,\r\n        mapKeys(item, (value, key) => {\r\n            return `${baseKey}${key}`;\r\n        })\r\n    );\r\n\r\nexport const transformToEnum = (keys, data) => {\r\n    const pairs = map(props(keys), data);\r\n    const toValidEnumFormat = (o, cur) => {\r\n        o.Enum = `${o.Enum}|${cur[0]}`;\r\n        o.EnumKeys = `${o.EnumKeys}|${cur[1]}`;\r\n        return o;\r\n    };\r\n\r\n    return reduce(toValidEnumFormat, { Enum: '', EnumKeys: '' }, pairs);\r\n};\r\n\r\nexport const parseXML = xmlString => {\r\n    if (typeof DOMParser !== 'function') {\r\n        return;\r\n    }\r\n\r\n    return new DOMParser().parseFromString(xmlString, 'text/xml');\r\n};\r\n\r\nexport const changesAsJSON = pipe(\r\n    parseXML,\r\n    path(['firstChild', 'childNodes']),\r\n    map(makeJsonFromXmlNodes)\r\n);\r\n\r\nexport const getSelectedData = pipe(\r\n    (data, { rowIdKey } = {}) =>\r\n        map(\r\n            cond([\r\n                [\r\n                    has('Selected'),\r\n                    pipe(\r\n                        omit(['Selected']),\r\n                        renameKeys({ id: rowIdKey })\r\n                    ),\r\n                ],\r\n            ]),\r\n            data\r\n        ),\r\n    filter(isNotNil)\r\n);\r\n\r\nexport const makeBatchData = pipe(\r\n    (data, { rowIdKey, userSeq } = {}) =>\r\n        map(\r\n            cond([\r\n                [\r\n                    has('Deleted'),\r\n                    pipe(\r\n                        omit(['Deleted']),\r\n                        renameKeys({ id: rowIdKey }),\r\n                        merge({ STATUS: 'Delete' })\r\n                    ),\r\n                ],\r\n                [\r\n                    has('Changed'),\r\n                    pipe(\r\n                        omit(['Changed']),\r\n                        renameKeys({ id: rowIdKey }),\r\n                        merge({ STATUS: 'Update' })\r\n                    ),\r\n                ],\r\n                [\r\n                    has('Added'),\r\n                    pipe(\r\n                        omit([\r\n                            'Added',\r\n                            'id',\r\n                            'Def',\r\n                            'Next',\r\n                            'Parent',\r\n                            'Prev',\r\n                            // pkName, // TODO: https://github.com/leeinbae/owp/issues/42#issuecomment-463965528\r\n                        ]),\r\n                        merge({\r\n                            STATUS: 'Create',\r\n                            [rowIdKey\r\n                                ? `${rowIdKey.split('.')[0]}.WUSERSEQ`\r\n                                : 'WUSERSEQ']: userSeq,\r\n                        })\r\n                    ),\r\n                ],\r\n            ]),\r\n            data\r\n        ),\r\n    filter(isNotNil)\r\n);\r\n\r\nexport const makeColumnsFromGridLayout = pipe(\r\n    parseXML,\r\n    path(['firstChild', 'childNodes']),\r\n    filter(pathEq(['nodeName'], 'Cols')),\r\n    path(['0', 'childNodes']),\r\n    map(makeJsonFromXmlNodes),\r\n    filter(isNotNil)\r\n);\r\n\r\nexport const fetchAsText = (url, options = {}) =>\r\n    new Promise((resolve, reject) => {\r\n        fetch(url, options)\r\n            .then(response => resolve(response.text()))\r\n            .catch(error => reject(error));\r\n    });\r\n"]},"metadata":{},"sourceType":"module"}