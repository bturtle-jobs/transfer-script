{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PivotData = exports.sortAs = exports.getSort = exports.numberFormat = exports.naturalSort = exports.locales = exports.derivers = exports.aggregators = exports.aggregatorTemplates = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS201: Simplify complex destructure assignments\n * DS203: Remove `|| {}` from converted for-own loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n\nvar addSeparators = function addSeparators(nStr, thousandsSep, decimalSep) {\n  var x = String(nStr).split('.');\n  var x1 = x[0];\n  var x2 = x.length > 1 ? decimalSep + x[1] : '';\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n  }\n\n  return x1 + x2;\n};\n\nvar numberFormat = function numberFormat(opts_in) {\n  var defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: ''\n  };\n  var opts = Object.assign({}, defaults, opts_in);\n  return function (x) {\n    if (isNaN(x) || !isFinite(x)) {\n      return '';\n    }\n\n    var result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n    return '' + opts.prefix + result + opts.suffix;\n  };\n};\n\nvar rx = /(\\d+)|(\\D+)/g;\nvar rd = /\\d/;\nvar rz = /^0/;\n\nvar naturalSort = function naturalSort(as, bs) {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n\n  if (as !== null && bs === null) {\n    return 1;\n  } // then raw NaNs\n\n\n  if (typeof as === 'number' && isNaN(as)) {\n    return -1;\n  }\n\n  if (typeof bs === 'number' && isNaN(bs)) {\n    return 1;\n  } // numbers and numbery strings group together\n\n\n  var nas = Number(as);\n  var nbs = Number(bs);\n\n  if (nas < nbs) {\n    return -1;\n  }\n\n  if (nas > nbs) {\n    return 1;\n  } // within that, true numbers before numbery strings\n\n\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  } // 'Infinity' is a textual number, so less than 'A'\n\n\n  if (isNaN(nbs) && !isNaN(nas)) {\n    return -1;\n  }\n\n  if (isNaN(nas) && !isNaN(nbs)) {\n    return 1;\n  } // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n\n\n  var a = String(as);\n  var b = String(bs);\n\n  if (a === b) {\n    return 0;\n  }\n\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  } // special treatment for strings containing digits\n\n\n  a = a.match(rx);\n  b = b.match(rx);\n\n  while (a.length && b.length) {\n    var a1 = a.shift();\n    var b1 = b.shift();\n\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n\n  return a.length - b.length;\n};\n\nvar sortAs = function sortAs(order) {\n  var mapping = {}; // sort lowercased keys similarly\n\n  var l_mapping = {};\n\n  for (var i in order) {\n    var x = order[i];\n    mapping[x] = i;\n\n    if (typeof x === 'string') {\n      l_mapping[x.toLowerCase()] = i;\n    }\n  }\n\n  return function (a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    } else if (a in mapping) {\n      return -1;\n    } else if (b in mapping) {\n      return 1;\n    } else if (a in l_mapping && b in l_mapping) {\n      return l_mapping[a] - l_mapping[b];\n    } else if (a in l_mapping) {\n      return -1;\n    } else if (b in l_mapping) {\n      return 1;\n    }\n\n    return naturalSort(a, b);\n  };\n};\n\nvar getSort = function getSort(sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      var sort = sorters(attr);\n\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n\n  return naturalSort;\n}; // aggregator templates default to US number formatting but this is overrideable\n\n\nvar usFmt = numberFormat();\nvar usFmtInt = numberFormat({\n  digitsAfterDecimal: 0\n});\nvar usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%'\n});\nvar aggregatorTemplates = {\n  count: function count() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmtInt;\n    return function () {\n      return function () {\n        return {\n          count: 0,\n          push: function push() {\n            this.count++;\n          },\n          value: function value() {\n            return this.count;\n          },\n          format: formatter\n        };\n      };\n    };\n  },\n  uniques: function uniques(fn) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmtInt;\n    return function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          attr = _ref2[0];\n\n      return function () {\n        return {\n          uniq: [],\n          push: function push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value: function value() {\n            return fn(this.uniq);\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  sum: function sum() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmt;\n    return function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          attr = _ref4[0];\n\n      return function () {\n        return {\n          sum: 0,\n          push: function push(record) {\n            if (!isNaN(parseFloat(record[attr]))) {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value: function value() {\n            return this.sum;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  extremes: function extremes(mode) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmt;\n    return function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          attr = _ref6[0];\n\n      return function (data) {\n        return {\n          val: null,\n          sorter: getSort(typeof data !== 'undefined' ? data.sorters : null, attr),\n          push: function push(record) {\n            var x = record[attr];\n\n            if (['min', 'max'].includes(mode)) {\n              x = parseFloat(x);\n\n              if (!isNaN(x)) {\n                this.val = Math[mode](x, this.val !== null ? this.val : x);\n              }\n            }\n\n            if (mode === 'first' && this.sorter(x, this.val !== null ? this.val : x) <= 0) {\n              this.val = x;\n            }\n\n            if (mode === 'last' && this.sorter(x, this.val !== null ? this.val : x) >= 0) {\n              this.val = x;\n            }\n          },\n          value: function value() {\n            return this.val;\n          },\n          format: function format(x) {\n            if (isNaN(x)) {\n              return x;\n            }\n\n            return formatter(x);\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  quantile: function quantile(q) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmt;\n    return function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n          attr = _ref8[0];\n\n      return function () {\n        return {\n          vals: [],\n          push: function push(record) {\n            var x = parseFloat(record[attr]);\n\n            if (!isNaN(x)) {\n              this.vals.push(x);\n            }\n          },\n          value: function value() {\n            if (this.vals.length === 0) {\n              return null;\n            }\n\n            this.vals.sort(function (a, b) {\n              return a - b;\n            });\n            var i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  runningStat: function runningStat() {\n    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mean';\n    var ddof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var formatter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : usFmt;\n    return function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 1),\n          attr = _ref10[0];\n\n      return function () {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          push: function push(record) {\n            var x = parseFloat(record[attr]);\n\n            if (isNaN(x)) {\n              return;\n            }\n\n            this.n += 1.0;\n\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n\n            var m_new = this.m + (x - this.m) / this.n;\n            this.s = this.s + (x - this.m) * (x - m_new);\n            this.m = m_new;\n          },\n          value: function value() {\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n\n              return this.m;\n            }\n\n            if (this.n <= ddof) {\n              return 0;\n            }\n\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  sumOverSum: function sumOverSum() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmt;\n    return function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n          num = _ref12[0],\n          denom = _ref12[1];\n\n      return function () {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push: function push(record) {\n            if (!isNaN(parseFloat(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n\n            if (!isNaN(parseFloat(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value: function value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs: typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2\n        };\n      };\n    };\n  },\n  fractionOf: function fractionOf(wrapped) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'total';\n    var formatter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : usFmtPct;\n    return function () {\n      for (var _len = arguments.length, x = Array(_len), _key = 0; _key < _len; _key++) {\n        x[_key] = arguments[_key];\n      }\n\n      return function (data, rowKey, colKey) {\n        return {\n          selector: {\n            total: [[], []],\n            row: [rowKey, []],\n            col: [[], colKey]\n          }[type],\n          inner: wrapped.apply(undefined, _toConsumableArray(Array.from(x || [])))(data, rowKey, colKey),\n          push: function push(record) {\n            this.inner.push(record);\n          },\n          format: formatter,\n          value: function value() {\n            return this.inner.value() / data.getAggregator.apply(data, _toConsumableArray(Array.from(this.selector || []))).inner.value();\n          },\n          numInputs: wrapped.apply(undefined, _toConsumableArray(Array.from(x || [])))().numInputs\n        };\n      };\n    };\n  }\n};\n\naggregatorTemplates.countUnique = function (f) {\n  return aggregatorTemplates.uniques(function (x) {\n    return x.length;\n  }, f);\n};\n\naggregatorTemplates.listUnique = function (s) {\n  return aggregatorTemplates.uniques(function (x) {\n    return x.join(s);\n  }, function (x) {\n    return x;\n  });\n};\n\naggregatorTemplates.max = function (f) {\n  return aggregatorTemplates.extremes('max', f);\n};\n\naggregatorTemplates.min = function (f) {\n  return aggregatorTemplates.extremes('min', f);\n};\n\naggregatorTemplates.first = function (f) {\n  return aggregatorTemplates.extremes('first', f);\n};\n\naggregatorTemplates.last = function (f) {\n  return aggregatorTemplates.extremes('last', f);\n};\n\naggregatorTemplates.median = function (f) {\n  return aggregatorTemplates.quantile(0.5, f);\n};\n\naggregatorTemplates.average = function (f) {\n  return aggregatorTemplates.runningStat('mean', 1, f);\n};\n\naggregatorTemplates.var = function (ddof, f) {\n  return aggregatorTemplates.runningStat('var', ddof, f);\n};\n\naggregatorTemplates.stdev = function (ddof, f) {\n  return aggregatorTemplates.runningStat('stdev', ddof, f);\n}; // default aggregators & renderers use US naming and number formatting\n\n\nvar aggregators = function (tpl) {\n  return {\n    Count: tpl.count(usFmtInt),\n    'Count Unique Values': tpl.countUnique(usFmtInt),\n    'List Unique Values': tpl.listUnique(', '),\n    Sum: tpl.sum(usFmt),\n    'Integer Sum': tpl.sum(usFmtInt),\n    Average: tpl.average(usFmt),\n    Median: tpl.median(usFmt),\n    'Sample Variance': tpl.var(1, usFmt),\n    'Sample Standard Deviation': tpl.stdev(1, usFmt),\n    Minimum: tpl.min(usFmt),\n    Maximum: tpl.max(usFmt),\n    First: tpl.first(usFmt),\n    Last: tpl.last(usFmt),\n    'Sum over Sum': tpl.sumOverSum(usFmt),\n    'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n    'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n    'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n    'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n    'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n    'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct)\n  };\n}(aggregatorTemplates);\n\nvar locales = {\n  en: {\n    aggregators: aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by'\n    }\n  }\n}; // dateFormat deriver l10n requires month and day names to be passed in directly\n\nvar mthNamesEn = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nvar zeroPad = function zeroPad(number) {\n  return ('0' + number).substr(-2, 2);\n}; // eslint-disable-line no-magic-numbers\n\n\nvar derivers = {\n  bin: function bin(col, binWidth) {\n    return function (record) {\n      return record[col] - record[col] % binWidth;\n    };\n  },\n  dateFormat: function dateFormat(col, formatString) {\n    var utcOutput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var mthNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : mthNamesEn;\n    var dayNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : dayNamesEn;\n    var utc = utcOutput ? 'UTC' : '';\n    return function (record) {\n      var date = new Date(Date.parse(record[col]));\n\n      if (isNaN(date)) {\n        return '';\n      }\n\n      return formatString.replace(/%(.)/g, function (m, p) {\n        switch (p) {\n          case 'y':\n            return date['get' + utc + 'FullYear']();\n\n          case 'm':\n            return zeroPad(date['get' + utc + 'Month']() + 1);\n\n          case 'n':\n            return mthNames[date['get' + utc + 'Month']()];\n\n          case 'd':\n            return zeroPad(date['get' + utc + 'Date']());\n\n          case 'w':\n            return dayNames[date['get' + utc + 'Day']()];\n\n          case 'x':\n            return date['get' + utc + 'Day']();\n\n          case 'H':\n            return zeroPad(date['get' + utc + 'Hours']());\n\n          case 'M':\n            return zeroPad(date['get' + utc + 'Minutes']());\n\n          case 'S':\n            return zeroPad(date['get' + utc + 'Seconds']());\n\n          default:\n            return '%' + p;\n        }\n      });\n    };\n  }\n};\n/*\nData Model class\n*/\n\nvar PivotData = function () {\n  function PivotData() {\n    var _this = this;\n\n    var inputProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PivotData);\n\n    this.props = Object.assign({}, PivotData.defaultProps, inputProps);\n\n    _propTypes2.default.checkPropTypes(PivotData.propTypes, this.props, 'prop', 'PivotData');\n\n    this.aggregator = this.props.aggregators[this.props.aggregatorName](this.props.vals);\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.sorted = false; // iterate through input, accumulating data for cells\n\n    PivotData.forEachRecord(this.props.data, this.props.derivedAttributes, function (record) {\n      if (_this.filter(record)) {\n        _this.processRecord(record);\n      }\n    });\n  }\n\n  _createClass(PivotData, [{\n    key: 'filter',\n    value: function filter(record) {\n      for (var k in this.props.valueFilter) {\n        if (record[k] in this.props.valueFilter[k]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: 'forEachMatchingRecord',\n    value: function forEachMatchingRecord(criteria, callback) {\n      var _this2 = this;\n\n      return PivotData.forEachRecord(this.props.data, this.props.derivedAttributes, function (record) {\n        if (!_this2.filter(record)) {\n          return;\n        }\n\n        for (var k in criteria) {\n          var v = criteria[k];\n\n          if (v !== (k in record ? record[k] : 'null')) {\n            return;\n          }\n        }\n\n        callback(record);\n      });\n    }\n  }, {\n    key: 'arrSort',\n    value: function arrSort(attrs) {\n      var _this3 = this;\n\n      var a = void 0;\n\n      var sortersArr = function () {\n        var result = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Array.from(attrs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            a = _step.value;\n            result.push(getSort(_this3.props.sorters, a));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return result;\n      }();\n\n      return function (a, b) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = Object.keys(sortersArr || {})[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var i = _step2.value;\n            var sorter = sortersArr[i];\n            var comparison = sorter(a[i], b[i]);\n\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return 0;\n      };\n    }\n  }, {\n    key: 'sortKeys',\n    value: function sortKeys() {\n      var _this4 = this;\n\n      if (!this.sorted) {\n        this.sorted = true;\n\n        var v = function v(r, c) {\n          return _this4.getAggregator(r, c).value();\n        };\n\n        switch (this.props.rowOrder) {\n          case 'value_a_to_z':\n            this.rowKeys.sort(function (a, b) {\n              return naturalSort(v(a, []), v(b, []));\n            });\n            break;\n\n          case 'value_z_to_a':\n            this.rowKeys.sort(function (a, b) {\n              return -naturalSort(v(a, []), v(b, []));\n            });\n            break;\n\n          default:\n            this.rowKeys.sort(this.arrSort(this.props.rows));\n        }\n\n        switch (this.props.colOrder) {\n          case 'value_a_to_z':\n            this.colKeys.sort(function (a, b) {\n              return naturalSort(v([], a), v([], b));\n            });\n            break;\n\n          case 'value_z_to_a':\n            this.colKeys.sort(function (a, b) {\n              return -naturalSort(v([], a), v([], b));\n            });\n            break;\n\n          default:\n            this.colKeys.sort(this.arrSort(this.props.cols));\n        }\n      }\n    }\n  }, {\n    key: 'getColKeys',\n    value: function getColKeys() {\n      this.sortKeys();\n      return this.colKeys;\n    }\n  }, {\n    key: 'getRowKeys',\n    value: function getRowKeys() {\n      this.sortKeys();\n      return this.rowKeys;\n    }\n  }, {\n    key: 'processRecord',\n    value: function processRecord(record) {\n      // this code is called in a tight loop\n      var colKey = [];\n      var rowKey = [];\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = Array.from(this.props.cols)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var x = _step3.value;\n          colKey.push(x in record ? record[x] : 'null');\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = Array.from(this.props.rows)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _x16 = _step4.value;\n          rowKey.push(_x16 in record ? record[_x16] : 'null');\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var flatRowKey = rowKey.join(String.fromCharCode(0));\n      var flatColKey = colKey.join(String.fromCharCode(0));\n      this.allTotal.push(record);\n\n      if (rowKey.length !== 0) {\n        if (!this.rowTotals[flatRowKey]) {\n          this.rowKeys.push(rowKey);\n          this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n        }\n\n        this.rowTotals[flatRowKey].push(record);\n      }\n\n      if (colKey.length !== 0) {\n        if (!this.colTotals[flatColKey]) {\n          this.colKeys.push(colKey);\n          this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n        }\n\n        this.colTotals[flatColKey].push(record);\n      }\n\n      if (colKey.length !== 0 && rowKey.length !== 0) {\n        if (!this.tree[flatRowKey]) {\n          this.tree[flatRowKey] = {};\n        }\n\n        if (!this.tree[flatRowKey][flatColKey]) {\n          this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n        }\n\n        this.tree[flatRowKey][flatColKey].push(record);\n      }\n    }\n  }, {\n    key: 'getAggregator',\n    value: function getAggregator(rowKey, colKey) {\n      var agg = void 0;\n      var flatRowKey = rowKey.join(String.fromCharCode(0));\n      var flatColKey = colKey.join(String.fromCharCode(0));\n\n      if (rowKey.length === 0 && colKey.length === 0) {\n        agg = this.allTotal;\n      } else if (rowKey.length === 0) {\n        agg = this.colTotals[flatColKey];\n      } else if (colKey.length === 0) {\n        agg = this.rowTotals[flatRowKey];\n      } else {\n        agg = this.tree[flatRowKey][flatColKey];\n      }\n\n      return agg || {\n        value: function value() {\n          return null;\n        },\n        format: function format() {\n          return '';\n        }\n      };\n    }\n  }]);\n\n  return PivotData;\n}(); // can handle arrays or jQuery selections of tables\n\n\nPivotData.forEachRecord = function (input, derivedAttributes, f) {\n  var addRecord = void 0,\n      record = void 0;\n\n  if (Object.getOwnPropertyNames(derivedAttributes).length === 0) {\n    addRecord = f;\n  } else {\n    addRecord = function addRecord(record) {\n      for (var k in derivedAttributes) {\n        var derived = derivedAttributes[k](record);\n\n        if (derived !== null) {\n          record[k] = derived;\n        }\n      }\n\n      return f(record);\n    };\n  } // if it's a function, have it call us back\n\n\n  if (typeof input === 'function') {\n    return input(addRecord);\n  } else if (Array.isArray(input)) {\n    if (Array.isArray(input[0])) {\n      // array of arrays\n      return function () {\n        var result = [];\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = Object.keys(input || {})[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var i = _step5.value;\n            var compactRecord = input[i];\n\n            if (i > 0) {\n              record = {};\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = Object.keys(input[0] || {})[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var j = _step6.value;\n                  var k = input[0][j];\n                  record[k] = compactRecord[j];\n                }\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              result.push(addRecord(record));\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n\n        return result;\n      }();\n    } // array of objects\n\n\n    return function () {\n      var result1 = [];\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = Array.from(input)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          record = _step7.value;\n          result1.push(addRecord(record));\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      return result1;\n    }();\n  }\n\n  throw new Error('unknown input format');\n};\n\nPivotData.defaultProps = {\n  aggregators: aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  valueFilter: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n  derivedAttributes: {}\n};\nPivotData.propTypes = {\n  data: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.func]).isRequired,\n  aggregatorName: _propTypes2.default.string,\n  cols: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  rows: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  vals: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  valueFilter: _propTypes2.default.objectOf(_propTypes2.default.objectOf(_propTypes2.default.bool)),\n  sorters: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.objectOf(_propTypes2.default.func)]),\n  derivedAttributes: _propTypes2.default.objectOf(_propTypes2.default.func),\n  rowOrder: _propTypes2.default.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n  colOrder: _propTypes2.default.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a'])\n};\nexports.aggregatorTemplates = aggregatorTemplates;\nexports.aggregators = aggregators;\nexports.derivers = derivers;\nexports.locales = locales;\nexports.naturalSort = naturalSort;\nexports.numberFormat = numberFormat;\nexports.getSort = getSort;\nexports.sortAs = sortAs;\nexports.PivotData = PivotData;","map":{"version":3,"sources":["src/Utilities.js"],"names":["addSeparators","x","String","x1","x2","decimalSep","rgx","numberFormat","defaults","digitsAfterDecimal","scaler","thousandsSep","prefix","suffix","opts","Object","isNaN","isFinite","result","rx","rd","rz","naturalSort","bs","as","nas","Number","nbs","a","b","a1","b1","sortAs","mapping","l_mapping","order","getSort","sort","sorters","attr","usFmt","usFmtInt","usFmtPct","aggregatorTemplates","count","formatter","push","value","format","uniques","uniq","Array","record","fn","numInputs","sum","parseFloat","extremes","val","sorter","data","Math","mode","quantile","vals","i","runningStat","ddof","n","m","s","m_new","sumOverSum","num","denom","sumNum","sumDenom","fractionOf","type","selector","total","row","col","inner","wrapped","aggregators","Count","tpl","Sum","Average","Median","Minimum","Maximum","First","Last","locales","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","apply","cancel","totals","vs","by","mthNamesEn","dayNamesEn","zeroPad","derivers","bin","dateFormat","utcOutput","mthNames","dayNames","utc","date","Date","PivotData","inputProps","criteria","callback","v","k","attrs","sortersArr","comparison","colKey","rowKey","flatRowKey","flatColKey","agg","addRecord","derived","derivedAttributes","f","input","compactRecord","j","result1","cols","rows","aggregatorName","valueFilter","rowOrder","colOrder"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS201: Simplify complex destructure assignments\n * DS203: Remove `|| {}` from converted for-own loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\nconst addSeparators = function(nStr, thousandsSep, decimalSep) {\n  const x = String(nStr).split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\n  }\n  return x1 + x2;\n};\n\nconst numberFormat = function(opts_in) {\n  const defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: '',\n  };\n  const opts = Object.assign({}, defaults, opts_in);\n  return function(x) {\n    if (isNaN(x) || !isFinite(x)) {\n      return '';\n    }\n    const result = addSeparators(\n      (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\n      opts.thousandsSep,\n      opts.decimalSep\n    );\n    return `${opts.prefix}${result}${opts.suffix}`;\n  };\n};\n\nconst rx = /(\\d+)|(\\D+)/g;\nconst rd = /\\d/;\nconst rz = /^0/;\nconst naturalSort = (as, bs) => {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  const nas = Number(as);\n  const nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (isNaN(nbs) && !isNaN(nas)) {\n    return -1;\n  }\n  if (isNaN(nas) && !isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  let a = String(as);\n  let b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    const a1 = a.shift();\n    const b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\n\nconst sortAs = function(order) {\n  const mapping = {};\n\n  // sort lowercased keys similarly\n  const l_mapping = {};\n  for (const i in order) {\n    const x = order[i];\n    mapping[x] = i;\n    if (typeof x === 'string') {\n      l_mapping[x.toLowerCase()] = i;\n    }\n  }\n  return function(a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    } else if (a in mapping) {\n      return -1;\n    } else if (b in mapping) {\n      return 1;\n    } else if (a in l_mapping && b in l_mapping) {\n      return l_mapping[a] - l_mapping[b];\n    } else if (a in l_mapping) {\n      return -1;\n    } else if (b in l_mapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\n\nconst getSort = function(sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      const sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overrideable\nconst usFmt = numberFormat();\nconst usFmtInt = numberFormat({digitsAfterDecimal: 0});\nconst usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%',\n});\n\nconst aggregatorTemplates = {\n  count(formatter = usFmtInt) {\n    return () =>\n      function() {\n        return {\n          count: 0,\n          push() {\n            this.count++;\n          },\n          value() {\n            return this.count;\n          },\n          format: formatter,\n        };\n      };\n  },\n\n  uniques(fn, formatter = usFmtInt) {\n    return function([attr]) {\n      return function() {\n        return {\n          uniq: [],\n          push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value() {\n            return fn(this.uniq);\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sum(formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          sum: 0,\n          push(record) {\n            if (!isNaN(parseFloat(record[attr]))) {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value() {\n            return this.sum;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  extremes(mode, formatter = usFmt) {\n    return function([attr]) {\n      return function(data) {\n        return {\n          val: null,\n          sorter: getSort(\n            typeof data !== 'undefined' ? data.sorters : null,\n            attr\n          ),\n          push(record) {\n            let x = record[attr];\n            if (['min', 'max'].includes(mode)) {\n              x = parseFloat(x);\n              if (!isNaN(x)) {\n                this.val = Math[mode](x, this.val !== null ? this.val : x);\n              }\n            }\n            if (\n              mode === 'first' &&\n              this.sorter(x, this.val !== null ? this.val : x) <= 0\n            ) {\n              this.val = x;\n            }\n            if (\n              mode === 'last' &&\n              this.sorter(x, this.val !== null ? this.val : x) >= 0\n            ) {\n              this.val = x;\n            }\n          },\n          value() {\n            return this.val;\n          },\n          format(x) {\n            if (isNaN(x)) {\n              return x;\n            }\n            return formatter(x);\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  quantile(q, formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          vals: [],\n          push(record) {\n            const x = parseFloat(record[attr]);\n            if (!isNaN(x)) {\n              this.vals.push(x);\n            }\n          },\n          value() {\n            if (this.vals.length === 0) {\n              return null;\n            }\n            this.vals.sort((a, b) => a - b);\n            const i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  runningStat(mode = 'mean', ddof = 1, formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          push(record) {\n            const x = parseFloat(record[attr]);\n            if (isNaN(x)) {\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            const m_new = this.m + (x - this.m) / this.n;\n            this.s = this.s + (x - this.m) * (x - m_new);\n            this.m = m_new;\n          },\n          value() {\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sumOverSum(formatter = usFmt) {\n    return function([num, denom]) {\n      return function() {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push(record) {\n            if (!isNaN(parseFloat(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!isNaN(parseFloat(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs:\n            typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2,\n        };\n      };\n    };\n  },\n\n  fractionOf(wrapped, type = 'total', formatter = usFmtPct) {\n    return (...x) =>\n      function(data, rowKey, colKey) {\n        return {\n          selector: {total: [[], []], row: [rowKey, []], col: [[], colKey]}[\n            type\n          ],\n          inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n          push(record) {\n            this.inner.push(record);\n          },\n          format: formatter,\n          value() {\n            return (\n              this.inner.value() /\n              data\n                .getAggregator(...Array.from(this.selector || []))\n                .inner.value()\n            );\n          },\n          numInputs: wrapped(...Array.from(x || []))().numInputs,\n        };\n      };\n  },\n};\n\naggregatorTemplates.countUnique = f =>\n  aggregatorTemplates.uniques(x => x.length, f);\naggregatorTemplates.listUnique = s =>\n  aggregatorTemplates.uniques(x => x.join(s), x => x);\naggregatorTemplates.max = f => aggregatorTemplates.extremes('max', f);\naggregatorTemplates.min = f => aggregatorTemplates.extremes('min', f);\naggregatorTemplates.first = f => aggregatorTemplates.extremes('first', f);\naggregatorTemplates.last = f => aggregatorTemplates.extremes('last', f);\naggregatorTemplates.median = f => aggregatorTemplates.quantile(0.5, f);\naggregatorTemplates.average = f =>\n  aggregatorTemplates.runningStat('mean', 1, f);\naggregatorTemplates.var = (ddof, f) =>\n  aggregatorTemplates.runningStat('var', ddof, f);\naggregatorTemplates.stdev = (ddof, f) =>\n  aggregatorTemplates.runningStat('stdev', ddof, f);\n\n// default aggregators & renderers use US naming and number formatting\nconst aggregators = (tpl => ({\n  Count: tpl.count(usFmtInt),\n  'Count Unique Values': tpl.countUnique(usFmtInt),\n  'List Unique Values': tpl.listUnique(', '),\n  Sum: tpl.sum(usFmt),\n  'Integer Sum': tpl.sum(usFmtInt),\n  Average: tpl.average(usFmt),\n  Median: tpl.median(usFmt),\n  'Sample Variance': tpl.var(1, usFmt),\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\n  Minimum: tpl.min(usFmt),\n  Maximum: tpl.max(usFmt),\n  First: tpl.first(usFmt),\n  Last: tpl.last(usFmt),\n  'Sum over Sum': tpl.sumOverSum(usFmt),\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct),\n}))(aggregatorTemplates);\n\nconst locales = {\n  en: {\n    aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by',\n    },\n  },\n};\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nconst mthNamesEn = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst zeroPad = number => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\n\nconst derivers = {\n  bin(col, binWidth) {\n    return record => record[col] - record[col] % binWidth;\n  },\n  dateFormat(\n    col,\n    formatString,\n    utcOutput = false,\n    mthNames = mthNamesEn,\n    dayNames = dayNamesEn\n  ) {\n    const utc = utcOutput ? 'UTC' : '';\n    return function(record) {\n      const date = new Date(Date.parse(record[col]));\n      if (isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function(m, p) {\n        switch (p) {\n          case 'y':\n            return date[`get${utc}FullYear`]();\n          case 'm':\n            return zeroPad(date[`get${utc}Month`]() + 1);\n          case 'n':\n            return mthNames[date[`get${utc}Month`]()];\n          case 'd':\n            return zeroPad(date[`get${utc}Date`]());\n          case 'w':\n            return dayNames[date[`get${utc}Day`]()];\n          case 'x':\n            return date[`get${utc}Day`]();\n          case 'H':\n            return zeroPad(date[`get${utc}Hours`]());\n          case 'M':\n            return zeroPad(date[`get${utc}Minutes`]());\n          case 'S':\n            return zeroPad(date[`get${utc}Seconds`]());\n          default:\n            return `%${p}`;\n        }\n      });\n    };\n  },\n};\n\n/*\nData Model class\n*/\n\nclass PivotData {\n  constructor(inputProps = {}) {\n    this.props = Object.assign({}, PivotData.defaultProps, inputProps);\n    PropTypes.checkPropTypes(\n      PivotData.propTypes,\n      this.props,\n      'prop',\n      'PivotData'\n    );\n\n    this.aggregator = this.props.aggregators[this.props.aggregatorName](\n      this.props.vals\n    );\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(\n      this.props.data,\n      this.props.derivedAttributes,\n      record => {\n        if (this.filter(record)) {\n          this.processRecord(record);\n        }\n      }\n    );\n  }\n\n  filter(record) {\n    for (const k in this.props.valueFilter) {\n      if (record[k] in this.props.valueFilter[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  forEachMatchingRecord(criteria, callback) {\n    return PivotData.forEachRecord(\n      this.props.data,\n      this.props.derivedAttributes,\n      record => {\n        if (!this.filter(record)) {\n          return;\n        }\n        for (const k in criteria) {\n          const v = criteria[k];\n          if (v !== (k in record ? record[k] : 'null')) {\n            return;\n          }\n        }\n        callback(record);\n      }\n    );\n  }\n\n  arrSort(attrs) {\n    let a;\n    const sortersArr = (() => {\n      const result = [];\n      for (a of Array.from(attrs)) {\n        result.push(getSort(this.props.sorters, a));\n      }\n      return result;\n    })();\n    return function(a, b) {\n      for (const i of Object.keys(sortersArr || {})) {\n        const sorter = sortersArr[i];\n        const comparison = sorter(a[i], b[i]);\n        if (comparison !== 0) {\n          return comparison;\n        }\n      }\n      return 0;\n    };\n  }\n\n  sortKeys() {\n    if (!this.sorted) {\n      this.sorted = true;\n      const v = (r, c) => this.getAggregator(r, c).value();\n      switch (this.props.rowOrder) {\n        case 'value_a_to_z':\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\n          break;\n        case 'value_z_to_a':\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\n          break;\n        default:\n          this.rowKeys.sort(this.arrSort(this.props.rows));\n      }\n      switch (this.props.colOrder) {\n        case 'value_a_to_z':\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\n          break;\n        case 'value_z_to_a':\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\n          break;\n        default:\n          this.colKeys.sort(this.arrSort(this.props.cols));\n      }\n    }\n  }\n\n  getColKeys() {\n    this.sortKeys();\n    return this.colKeys;\n  }\n\n  getRowKeys() {\n    this.sortKeys();\n    return this.rowKeys;\n  }\n\n  processRecord(record) {\n    // this code is called in a tight loop\n    const colKey = [];\n    const rowKey = [];\n    for (const x of Array.from(this.props.cols)) {\n      colKey.push(x in record ? record[x] : 'null');\n    }\n    for (const x of Array.from(this.props.rows)) {\n      rowKey.push(x in record ? record[x] : 'null');\n    }\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\n    const flatColKey = colKey.join(String.fromCharCode(0));\n\n    this.allTotal.push(record);\n\n    if (rowKey.length !== 0) {\n      if (!this.rowTotals[flatRowKey]) {\n        this.rowKeys.push(rowKey);\n        this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n      }\n      this.rowTotals[flatRowKey].push(record);\n    }\n\n    if (colKey.length !== 0) {\n      if (!this.colTotals[flatColKey]) {\n        this.colKeys.push(colKey);\n        this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n      }\n      this.colTotals[flatColKey].push(record);\n    }\n\n    if (colKey.length !== 0 && rowKey.length !== 0) {\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      if (!this.tree[flatRowKey][flatColKey]) {\n        this.tree[flatRowKey][flatColKey] = this.aggregator(\n          this,\n          rowKey,\n          colKey\n        );\n      }\n      this.tree[flatRowKey][flatColKey].push(record);\n    }\n  }\n\n  getAggregator(rowKey, colKey) {\n    let agg;\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\n    const flatColKey = colKey.join(String.fromCharCode(0));\n    if (rowKey.length === 0 && colKey.length === 0) {\n      agg = this.allTotal;\n    } else if (rowKey.length === 0) {\n      agg = this.colTotals[flatColKey];\n    } else if (colKey.length === 0) {\n      agg = this.rowTotals[flatRowKey];\n    } else {\n      agg = this.tree[flatRowKey][flatColKey];\n    }\n    return (\n      agg || {\n        value() {\n          return null;\n        },\n        format() {\n          return '';\n        },\n      }\n    );\n  }\n}\n\n// can handle arrays or jQuery selections of tables\nPivotData.forEachRecord = function(input, derivedAttributes, f) {\n  let addRecord, record;\n  if (Object.getOwnPropertyNames(derivedAttributes).length === 0) {\n    addRecord = f;\n  } else {\n    addRecord = function(record) {\n      for (const k in derivedAttributes) {\n        const derived = derivedAttributes[k](record);\n        if (derived !== null) {\n          record[k] = derived;\n        }\n      }\n      return f(record);\n    };\n  }\n\n  // if it's a function, have it call us back\n  if (typeof input === 'function') {\n    return input(addRecord);\n  } else if (Array.isArray(input)) {\n    if (Array.isArray(input[0])) {\n      // array of arrays\n      return (() => {\n        const result = [];\n        for (const i of Object.keys(input || {})) {\n          const compactRecord = input[i];\n          if (i > 0) {\n            record = {};\n            for (const j of Object.keys(input[0] || {})) {\n              const k = input[0][j];\n              record[k] = compactRecord[j];\n            }\n            result.push(addRecord(record));\n          }\n        }\n        return result;\n      })();\n    }\n\n    // array of objects\n    return (() => {\n      const result1 = [];\n      for (record of Array.from(input)) {\n        result1.push(addRecord(record));\n      }\n      return result1;\n    })();\n  }\n  throw new Error('unknown input format');\n};\n\nPivotData.defaultProps = {\n  aggregators: aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  valueFilter: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n  derivedAttributes: {},\n};\n\nPivotData.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func])\n    .isRequired,\n  aggregatorName: PropTypes.string,\n  cols: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.arrayOf(PropTypes.string),\n  vals: PropTypes.arrayOf(PropTypes.string),\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\n  sorters: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.objectOf(PropTypes.func),\n  ]),\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\n  rowOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n  colOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n};\n\nexport {\n  aggregatorTemplates,\n  aggregators,\n  derivers,\n  locales,\n  naturalSort,\n  numberFormat,\n  getSort,\n  sortAs,\n  PivotData,\n};\n"]},"metadata":{},"sourceType":"script"}