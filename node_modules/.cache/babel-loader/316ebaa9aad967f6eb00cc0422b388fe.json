{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\owp\\\\src\\\\components\\\\Go\\\\GoDiagram.js\";\nimport * as go from 'gojs';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nvar $ = go.GraphObject.make;\n\nfunction init(id, model) {\n  var myDiagram;\n  myDiagram = $(go.Diagram, id, // must name or refer to the DIV HTML element\n  {\n    LinkDrawn: showLinkLabel,\n    // this DiagramEvent listener is defined below\n    LinkRelinked: showLinkLabel,\n    'undoManager.isEnabled': true // enable undo & redo\n\n  }); // when the document is modified, add a \"*\" to the title and enable the \"Save\" button\n\n  myDiagram.addDiagramListener('Modified', function (e) {\n    var button = document.getElementById('SaveButton');\n    if (button) button.disabled = !myDiagram.isModified;\n    var idx = document.title.indexOf('*');\n\n    if (myDiagram.isModified) {\n      if (idx < 0) document.title += '*';\n    } else {\n      if (idx >= 0) document.title = document.title.substr(0, idx);\n    }\n  }); // helper definitions for node templates\n\n  function nodeStyle() {\n    return [// The Node.location comes from the \"loc\" property of the node data,\n    // converted by the Point.parse static method.\n    // If the Node.location is changed, it updates the \"loc\" property of the node data,\n    // converting back using the Point.stringify static method.\n    new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify), {\n      // the Node.location is at the center of each node\n      locationSpot: go.Spot.Center\n    }];\n  } // Define a function for creating a \"port\" that is normally transparent.\n  // The \"name\" is used as the GraphObject.portId,\n  // the \"align\" is used to determine where to position the port relative to the body of the node,\n  // the \"spot\" is used to control how links connect with the port and whether the port\n  // stretches along the side of the node,\n  // and the boolean \"output\" and \"input\" arguments control whether the user can draw links from or to the port.\n\n\n  function makePort(name, align, spot, output, input) {\n    var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom); // the port is basically just a transparent rectangle that stretches along the side of the node,\n    // and becomes colored when the mouse passes over it\n\n    return $(go.Shape, {\n      fill: 'transparent',\n      // changed to a color in the mouseEnter event handler\n      strokeWidth: 0,\n      // no stroke\n      width: horizontal ? NaN : 8,\n      // if not stretching horizontally, just 8 wide\n      height: !horizontal ? NaN : 8,\n      // if not stretching vertically, just 8 tall\n      alignment: align,\n      // align the port on the main Shape\n      stretch: horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical,\n      portId: name,\n      // declare this object to be a \"port\"\n      fromSpot: spot,\n      // declare where links may connect at this port\n      fromLinkable: output,\n      // declare whether the user may draw links from here\n      toSpot: spot,\n      // declare where links may connect at this port\n      toLinkable: input,\n      // declare whether the user may draw links to here\n      cursor: 'pointer',\n      // show a different cursor to indicate potential link point\n      mouseEnter: function mouseEnter(e, port) {\n        // the PORT argument will be this Shape\n        if (!e.diagram.isReadOnly) port.fill = 'rgba(255,0,255,0.5)';\n      },\n      mouseLeave: function mouseLeave(e, port) {\n        port.fill = 'transparent';\n      }\n    });\n  }\n\n  function textStyle() {\n    return {\n      font: 'bold 11pt Helvetica, Arial, sans-serif',\n      stroke: 'whitesmoke'\n    };\n  } // define the Node templates for regular nodes\n\n\n  myDiagram.nodeTemplateMap.add('', // the default category\n  $(go.Node, 'Table', nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n  $(go.Panel, 'Auto', $(go.Shape, 'Rectangle', {\n    fill: '#00A9C9',\n    strokeWidth: 0\n  }, new go.Binding('figure', 'figure')), $(go.TextBlock, textStyle(), {\n    margin: 8,\n    maxSize: new go.Size(160, NaN),\n    wrap: go.TextBlock.WrapFit,\n    editable: true\n  }, new go.Binding('text').makeTwoWay())), // four named ports, one on each side:\n  makePort('T', go.Spot.Top, go.Spot.TopSide, false, true), makePort('L', go.Spot.Left, go.Spot.LeftSide, true, true), makePort('R', go.Spot.Right, go.Spot.RightSide, true, true), makePort('B', go.Spot.Bottom, go.Spot.BottomSide, true, false)));\n  myDiagram.nodeTemplateMap.add('Conditional', $(go.Node, 'Table', nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n  $(go.Panel, 'Auto', $(go.Shape, 'Diamond', {\n    fill: '#00A9C9',\n    strokeWidth: 0\n  }, new go.Binding('figure', 'figure')), $(go.TextBlock, textStyle(), {\n    margin: 8,\n    maxSize: new go.Size(160, NaN),\n    wrap: go.TextBlock.WrapFit,\n    editable: true\n  }, new go.Binding('text').makeTwoWay())), // four named ports, one on each side:\n  makePort('T', go.Spot.Top, go.Spot.Top, false, true), makePort('L', go.Spot.Left, go.Spot.Left, true, true), makePort('R', go.Spot.Right, go.Spot.Right, true, true), makePort('B', go.Spot.Bottom, go.Spot.Bottom, true, false)));\n  myDiagram.nodeTemplateMap.add('Start', $(go.Node, 'Table', nodeStyle(), $(go.Panel, 'Auto', $(go.Shape, 'Circle', {\n    minSize: new go.Size(40, 40),\n    fill: '#79C900',\n    strokeWidth: 0\n  }), $(go.TextBlock, 'Start', textStyle(), new go.Binding('text'))), // three named ports, one on each side except the top, all output only:\n  makePort('L', go.Spot.Left, go.Spot.Left, true, false), makePort('R', go.Spot.Right, go.Spot.Right, true, false), makePort('B', go.Spot.Bottom, go.Spot.Bottom, true, false)));\n  myDiagram.nodeTemplateMap.add('End', $(go.Node, 'Table', nodeStyle(), $(go.Panel, 'Auto', $(go.Shape, 'Circle', {\n    minSize: new go.Size(40, 40),\n    fill: '#DC3C00',\n    strokeWidth: 0\n  }), $(go.TextBlock, 'End', textStyle(), new go.Binding('text'))), // three named ports, one on each side except the bottom, all input only:\n  makePort('T', go.Spot.Top, go.Spot.Top, false, true), makePort('L', go.Spot.Left, go.Spot.Left, false, true), makePort('R', go.Spot.Right, go.Spot.Right, false, true))); // taken from ../extensions/Figures.js:\n\n  go.Shape.defineFigureGenerator('File', function (shape, w, h) {\n    var geo = new go.Geometry();\n    var fig = new go.PathFigure(0, 0, true); // starting point\n\n    geo.add(fig);\n    fig.add(new go.PathSegment(go.PathSegment.Line, 0.75 * w, 0));\n    fig.add(new go.PathSegment(go.PathSegment.Line, w, 0.25 * h));\n    fig.add(new go.PathSegment(go.PathSegment.Line, w, h));\n    fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());\n    var fig2 = new go.PathFigure(0.75 * w, 0, false);\n    geo.add(fig2); // The Fold\n\n    fig2.add(new go.PathSegment(go.PathSegment.Line, 0.75 * w, 0.25 * h));\n    fig2.add(new go.PathSegment(go.PathSegment.Line, w, 0.25 * h));\n    geo.spot1 = new go.Spot(0, 0.25);\n    geo.spot2 = go.Spot.BottomRight;\n    return geo;\n  });\n  myDiagram.nodeTemplateMap.add('Comment', $(go.Node, 'Auto', nodeStyle(), $(go.Shape, 'File', {\n    fill: '#DEE0A3',\n    strokeWidth: 0\n  }), $(go.TextBlock, textStyle(), {\n    margin: 5,\n    maxSize: new go.Size(200, NaN),\n    wrap: go.TextBlock.WrapFit,\n    textAlign: 'center',\n    editable: true,\n    font: 'bold 12pt Helvetica, Arial, sans-serif',\n    stroke: '#454545'\n  }, new go.Binding('text').makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n  )); // replace the default Link template in the linkTemplateMap\n\n  myDiagram.linkTemplate = $(go.Link, // the whole link panel\n  {\n    routing: go.Link.AvoidsNodes,\n    curve: go.Link.JumpOver,\n    corner: 5,\n    toShortLength: 4,\n    relinkableFrom: true,\n    relinkableTo: true,\n    reshapable: true,\n    resegmentable: true,\n    // mouse-overs subtly highlight links:\n    mouseEnter: function mouseEnter(e, link) {\n      link.findObject('HIGHLIGHT').stroke = 'rgba(30,144,255,0.2)';\n    },\n    mouseLeave: function mouseLeave(e, link) {\n      link.findObject('HIGHLIGHT').stroke = 'transparent';\n    },\n    selectionAdorned: false\n  }, new go.Binding('points').makeTwoWay(), $(go.Shape, // the highlight shape, normally transparent\n  {\n    isPanelMain: true,\n    strokeWidth: 8,\n    stroke: 'transparent',\n    name: 'HIGHLIGHT'\n  }), $(go.Shape, // the link path shape\n  {\n    isPanelMain: true,\n    stroke: 'gray',\n    strokeWidth: 2\n  }, new go.Binding('stroke', 'isSelected', function (sel) {\n    return sel ? 'dodgerblue' : 'gray';\n  }).ofObject()), $(go.Shape, // the arrowhead\n  {\n    toArrow: 'standard',\n    strokeWidth: 0,\n    fill: 'gray'\n  }), $(go.Panel, 'Auto', // the link label, normally not visible\n  {\n    visible: false,\n    name: 'LABEL',\n    segmentIndex: 2,\n    segmentFraction: 0.5\n  }, new go.Binding('visible', 'visible').makeTwoWay(), $(go.Shape, 'RoundedRectangle', // the label shape\n  {\n    fill: '#F8F8F8',\n    strokeWidth: 0\n  }), $(go.TextBlock, 'Yes', // the label\n  {\n    textAlign: 'center',\n    font: '10pt helvetica, arial, sans-serif',\n    stroke: '#333333',\n    editable: true\n  }, new go.Binding('text').makeTwoWay()))); // Make link labels visible if coming out of a \"conditional\" node.\n  // This listener is called by the \"LinkDrawn\" and \"LinkRelinked\" DiagramEvents.\n\n  function showLinkLabel(e) {\n    var label = e.subject.findObject('LABEL');\n    if (label !== null) label.visible = e.subject.fromNode.data.category === 'Conditional';\n  } // temporary links used by LinkingTool and RelinkingTool are also orthogonal:\n\n\n  myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;\n  myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;\n  myDiagram.model = go.Model.fromJson(JSON.stringify(model));\n  return myDiagram;\n}\n\nfunction GoDiagram(_ref) {\n  var model = _ref.model,\n      onLoad = _ref.onLoad,\n      id = _ref.id,\n      domProps = _objectWithoutProperties(_ref, [\"model\", \"onLoad\", \"id\"]);\n\n  useEffect(function () {\n    var diagram = init(id, model);\n    onLoad(diagram);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    id: id\n  }, domProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 12\n    }\n  }));\n}\n\nGoDiagram.propTypes = {\n  model: PropTypes.object.isRequired\n};\nexport default GoDiagram;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/components/Go/GoDiagram.js"],"names":["go","PropTypes","React","useEffect","$","GraphObject","make","init","id","model","myDiagram","Diagram","LinkDrawn","showLinkLabel","LinkRelinked","addDiagramListener","e","button","document","getElementById","disabled","isModified","idx","title","indexOf","substr","nodeStyle","Binding","Point","parse","makeTwoWay","stringify","locationSpot","Spot","Center","makePort","name","align","spot","output","input","horizontal","equals","Top","Bottom","Shape","fill","strokeWidth","width","NaN","height","alignment","stretch","Horizontal","Vertical","portId","fromSpot","fromLinkable","toSpot","toLinkable","cursor","mouseEnter","port","diagram","isReadOnly","mouseLeave","textStyle","font","stroke","nodeTemplateMap","add","Node","Panel","TextBlock","margin","maxSize","Size","wrap","WrapFit","editable","TopSide","Left","LeftSide","Right","RightSide","BottomSide","minSize","defineFigureGenerator","shape","w","h","geo","Geometry","fig","PathFigure","PathSegment","Line","close","fig2","spot1","spot2","BottomRight","textAlign","linkTemplate","Link","routing","AvoidsNodes","curve","JumpOver","corner","toShortLength","relinkableFrom","relinkableTo","reshapable","resegmentable","link","findObject","selectionAdorned","isPanelMain","sel","ofObject","toArrow","visible","segmentIndex","segmentFraction","label","subject","fromNode","data","category","toolManager","linkingTool","temporaryLink","Orthogonal","relinkingTool","Model","fromJson","JSON","GoDiagram","onLoad","domProps","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import * as go from 'gojs';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useEffect } from 'react';\r\n\r\nconst $ = go.GraphObject.make;\r\n\r\nfunction init(id, model) {\r\n    let myDiagram;\r\n\r\n    myDiagram = $(\r\n        go.Diagram,\r\n        id, // must name or refer to the DIV HTML element\r\n        {\r\n            LinkDrawn: showLinkLabel, // this DiagramEvent listener is defined below\r\n            LinkRelinked: showLinkLabel,\r\n            'undoManager.isEnabled': true, // enable undo & redo\r\n        }\r\n    );\r\n    // when the document is modified, add a \"*\" to the title and enable the \"Save\" button\r\n    myDiagram.addDiagramListener('Modified', function(e) {\r\n        const button = document.getElementById('SaveButton');\r\n        if (button) button.disabled = !myDiagram.isModified;\r\n        const idx = document.title.indexOf('*');\r\n        if (myDiagram.isModified) {\r\n            if (idx < 0) document.title += '*';\r\n        } else {\r\n            if (idx >= 0) document.title = document.title.substr(0, idx);\r\n        }\r\n    });\r\n    // helper definitions for node templates\r\n    function nodeStyle() {\r\n        return [\r\n            // The Node.location comes from the \"loc\" property of the node data,\r\n            // converted by the Point.parse static method.\r\n            // If the Node.location is changed, it updates the \"loc\" property of the node data,\r\n            // converting back using the Point.stringify static method.\r\n            new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n            ),\r\n            {\r\n                // the Node.location is at the center of each node\r\n                locationSpot: go.Spot.Center,\r\n            },\r\n        ];\r\n    }\r\n    // Define a function for creating a \"port\" that is normally transparent.\r\n    // The \"name\" is used as the GraphObject.portId,\r\n    // the \"align\" is used to determine where to position the port relative to the body of the node,\r\n    // the \"spot\" is used to control how links connect with the port and whether the port\r\n    // stretches along the side of the node,\r\n    // and the boolean \"output\" and \"input\" arguments control whether the user can draw links from or to the port.\r\n    function makePort(name, align, spot, output, input) {\r\n        const horizontal =\r\n            align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);\r\n        // the port is basically just a transparent rectangle that stretches along the side of the node,\r\n        // and becomes colored when the mouse passes over it\r\n        return $(go.Shape, {\r\n            fill: 'transparent', // changed to a color in the mouseEnter event handler\r\n            strokeWidth: 0, // no stroke\r\n            width: horizontal ? NaN : 8, // if not stretching horizontally, just 8 wide\r\n            height: !horizontal ? NaN : 8, // if not stretching vertically, just 8 tall\r\n            alignment: align, // align the port on the main Shape\r\n            stretch: horizontal\r\n                ? go.GraphObject.Horizontal\r\n                : go.GraphObject.Vertical,\r\n            portId: name, // declare this object to be a \"port\"\r\n            fromSpot: spot, // declare where links may connect at this port\r\n            fromLinkable: output, // declare whether the user may draw links from here\r\n            toSpot: spot, // declare where links may connect at this port\r\n            toLinkable: input, // declare whether the user may draw links to here\r\n            cursor: 'pointer', // show a different cursor to indicate potential link point\r\n            mouseEnter: function(e, port) {\r\n                // the PORT argument will be this Shape\r\n                if (!e.diagram.isReadOnly) port.fill = 'rgba(255,0,255,0.5)';\r\n            },\r\n            mouseLeave: function(e, port) {\r\n                port.fill = 'transparent';\r\n            },\r\n        });\r\n    }\r\n    function textStyle() {\r\n        return {\r\n            font: 'bold 11pt Helvetica, Arial, sans-serif',\r\n            stroke: 'whitesmoke',\r\n        };\r\n    }\r\n    // define the Node templates for regular nodes\r\n    myDiagram.nodeTemplateMap.add(\r\n        '', // the default category\r\n        $(\r\n            go.Node,\r\n            'Table',\r\n            nodeStyle(),\r\n            // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\r\n            $(\r\n                go.Panel,\r\n                'Auto',\r\n                $(\r\n                    go.Shape,\r\n                    'Rectangle',\r\n                    { fill: '#00A9C9', strokeWidth: 0 },\r\n                    new go.Binding('figure', 'figure')\r\n                ),\r\n                $(\r\n                    go.TextBlock,\r\n                    textStyle(),\r\n                    {\r\n                        margin: 8,\r\n                        maxSize: new go.Size(160, NaN),\r\n                        wrap: go.TextBlock.WrapFit,\r\n                        editable: true,\r\n                    },\r\n                    new go.Binding('text').makeTwoWay()\r\n                )\r\n            ),\r\n            // four named ports, one on each side:\r\n            makePort('T', go.Spot.Top, go.Spot.TopSide, false, true),\r\n            makePort('L', go.Spot.Left, go.Spot.LeftSide, true, true),\r\n            makePort('R', go.Spot.Right, go.Spot.RightSide, true, true),\r\n            makePort('B', go.Spot.Bottom, go.Spot.BottomSide, true, false)\r\n        )\r\n    );\r\n    myDiagram.nodeTemplateMap.add(\r\n        'Conditional',\r\n        $(\r\n            go.Node,\r\n            'Table',\r\n            nodeStyle(),\r\n            // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\r\n            $(\r\n                go.Panel,\r\n                'Auto',\r\n                $(\r\n                    go.Shape,\r\n                    'Diamond',\r\n                    { fill: '#00A9C9', strokeWidth: 0 },\r\n                    new go.Binding('figure', 'figure')\r\n                ),\r\n                $(\r\n                    go.TextBlock,\r\n                    textStyle(),\r\n                    {\r\n                        margin: 8,\r\n                        maxSize: new go.Size(160, NaN),\r\n                        wrap: go.TextBlock.WrapFit,\r\n                        editable: true,\r\n                    },\r\n                    new go.Binding('text').makeTwoWay()\r\n                )\r\n            ),\r\n            // four named ports, one on each side:\r\n            makePort('T', go.Spot.Top, go.Spot.Top, false, true),\r\n            makePort('L', go.Spot.Left, go.Spot.Left, true, true),\r\n            makePort('R', go.Spot.Right, go.Spot.Right, true, true),\r\n            makePort('B', go.Spot.Bottom, go.Spot.Bottom, true, false)\r\n        )\r\n    );\r\n    myDiagram.nodeTemplateMap.add(\r\n        'Start',\r\n        $(\r\n            go.Node,\r\n            'Table',\r\n            nodeStyle(),\r\n            $(\r\n                go.Panel,\r\n                'Auto',\r\n                $(go.Shape, 'Circle', {\r\n                    minSize: new go.Size(40, 40),\r\n                    fill: '#79C900',\r\n                    strokeWidth: 0,\r\n                }),\r\n                $(go.TextBlock, 'Start', textStyle(), new go.Binding('text'))\r\n            ),\r\n            // three named ports, one on each side except the top, all output only:\r\n            makePort('L', go.Spot.Left, go.Spot.Left, true, false),\r\n            makePort('R', go.Spot.Right, go.Spot.Right, true, false),\r\n            makePort('B', go.Spot.Bottom, go.Spot.Bottom, true, false)\r\n        )\r\n    );\r\n    myDiagram.nodeTemplateMap.add(\r\n        'End',\r\n        $(\r\n            go.Node,\r\n            'Table',\r\n            nodeStyle(),\r\n            $(\r\n                go.Panel,\r\n                'Auto',\r\n                $(go.Shape, 'Circle', {\r\n                    minSize: new go.Size(40, 40),\r\n                    fill: '#DC3C00',\r\n                    strokeWidth: 0,\r\n                }),\r\n                $(go.TextBlock, 'End', textStyle(), new go.Binding('text'))\r\n            ),\r\n            // three named ports, one on each side except the bottom, all input only:\r\n            makePort('T', go.Spot.Top, go.Spot.Top, false, true),\r\n            makePort('L', go.Spot.Left, go.Spot.Left, false, true),\r\n            makePort('R', go.Spot.Right, go.Spot.Right, false, true)\r\n        )\r\n    );\r\n    // taken from ../extensions/Figures.js:\r\n    go.Shape.defineFigureGenerator('File', function(shape, w, h) {\r\n        const geo = new go.Geometry();\r\n        const fig = new go.PathFigure(0, 0, true); // starting point\r\n        geo.add(fig);\r\n        fig.add(new go.PathSegment(go.PathSegment.Line, 0.75 * w, 0));\r\n        fig.add(new go.PathSegment(go.PathSegment.Line, w, 0.25 * h));\r\n        fig.add(new go.PathSegment(go.PathSegment.Line, w, h));\r\n        fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());\r\n        const fig2 = new go.PathFigure(0.75 * w, 0, false);\r\n        geo.add(fig2);\r\n        // The Fold\r\n        fig2.add(new go.PathSegment(go.PathSegment.Line, 0.75 * w, 0.25 * h));\r\n        fig2.add(new go.PathSegment(go.PathSegment.Line, w, 0.25 * h));\r\n        geo.spot1 = new go.Spot(0, 0.25);\r\n        geo.spot2 = go.Spot.BottomRight;\r\n        return geo;\r\n    });\r\n    myDiagram.nodeTemplateMap.add(\r\n        'Comment',\r\n        $(\r\n            go.Node,\r\n            'Auto',\r\n            nodeStyle(),\r\n            $(go.Shape, 'File', { fill: '#DEE0A3', strokeWidth: 0 }),\r\n            $(\r\n                go.TextBlock,\r\n                textStyle(),\r\n                {\r\n                    margin: 5,\r\n                    maxSize: new go.Size(200, NaN),\r\n                    wrap: go.TextBlock.WrapFit,\r\n                    textAlign: 'center',\r\n                    editable: true,\r\n                    font: 'bold 12pt Helvetica, Arial, sans-serif',\r\n                    stroke: '#454545',\r\n                },\r\n                new go.Binding('text').makeTwoWay()\r\n            )\r\n            // no ports, because no links are allowed to connect with a comment\r\n        )\r\n    );\r\n    // replace the default Link template in the linkTemplateMap\r\n    myDiagram.linkTemplate = $(\r\n        go.Link, // the whole link panel\r\n        {\r\n            routing: go.Link.AvoidsNodes,\r\n            curve: go.Link.JumpOver,\r\n            corner: 5,\r\n            toShortLength: 4,\r\n            relinkableFrom: true,\r\n            relinkableTo: true,\r\n            reshapable: true,\r\n            resegmentable: true,\r\n            // mouse-overs subtly highlight links:\r\n            mouseEnter: function(e, link) {\r\n                link.findObject('HIGHLIGHT').stroke = 'rgba(30,144,255,0.2)';\r\n            },\r\n            mouseLeave: function(e, link) {\r\n                link.findObject('HIGHLIGHT').stroke = 'transparent';\r\n            },\r\n            selectionAdorned: false,\r\n        },\r\n        new go.Binding('points').makeTwoWay(),\r\n        $(\r\n            go.Shape, // the highlight shape, normally transparent\r\n            {\r\n                isPanelMain: true,\r\n                strokeWidth: 8,\r\n                stroke: 'transparent',\r\n                name: 'HIGHLIGHT',\r\n            }\r\n        ),\r\n        $(\r\n            go.Shape, // the link path shape\r\n            { isPanelMain: true, stroke: 'gray', strokeWidth: 2 },\r\n            new go.Binding('stroke', 'isSelected', function(sel) {\r\n                return sel ? 'dodgerblue' : 'gray';\r\n            }).ofObject()\r\n        ),\r\n        $(\r\n            go.Shape, // the arrowhead\r\n            { toArrow: 'standard', strokeWidth: 0, fill: 'gray' }\r\n        ),\r\n        $(\r\n            go.Panel,\r\n            'Auto', // the link label, normally not visible\r\n            {\r\n                visible: false,\r\n                name: 'LABEL',\r\n                segmentIndex: 2,\r\n                segmentFraction: 0.5,\r\n            },\r\n            new go.Binding('visible', 'visible').makeTwoWay(),\r\n            $(\r\n                go.Shape,\r\n                'RoundedRectangle', // the label shape\r\n                { fill: '#F8F8F8', strokeWidth: 0 }\r\n            ),\r\n            $(\r\n                go.TextBlock,\r\n                'Yes', // the label\r\n                {\r\n                    textAlign: 'center',\r\n                    font: '10pt helvetica, arial, sans-serif',\r\n                    stroke: '#333333',\r\n                    editable: true,\r\n                },\r\n                new go.Binding('text').makeTwoWay()\r\n            )\r\n        )\r\n    );\r\n\r\n    // Make link labels visible if coming out of a \"conditional\" node.\r\n    // This listener is called by the \"LinkDrawn\" and \"LinkRelinked\" DiagramEvents.\r\n    function showLinkLabel(e) {\r\n        let label = e.subject.findObject('LABEL');\r\n        if (label !== null)\r\n            label.visible = e.subject.fromNode.data.category === 'Conditional';\r\n    }\r\n    // temporary links used by LinkingTool and RelinkingTool are also orthogonal:\r\n    myDiagram.toolManager.linkingTool.temporaryLink.routing =\r\n        go.Link.Orthogonal;\r\n    myDiagram.toolManager.relinkingTool.temporaryLink.routing =\r\n        go.Link.Orthogonal;\r\n\r\n    myDiagram.model = go.Model.fromJson(JSON.stringify(model));\r\n\r\n    return myDiagram;\r\n}\r\n\r\nfunction GoDiagram({ model, onLoad, id, ...domProps }) {\r\n    useEffect(() => {\r\n        const diagram = init(id, model);\r\n        onLoad(diagram);\r\n    }, []);\r\n\r\n    return <div id={id} {...domProps} />;\r\n}\r\n\r\nGoDiagram.propTypes = {\r\n    model: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default GoDiagram;\r\n"]},"metadata":{},"sourceType":"module"}