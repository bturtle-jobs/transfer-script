{"ast":null,"code":"\"use strict\";\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nvar brackets = {\n  /**\n     * Parse string to nodes tree\n     */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n\n    for (var i = 0; i < str.length; i++) {\n      var sym = str[i];\n\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n\n      current[current.length - 1] += sym;\n    }\n\n    return stack[0];\n  },\n\n  /**\n     * Generate output string by nodes tree\n     */\n  stringify: function stringify(ast) {\n    var result = '';\n\n    for (var _iterator = ast, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var i = _ref;\n\n      if (typeof i === 'object') {\n        result += \"(\" + brackets.stringify(i) + \")\";\n        continue;\n      }\n\n      result += i;\n    }\n\n    return result;\n  }\n};\nmodule.exports = brackets;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/autoprefixer/lib/brackets.js"],"names":["last","array","length","brackets","parse","str","current","stack","i","sym","push","pop","stringify","ast","result","_iterator","_isArray","Array","isArray","_i","Symbol","iterator","_ref","next","done","value","module","exports"],"mappings":"AAAA;;AAEA,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACnB,SAAOA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,IAAIC,QAAQ,GAAG;AACb;AACF;AACA;AACEC,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,GAAf,EAAoB;AACzB,QAAIC,OAAO,GAAG,CAAC,EAAD,CAAd;AACA,QAAIC,KAAK,GAAG,CAACD,OAAD,CAAZ;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACH,MAAxB,EAAgCM,CAAC,EAAjC,EAAqC;AACnC,UAAIC,GAAG,GAAGJ,GAAG,CAACG,CAAD,CAAb;;AAEA,UAAIC,GAAG,KAAK,GAAZ,EAAiB;AACfH,QAAAA,OAAO,GAAG,CAAC,EAAD,CAAV;AACAN,QAAAA,IAAI,CAACO,KAAD,CAAJ,CAAYG,IAAZ,CAAiBJ,OAAjB;AACAC,QAAAA,KAAK,CAACG,IAAN,CAAWJ,OAAX;AACA;AACD;;AAED,UAAIG,GAAG,KAAK,GAAZ,EAAiB;AACfF,QAAAA,KAAK,CAACI,GAAN;AACAL,QAAAA,OAAO,GAAGN,IAAI,CAACO,KAAD,CAAd;AACAD,QAAAA,OAAO,CAACI,IAAR,CAAa,EAAb;AACA;AACD;;AAEDJ,MAAAA,OAAO,CAACA,OAAO,CAACJ,MAAR,GAAiB,CAAlB,CAAP,IAA+BO,GAA/B;AACD;;AAED,WAAOF,KAAK,CAAC,CAAD,CAAZ;AACD,GA7BY;;AA+Bb;AACF;AACA;AACEK,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACjC,QAAIC,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,SAAS,GAAGF,GAAhB,EAAqBG,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAhC,EAA0DI,EAAE,GAAG,CAA/D,EAAkEJ,SAAS,GAAGC,QAAQ,GAAGD,SAAH,GAAeA,SAAS,CAACK,MAAM,CAACC,QAAR,CAAT,EAA1G,IAA0I;AACxI,UAAIC,IAAJ;;AAEA,UAAIN,QAAJ,EAAc;AACZ,YAAIG,EAAE,IAAIJ,SAAS,CAACb,MAApB,EAA4B;AAC5BoB,QAAAA,IAAI,GAAGP,SAAS,CAACI,EAAE,EAAH,CAAhB;AACD,OAHD,MAGO;AACLA,QAAAA,EAAE,GAAGJ,SAAS,CAACQ,IAAV,EAAL;AACA,YAAIJ,EAAE,CAACK,IAAP,EAAa;AACbF,QAAAA,IAAI,GAAGH,EAAE,CAACM,KAAV;AACD;;AAED,UAAIjB,CAAC,GAAGc,IAAR;;AAEA,UAAI,OAAOd,CAAP,KAAa,QAAjB,EAA2B;AACzBM,QAAAA,MAAM,IAAI,MAAMX,QAAQ,CAACS,SAAT,CAAmBJ,CAAnB,CAAN,GAA8B,GAAxC;AACA;AACD;;AAEDM,MAAAA,MAAM,IAAIN,CAAV;AACD;;AAED,WAAOM,MAAP;AACD;AA5DY,CAAf;AA8DAY,MAAM,CAACC,OAAP,GAAiBxB,QAAjB","sourcesContent":["\"use strict\";\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nvar brackets = {\n  /**\n     * Parse string to nodes tree\n     */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n\n    for (var i = 0; i < str.length; i++) {\n      var sym = str[i];\n\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n\n      current[current.length - 1] += sym;\n    }\n\n    return stack[0];\n  },\n\n  /**\n     * Generate output string by nodes tree\n     */\n  stringify: function stringify(ast) {\n    var result = '';\n\n    for (var _iterator = ast, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var i = _ref;\n\n      if (typeof i === 'object') {\n        result += \"(\" + brackets.stringify(i) + \")\";\n        continue;\n      }\n\n      result += i;\n    }\n\n    return result;\n  }\n};\nmodule.exports = brackets;"]},"metadata":{},"sourceType":"script"}