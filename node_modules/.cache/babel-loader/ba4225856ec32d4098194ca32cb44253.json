{"ast":null,"code":"/**\r\n * Curve step line series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { CurveLineSeries, CurveLineSeriesDataItem } from \"./CurveLineSeries\";\nimport { DateAxis } from \"../../charts/axes/DateAxis\";\nimport { registry } from \"../../core/Registry\"; //import * as $math from \"../../core/utils/Math\";\n\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[CurveStepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar CurveStepLineSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(CurveStepLineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveStepLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurveStepLineSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return CurveStepLineSeriesDataItem;\n}(CurveLineSeriesDataItem);\n\nexport { CurveStepLineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link ICurveStepLineSeriesEvents} for a list of available Events\r\n * @see {@link ICurveStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar CurveStepLineSeries =\n/** @class */\nfunction (_super) {\n  __extends(CurveStepLineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveStepLineSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurveStepLineSeries\";\n    _this.startLocation = 0;\n    _this.endLocation = 1;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  CurveStepLineSeries.prototype.createDataItem = function () {\n    return new CurveStepLineSeriesDataItem();\n  };\n  /**\r\n   * [addPoints description]\r\n   *\r\n   * @ignore\r\n   * @todo Description\r\n   * @param points    [description]\r\n   * @param dataItem  [description]\r\n   * @param xField    [description]\r\n   * @param yField    [description]\r\n   * @param backwards [description]\r\n   */\n\n\n  CurveStepLineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\n    var startLocation = this.startLocation;\n    var endLocation = this.endLocation;\n\n    if (backwards) {\n      startLocation = this.endLocation;\n      endLocation = this.startLocation;\n    }\n\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n    var previousPosition = this._previousPosition;\n    var rangeX = {\n      start: xAxis.start,\n      end: xAxis.end\n    };\n    var rangeY = {\n      start: yAxis.start,\n      end: yAxis.end\n    };\n    var xRenderer = xAxis.renderer;\n\n    if (this.baseAxis == this.xAxis) {\n      var count = Math.ceil(this.xAxis.axisLength / xRenderer.precisionStep / (this.endIndex - this.startIndex)) + 2;\n      var step = Math.abs(endLocation - startLocation) / count; // this solves issues with missing values\n      // this is not done for when y is date axis due to unlikely situation\n\n      if (this.xAxis instanceof DateAxis) {\n        var index = dataItem.index;\n\n        if (backwards) {\n          var nextDataItem = this.dataItems.getIndex(index - 1);\n          var baseDuration = this.xAxis.baseDuration;\n\n          if (nextDataItem) {\n            var nextTime = nextDataItem.dateX.getTime();\n            var currentTime = dataItem.dateX.getTime();\n\n            if (nextTime < currentTime - baseDuration) {\n              endLocation -= (currentTime - nextTime) / baseDuration - 1;\n            }\n          }\n        } else {\n          var nextDataItem = this.dataItems.getIndex(index + 1);\n          var baseDuration = this.xAxis.baseDuration;\n\n          if (nextDataItem) {\n            var nextTime = nextDataItem.dateX.getTime();\n            var currentTime = dataItem.dateX.getTime();\n\n            if (nextTime > currentTime + baseDuration) {\n              endLocation += (nextTime - currentTime) / baseDuration - 1;\n            }\n          }\n        }\n      }\n\n      if (backwards) {\n        for (var i = startLocation; i >= endLocation; i = i - step) {\n          if (i < endLocation) {\n            i = endLocation;\n          }\n\n          points.push(this.getPoint(dataItem, xField, yField, i, dataItem.locations[yField]));\n        }\n\n        points.push(this.getPoint(dataItem, xField, yField, endLocation, dataItem.locations[yField]));\n      } else {\n        for (var i = startLocation; i <= endLocation; i = i + step) {\n          if (i > endLocation) {\n            i = endLocation;\n          }\n\n          points.push(this.getPoint(dataItem, xField, yField, i, dataItem.locations[yField]));\n        }\n\n        points.push(this.getPoint(dataItem, xField, yField, endLocation, dataItem.locations[yField]));\n      }\n    } else {\n      var positionX = xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\", rangeX);\n      var positionY = yAxis.getPositionY(dataItem, yField, startLocation, \"valueY\", rangeY);\n\n      if ($type.isNumber(previousPosition)) {\n        var count = Math.ceil(xAxis.axisLength / xRenderer.precisionStep * (positionX - previousPosition) / (xAxis.end - xAxis.start)) + 2;\n        var step = Math.abs((positionX - previousPosition) / count);\n\n        if (positionX > previousPosition) {\n          for (var i = previousPosition; i <= positionX; i = i + step) {\n            if (i > positionX) {\n              i = positionX;\n            }\n\n            points.push(xAxis.renderer.positionToPoint(i, positionY));\n          }\n        } else if (positionX < previousPosition) {\n          for (var i = previousPosition; i >= positionX; i = i - step) {\n            if (i < positionX) {\n              i = positionX;\n            }\n\n            points.push(xAxis.renderer.positionToPoint(i, positionY));\n          }\n        }\n      }\n\n      var startPoint = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], startLocation);\n\n      if (startPoint) {\n        points.push(startPoint);\n      }\n\n      var endPoint = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], endLocation);\n\n      if (endPoint) {\n        points.push(endPoint);\n      }\n\n      this._previousPosition = positionX;\n    }\n  };\n\n  Object.defineProperty(CurveStepLineSeries.prototype, \"startLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startLocation\");\n    },\n    //protected createSegment(): this[\"_segment\"] {\n    //\treturn new StepLineSeriesSegment();\n    //}\t\n\n    /**\r\n     * Relative location in cell where step should start.\r\n     *\r\n     * @default 0\r\n     * @param value Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurveStepLineSeries.prototype, \"endLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endLocation\");\n    },\n\n    /**\r\n     * Relative location in cell where step should end.\r\n     *\r\n     * @default 1\r\n     * @param value Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CurveStepLineSeries;\n}(CurveLineSeries);\n\nexport { CurveStepLineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurveStepLineSeries\"] = CurveStepLineSeries;\nregistry.registeredClasses[\"CurveStepLineSeriesDataItem\"] = CurveStepLineSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/CurveStepLineSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Curve step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CurveLineSeries, CurveLineSeriesDataItem, ICurveLineSeriesAdapters, ICurveLineSeriesDataFields, ICurveLineSeriesEvents, ICurveLineSeriesProperties } from \"./CurveLineSeries\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { StepLineSeriesSegment } from \"../../charts/series/StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { DateAxis } from \"../../charts/axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n//import * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurveStepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurveStepLineSeriesDataItem extends CurveLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurveStepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveStepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurveStepLineSeries]].\r\n */\r\nexport interface ICurveStepLineSeriesDataFields extends ICurveLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurveStepLineSeries]].\r\n */\r\nexport interface ICurveStepLineSeriesProperties extends ICurveLineSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location in cell where step should start.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location in cell where step should end.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurveStepLineSeries]].\r\n */\r\nexport interface ICurveStepLineSeriesEvents extends ICurveLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveStepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveStepLineSeriesAdapters extends ICurveLineSeriesAdapters, ICurveStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link ICurveStepLineSeriesEvents} for a list of available Events\r\n * @see {@link ICurveStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CurveStepLineSeries extends CurveLineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurveStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CurveStepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: CurveChart;\r\n\r\n\t/**\r\n\t * Defines type for segment.\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\tprotected _previousPosition: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveStepLineSeries\";\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CurveStepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\t\tif (backwards) {\r\n\t\t\tstartLocation = this.endLocation;\r\n\t\t\tendLocation = this.startLocation;\r\n\t\t}\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tlet previousPosition = this._previousPosition;\r\n\r\n\t\tlet rangeX = { start: xAxis.start, end: xAxis.end };\r\n\t\tlet rangeY = { start: yAxis.start, end: yAxis.end };\r\n\r\n\t\tlet xRenderer = <AxisRendererCurveX>xAxis.renderer;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet count = Math.ceil(this.xAxis.axisLength / xRenderer.precisionStep / (this.endIndex - this.startIndex)) + 2;\r\n\r\n\t\t\tlet step = Math.abs(endLocation - startLocation) / count;\r\n\r\n\t\t\t// this solves issues with missing values\r\n\t\t\t// this is not done for when y is date axis due to unlikely situation\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tlet index = dataItem.index;\r\n\t\t\t\tif (backwards) {\r\n\t\t\t\t\tlet nextDataItem = this.dataItems.getIndex(index - 1);\r\n\t\t\t\t\tlet baseDuration = this.xAxis.baseDuration;\r\n\r\n\t\t\t\t\tif (nextDataItem) {\r\n\t\t\t\t\t\tlet nextTime = nextDataItem.dateX.getTime();\r\n\t\t\t\t\t\tlet currentTime = dataItem.dateX.getTime()\r\n\t\t\t\t\t\tif (nextTime < currentTime - baseDuration) {\r\n\t\t\t\t\t\t\tendLocation -= (currentTime - nextTime) / baseDuration - 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet nextDataItem = this.dataItems.getIndex(index + 1);\r\n\t\t\t\t\tlet baseDuration = this.xAxis.baseDuration;\r\n\r\n\t\t\t\t\tif (nextDataItem) {\r\n\t\t\t\t\t\tlet nextTime = nextDataItem.dateX.getTime();\r\n\t\t\t\t\t\tlet currentTime = dataItem.dateX.getTime()\r\n\t\t\t\t\t\tif (nextTime > currentTime + baseDuration) {\r\n\t\t\t\t\t\t\tendLocation += (nextTime - currentTime) / baseDuration - 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (backwards) {\r\n\t\t\t\tfor (let i = startLocation; i >= endLocation; i = i - step) {\r\n\t\t\t\t\tif (i < endLocation) {\r\n\t\t\t\t\t\ti = endLocation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, i, dataItem.locations[yField]));\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, endLocation, dataItem.locations[yField]));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (let i = startLocation; i <= endLocation; i = i + step) {\r\n\t\t\t\t\tif (i > endLocation) {\r\n\t\t\t\t\t\ti = endLocation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, i, dataItem.locations[yField]));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, endLocation, dataItem.locations[yField]));\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet positionX = xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\", rangeX);\r\n\t\t\tlet positionY = yAxis.getPositionY(dataItem, yField, startLocation, \"valueY\", rangeY);\r\n\r\n\t\t\tif ($type.isNumber(previousPosition)) {\r\n\t\t\t\tlet count = Math.ceil((xAxis.axisLength / xRenderer.precisionStep) * (positionX - previousPosition) / (xAxis.end - xAxis.start)) + 2;\r\n\t\t\t\tlet step = Math.abs((positionX - previousPosition) / count);\r\n\r\n\t\t\t\tif (positionX > previousPosition) {\r\n\t\t\t\t\tfor (let i = previousPosition; i <= positionX; i = i + step) {\r\n\t\t\t\t\t\tif (i > positionX) {\r\n\t\t\t\t\t\t\ti = positionX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(i, positionY));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (positionX < previousPosition) {\r\n\t\t\t\t\tfor (let i = previousPosition; i >= positionX; i = i - step) {\r\n\t\t\t\t\t\tif (i < positionX) {\r\n\t\t\t\t\t\t\ti = positionX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(i, positionY));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet startPoint = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], startLocation);\r\n\t\t\tif (startPoint) {\r\n\t\t\t\tpoints.push(startPoint);\r\n\t\t\t}\r\n\t\t\tlet endPoint = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], endLocation);\r\n\t\t\tif (endPoint) {\r\n\t\t\t\tpoints.push(endPoint);\r\n\t\t\t}\r\n\r\n\t\t\tthis._previousPosition = positionX;\r\n\t\t}\r\n\t}\r\n\r\n\t//protected createSegment(): this[\"_segment\"] {\r\n\t//\treturn new StepLineSeriesSegment();\r\n\t//}\t\r\n\r\n\t/**\r\n\t * Relative location in cell where step should start.\r\n\t *\r\n\t * @default 0\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location in cell where step should end.\r\n\t *\r\n\t * @default 1\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveStepLineSeries\"] = CurveStepLineSeries;\r\nregistry.registeredClasses[\"CurveStepLineSeriesDataItem\"] = CurveStepLineSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}