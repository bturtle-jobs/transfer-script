{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Utilities = require('./Utilities');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // helper function for setting row/col-span in pivotTableRenderer\n\n\nvar spanSize = function spanSize(arr, i, j) {\n  var x = void 0;\n\n  if (i !== 0) {\n    var asc = void 0,\n        end = void 0;\n    var noDraw = true;\n\n    for (x = 0, end = j, asc = end >= 0; asc ? x <= end : x >= end; asc ? x++ : x--) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n\n    if (noDraw) {\n      return -1;\n    }\n  }\n\n  var len = 0;\n\n  while (i + len < arr.length) {\n    var asc1 = void 0,\n        end1 = void 0;\n    var stop = false;\n\n    for (x = 0, end1 = j, asc1 = end1 >= 0; asc1 ? x <= end1 : x >= end1; asc1 ? x++ : x--) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n\n    if (stop) {\n      break;\n    }\n\n    len++;\n  }\n\n  return len;\n};\n\nfunction redColorScaleGenerator(values) {\n  var min = Math.min.apply(Math, values);\n  var max = Math.max.apply(Math, values);\n  return function (x) {\n    // eslint-disable-next-line no-magic-numbers\n    var nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n    return {\n      backgroundColor: 'rgb(255,' + nonRed + ',' + nonRed + ')'\n    };\n  };\n}\n\nfunction makeRenderer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var TableRenderer = function (_React$PureComponent) {\n    _inherits(TableRenderer, _React$PureComponent);\n\n    function TableRenderer() {\n      _classCallCheck(this, TableRenderer);\n\n      return _possibleConstructorReturn(this, (TableRenderer.__proto__ || Object.getPrototypeOf(TableRenderer)).apply(this, arguments));\n    }\n\n    _createClass(TableRenderer, [{\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var pivotData = new _Utilities.PivotData(this.props);\n        var colAttrs = pivotData.props.cols;\n        var rowAttrs = pivotData.props.rows;\n        var rowKeys = pivotData.getRowKeys();\n        var colKeys = pivotData.getColKeys();\n        var grandTotalAggregator = pivotData.getAggregator([], []);\n\n        var valueCellColors = function valueCellColors() {};\n\n        var rowTotalColors = function rowTotalColors() {};\n\n        var colTotalColors = function colTotalColors() {};\n\n        if (opts.heatmapMode) {\n          var colorScaleGenerator = this.props.tableColorScaleGenerator;\n          var rowTotalValues = colKeys.map(function (x) {\n            return pivotData.getAggregator([], x).value();\n          });\n          rowTotalColors = colorScaleGenerator(rowTotalValues);\n          var colTotalValues = rowKeys.map(function (x) {\n            return pivotData.getAggregator(x, []).value();\n          });\n          colTotalColors = colorScaleGenerator(colTotalValues);\n\n          if (opts.heatmapMode === 'full') {\n            var allValues = [];\n            rowKeys.map(function (r) {\n              return colKeys.map(function (c) {\n                return allValues.push(pivotData.getAggregator(r, c).value());\n              });\n            });\n            var colorScale = colorScaleGenerator(allValues);\n\n            valueCellColors = function valueCellColors(r, c, v) {\n              return colorScale(v);\n            };\n          } else if (opts.heatmapMode === 'row') {\n            var rowColorScales = {};\n            rowKeys.map(function (r) {\n              var rowValues = colKeys.map(function (x) {\n                return pivotData.getAggregator(r, x).value();\n              });\n              rowColorScales[r] = colorScaleGenerator(rowValues);\n            });\n\n            valueCellColors = function valueCellColors(r, c, v) {\n              return rowColorScales[r](v);\n            };\n          } else if (opts.heatmapMode === 'col') {\n            var colColorScales = {};\n            colKeys.map(function (c) {\n              var colValues = rowKeys.map(function (x) {\n                return pivotData.getAggregator(x, c).value();\n              });\n              colColorScales[c] = colorScaleGenerator(colValues);\n            });\n\n            valueCellColors = function valueCellColors(r, c, v) {\n              return colColorScales[c](v);\n            };\n          }\n        }\n\n        var getClickHandler = this.props.tableOptions && this.props.tableOptions.clickCallback ? function (value, rowValues, colValues) {\n          var filters = {};\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = Object.keys(colAttrs || {})[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var i = _step.value;\n              var attr = colAttrs[i];\n\n              if (colValues[i] !== null) {\n                filters[attr] = colValues[i];\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = Object.keys(rowAttrs || {})[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _i = _step2.value;\n              var attr = rowAttrs[_i];\n\n              if (rowValues[_i] !== null) {\n                filters[attr] = rowValues[_i];\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          return function (e) {\n            return _this2.props.tableOptions.clickCallback(e, value, filters, pivotData);\n          };\n        } : null;\n        return _react2.default.createElement('table', {\n          className: 'pvtTable'\n        }, _react2.default.createElement('thead', null, colAttrs.map(function (c, j) {\n          return _react2.default.createElement('tr', {\n            key: 'colAttr' + j\n          }, j === 0 && rowAttrs.length !== 0 && _react2.default.createElement('th', {\n            colSpan: rowAttrs.length,\n            rowSpan: colAttrs.length\n          }), _react2.default.createElement('th', {\n            className: 'pvtAxisLabel'\n          }, c), colKeys.map(function (colKey, i) {\n            var x = spanSize(colKeys, i, j);\n\n            if (x === -1) {\n              return null;\n            }\n\n            return _react2.default.createElement('th', {\n              className: 'pvtColLabel',\n              key: 'colKey' + i,\n              colSpan: x,\n              rowSpan: j === colAttrs.length - 1 && rowAttrs.length !== 0 ? 2 : 1\n            }, colKey[j]);\n          }), j === 0 && _react2.default.createElement('th', {\n            className: 'pvtTotalLabel',\n            rowSpan: colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n          }, 'Totals'));\n        }), rowAttrs.length !== 0 && _react2.default.createElement('tr', null, rowAttrs.map(function (r, i) {\n          return _react2.default.createElement('th', {\n            className: 'pvtAxisLabel',\n            key: 'rowAttr' + i\n          }, r);\n        }), _react2.default.createElement('th', {\n          className: 'pvtTotalLabel'\n        }, colAttrs.length === 0 ? 'Totals' : null))), _react2.default.createElement('tbody', null, rowKeys.map(function (rowKey, i) {\n          var totalAggregator = pivotData.getAggregator(rowKey, []);\n          return _react2.default.createElement('tr', {\n            key: 'rowKeyRow' + i\n          }, rowKey.map(function (txt, j) {\n            var x = spanSize(rowKeys, i, j);\n\n            if (x === -1) {\n              return null;\n            }\n\n            return _react2.default.createElement('th', {\n              key: 'rowKeyLabel' + i + '-' + j,\n              className: 'pvtRowLabel',\n              rowSpan: x,\n              colSpan: j === rowAttrs.length - 1 && colAttrs.length !== 0 ? 2 : 1\n            }, txt);\n          }), colKeys.map(function (colKey, j) {\n            var aggregator = pivotData.getAggregator(rowKey, colKey);\n            return _react2.default.createElement('td', {\n              className: 'pvtVal',\n              key: 'pvtVal' + i + '-' + j,\n              onClick: getClickHandler && getClickHandler(aggregator.value(), rowKey, colKey),\n              style: valueCellColors(rowKey, colKey, aggregator.value())\n            }, aggregator.format(aggregator.value()));\n          }), _react2.default.createElement('td', {\n            className: 'pvtTotal',\n            onClick: getClickHandler && getClickHandler(totalAggregator.value(), rowKey, [null]),\n            style: colTotalColors(totalAggregator.value())\n          }, totalAggregator.format(totalAggregator.value())));\n        }), _react2.default.createElement('tr', null, _react2.default.createElement('th', {\n          className: 'pvtTotalLabel',\n          colSpan: rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)\n        }, 'Totals'), colKeys.map(function (colKey, i) {\n          var totalAggregator = pivotData.getAggregator([], colKey);\n          return _react2.default.createElement('td', {\n            className: 'pvtTotal',\n            key: 'total' + i,\n            onClick: getClickHandler && getClickHandler(totalAggregator.value(), [null], colKey),\n            style: rowTotalColors(totalAggregator.value())\n          }, totalAggregator.format(totalAggregator.value()));\n        }), _react2.default.createElement('td', {\n          onClick: getClickHandler && getClickHandler(grandTotalAggregator.value(), [null], [null]),\n          className: 'pvtGrandTotal'\n        }, grandTotalAggregator.format(grandTotalAggregator.value())))));\n      }\n    }]);\n\n    return TableRenderer;\n  }(_react2.default.PureComponent);\n\n  TableRenderer.defaultProps = _Utilities.PivotData.defaultProps;\n  TableRenderer.propTypes = _Utilities.PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = _propTypes2.default.func;\n  TableRenderer.propTypes.tableOptions = _propTypes2.default.object;\n  return TableRenderer;\n}\n\nvar TSVExportRenderer = function (_React$PureComponent2) {\n  _inherits(TSVExportRenderer, _React$PureComponent2);\n\n  function TSVExportRenderer() {\n    _classCallCheck(this, TSVExportRenderer);\n\n    return _possibleConstructorReturn(this, (TSVExportRenderer.__proto__ || Object.getPrototypeOf(TSVExportRenderer)).apply(this, arguments));\n  }\n\n  _createClass(TSVExportRenderer, [{\n    key: 'render',\n    value: function render() {\n      var pivotData = new _Utilities.PivotData(this.props);\n      var rowKeys = pivotData.getRowKeys();\n      var colKeys = pivotData.getColKeys();\n\n      if (rowKeys.length === 0) {\n        rowKeys.push([]);\n      }\n\n      if (colKeys.length === 0) {\n        colKeys.push([]);\n      }\n\n      var headerRow = pivotData.props.rows.map(function (r) {\n        return r;\n      });\n\n      if (colKeys.length === 1 && colKeys[0].length === 0) {\n        headerRow.push(this.props.aggregatorName);\n      } else {\n        colKeys.map(function (c) {\n          return headerRow.push(c.join('-'));\n        });\n      }\n\n      var result = rowKeys.map(function (r) {\n        var row = r.map(function (x) {\n          return x;\n        });\n        colKeys.map(function (c) {\n          var v = pivotData.getAggregator(r, c).value();\n          row.push(v ? v : '');\n        });\n        return row;\n      });\n      result.unshift(headerRow);\n      return _react2.default.createElement('textarea', {\n        value: result.map(function (r) {\n          return r.join('\\t');\n        }).join('\\n'),\n        style: {\n          width: window.innerWidth / 2,\n          height: window.innerHeight / 2\n        },\n        readOnly: true\n      });\n    }\n  }]);\n\n  return TSVExportRenderer;\n}(_react2.default.PureComponent);\n\nTSVExportRenderer.defaultProps = _Utilities.PivotData.defaultProps;\nTSVExportRenderer.propTypes = _Utilities.PivotData.propTypes;\nexports.default = {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({\n    heatmapMode: 'full'\n  }),\n  'Table Col Heatmap': makeRenderer({\n    heatmapMode: 'col'\n  }),\n  'Table Row Heatmap': makeRenderer({\n    heatmapMode: 'row'\n  }),\n  'Exportable TSV': TSVExportRenderer\n};\nmodule.exports = exports['default'];","map":{"version":3,"sources":["src/TableRenderers.jsx"],"names":["spanSize","x","i","asc","end","noDraw","arr","len","asc1","end1","stop","min","Math","max","nonRed","backgroundColor","opts","TableRenderer","pivotData","colAttrs","rowAttrs","rowKeys","colKeys","grandTotalAggregator","valueCellColors","rowTotalColors","colTotalColors","colorScaleGenerator","rowTotalValues","colTotalValues","allValues","colorScale","rowColorScales","rowValues","colColorScales","colValues","getClickHandler","filters","Object","attr","j","c","colKey","r","totalAggregator","rowKey","txt","aggregator","TSVExportRenderer","PureComponent","headerRow","result","row","v","width","window","height","Table","makeRenderer","heatmapMode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\n\n// helper function for setting row/col-span in pivotTableRenderer\nconst spanSize = function(arr, i, j) {\n  let x;\n  if (i !== 0) {\n    let asc, end;\n    let noDraw = true;\n    for (\n      x = 0, end = j, asc = end >= 0;\n      asc ? x <= end : x >= end;\n      asc ? x++ : x--\n    ) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n    if (noDraw) {\n      return -1;\n    }\n  }\n  let len = 0;\n  while (i + len < arr.length) {\n    let asc1, end1;\n    let stop = false;\n    for (\n      x = 0, end1 = j, asc1 = end1 >= 0;\n      asc1 ? x <= end1 : x >= end1;\n      asc1 ? x++ : x--\n    ) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n    if (stop) {\n      break;\n    }\n    len++;\n  }\n  return len;\n};\n\nfunction redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return x => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n    return {backgroundColor: `rgb(255,${nonRed},${nonRed})`};\n  };\n}\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.PureComponent {\n    render() {\n      const pivotData = new PivotData(this.props);\n      const colAttrs = pivotData.props.cols;\n      const rowAttrs = pivotData.props.rows;\n      const rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n      const grandTotalAggregator = pivotData.getAggregator([], []);\n\n      let valueCellColors = () => {};\n      let rowTotalColors = () => {};\n      let colTotalColors = () => {};\n      if (opts.heatmapMode) {\n        const colorScaleGenerator = this.props.tableColorScaleGenerator;\n        const rowTotalValues = colKeys.map(x =>\n          pivotData.getAggregator([], x).value()\n        );\n        rowTotalColors = colorScaleGenerator(rowTotalValues);\n        const colTotalValues = rowKeys.map(x =>\n          pivotData.getAggregator(x, []).value()\n        );\n        colTotalColors = colorScaleGenerator(colTotalValues);\n\n        if (opts.heatmapMode === 'full') {\n          const allValues = [];\n          rowKeys.map(r =>\n            colKeys.map(c =>\n              allValues.push(pivotData.getAggregator(r, c).value())\n            )\n          );\n          const colorScale = colorScaleGenerator(allValues);\n          valueCellColors = (r, c, v) => colorScale(v);\n        } else if (opts.heatmapMode === 'row') {\n          const rowColorScales = {};\n          rowKeys.map(r => {\n            const rowValues = colKeys.map(x =>\n              pivotData.getAggregator(r, x).value()\n            );\n            rowColorScales[r] = colorScaleGenerator(rowValues);\n          });\n          valueCellColors = (r, c, v) => rowColorScales[r](v);\n        } else if (opts.heatmapMode === 'col') {\n          const colColorScales = {};\n          colKeys.map(c => {\n            const colValues = rowKeys.map(x =>\n              pivotData.getAggregator(x, c).value()\n            );\n            colColorScales[c] = colorScaleGenerator(colValues);\n          });\n          valueCellColors = (r, c, v) => colColorScales[c](v);\n        }\n      }\n\n      const getClickHandler =\n        this.props.tableOptions && this.props.tableOptions.clickCallback\n          ? (value, rowValues, colValues) => {\n              const filters = {};\n              for (const i of Object.keys(colAttrs || {})) {\n                const attr = colAttrs[i];\n                if (colValues[i] !== null) {\n                  filters[attr] = colValues[i];\n                }\n              }\n              for (const i of Object.keys(rowAttrs || {})) {\n                const attr = rowAttrs[i];\n                if (rowValues[i] !== null) {\n                  filters[attr] = rowValues[i];\n                }\n              }\n              return e =>\n                this.props.tableOptions.clickCallback(\n                  e,\n                  value,\n                  filters,\n                  pivotData\n                );\n            }\n          : null;\n\n      return (\n        <table className=\"pvtTable\">\n          <thead>\n            {colAttrs.map(function(c, j) {\n              return (\n                <tr key={`colAttr${j}`}>\n                  {j === 0 &&\n                    rowAttrs.length !== 0 && (\n                      <th colSpan={rowAttrs.length} rowSpan={colAttrs.length} />\n                    )}\n                  <th className=\"pvtAxisLabel\">{c}</th>\n                  {colKeys.map(function(colKey, i) {\n                    const x = spanSize(colKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        className=\"pvtColLabel\"\n                        key={`colKey${i}`}\n                        colSpan={x}\n                        rowSpan={\n                          j === colAttrs.length - 1 && rowAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {colKey[j]}\n                      </th>\n                    );\n                  })}\n\n                  {j === 0 && (\n                    <th\n                      className=\"pvtTotalLabel\"\n                      rowSpan={\n                        colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n                      }\n                    >\n                      Totals\n                    </th>\n                  )}\n                </tr>\n              );\n            })}\n\n            {rowAttrs.length !== 0 && (\n              <tr>\n                {rowAttrs.map(function(r, i) {\n                  return (\n                    <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                      {r}\n                    </th>\n                  );\n                })}\n                <th className=\"pvtTotalLabel\">\n                  {colAttrs.length === 0 ? 'Totals' : null}\n                </th>\n              </tr>\n            )}\n          </thead>\n\n          <tbody>\n            {rowKeys.map(function(rowKey, i) {\n              const totalAggregator = pivotData.getAggregator(rowKey, []);\n              return (\n                <tr key={`rowKeyRow${i}`}>\n                  {rowKey.map(function(txt, j) {\n                    const x = spanSize(rowKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        key={`rowKeyLabel${i}-${j}`}\n                        className=\"pvtRowLabel\"\n                        rowSpan={x}\n                        colSpan={\n                          j === rowAttrs.length - 1 && colAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {txt}\n                      </th>\n                    );\n                  })}\n                  {colKeys.map(function(colKey, j) {\n                    const aggregator = pivotData.getAggregator(rowKey, colKey);\n                    return (\n                      <td\n                        className=\"pvtVal\"\n                        key={`pvtVal${i}-${j}`}\n                        onClick={\n                          getClickHandler &&\n                          getClickHandler(aggregator.value(), rowKey, colKey)\n                        }\n                        style={valueCellColors(\n                          rowKey,\n                          colKey,\n                          aggregator.value()\n                        )}\n                      >\n                        {aggregator.format(aggregator.value())}\n                      </td>\n                    );\n                  })}\n                  <td\n                    className=\"pvtTotal\"\n                    onClick={\n                      getClickHandler &&\n                      getClickHandler(totalAggregator.value(), rowKey, [null])\n                    }\n                    style={colTotalColors(totalAggregator.value())}\n                  >\n                    {totalAggregator.format(totalAggregator.value())}\n                  </td>\n                </tr>\n              );\n            })}\n\n            <tr>\n              <th\n                className=\"pvtTotalLabel\"\n                colSpan={rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)}\n              >\n                Totals\n              </th>\n\n              {colKeys.map(function(colKey, i) {\n                const totalAggregator = pivotData.getAggregator([], colKey);\n                return (\n                  <td\n                    className=\"pvtTotal\"\n                    key={`total${i}`}\n                    onClick={\n                      getClickHandler &&\n                      getClickHandler(totalAggregator.value(), [null], colKey)\n                    }\n                    style={rowTotalColors(totalAggregator.value())}\n                  >\n                    {totalAggregator.format(totalAggregator.value())}\n                  </td>\n                );\n              })}\n\n              <td\n                onClick={\n                  getClickHandler &&\n                  getClickHandler(grandTotalAggregator.value(), [null], [null])\n                }\n                className=\"pvtGrandTotal\"\n              >\n                {grandTotalAggregator.format(grandTotalAggregator.value())}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\n  return TableRenderer;\n}\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map(r => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map(c => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map(r => {\n      const row = r.map(x => x);\n      colKeys.map(c => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map(r => r.join('\\t')).join('\\n')}\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({heatmapMode: 'full'}),\n  'Table Col Heatmap': makeRenderer({heatmapMode: 'col'}),\n  'Table Row Heatmap': makeRenderer({heatmapMode: 'row'}),\n  'Exportable TSV': TSVExportRenderer,\n};\n"]},"metadata":{},"sourceType":"script"}