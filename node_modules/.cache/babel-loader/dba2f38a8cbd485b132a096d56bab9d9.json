{"ast":null,"code":"/**\r\n * Curve column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../../charts/series/ColumnSeries\";\nimport { Sprite, visualProperties } from \"../../core/Sprite\"; //import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\n\nimport { CurveColumn } from \"./CurveColumn\";\nimport { registry } from \"../../core/Registry\";\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\nimport { CategoryAxis } from \"../../charts/axes/CategoryAxis\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[CurveColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar CurveColumnSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(CurveColumnSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return CurveColumnSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { CurveColumnSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link ICurveColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurveColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar CurveColumnSeries =\n/** @class */\nfunction (_super) {\n  __extends(CurveColumnSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveColumnSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurveColumnSeries\";\n    _this.bulletsContainer.mask = new Sprite();\n    _this.topOffset = 0.2;\n    _this.bottomOffset = 0.2;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creates and returns a CurveColumn element to use as column in radar chart.\r\n   *\r\n   * @return CurveColumn.\r\n   */\n\n\n  CurveColumnSeries.prototype.createColumnTemplate = function () {\n    return new CurveColumn();\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  CurveColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    //let startAngle = this.chart.startAngle;\n    //let endAngle = this.chart.endAngle;\n    var _this = this;\n\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem); //let cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\n\n    var template = this.columns.template;\n    var percentWidth = template.percentWidth;\n    var percentHeight = template.percentHeight;\n\n    if ($type.isNaN(percentWidth)) {\n      percentWidth = 100;\n    }\n\n    var points = [];\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n    var axisRendererX = xAxis.renderer;\n    var middlePoint;\n\n    if (this.baseAxis == this.xAxis) {\n      var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n      startLocation += offset;\n      endLocation -= offset;\n      var count = Math.ceil(this.xAxis.axisLength / axisRendererX.precisionStep / (this.endIndex - this.startIndex)) + 2;\n      var step = (endLocation - startLocation) / count;\n      var bottomLocation = dataItem.locations[yOpenField];\n      var topLocation = dataItem.locations[yField]; // otherwise gantt chart will start items in the middle of a cell\n\n      if (this.yAxis instanceof ValueAxis) {\n        if (this.dataFields[this.yField] != this.dataFields[this.yOpenField]) {\n          bottomLocation = 0;\n          topLocation = 0;\n        }\n      } else if (this.yAxis instanceof CategoryAxis) {\n        if (!$type.isNaN(percentHeight)) {\n          topLocation = 0;\n          bottomLocation = 1;\n          var offset_1 = $math.round((1 - percentHeight / 100) / 2, 5);\n          topLocation += offset_1;\n          bottomLocation -= offset_1;\n        }\n      }\n\n      for (var i = startLocation; i <= endLocation; i = i + step) {\n        if (i > endLocation) {\n          i = endLocation;\n        }\n\n        points.push(this.getPoint(dataItem, xField, yField, i, topLocation));\n      }\n\n      points.push(this.getPoint(dataItem, xField, yField, endLocation, topLocation));\n\n      for (var i = endLocation; i >= startLocation; i = i - step) {\n        if (i < startLocation) {\n          i = startLocation;\n        }\n\n        points.push(this.getPoint(dataItem, xOpenField, yOpenField, i, bottomLocation));\n      }\n\n      points.push(this.getPoint(dataItem, xOpenField, yOpenField, startLocation, bottomLocation));\n      middlePoint = this.getPoint(dataItem, xField, yField, startLocation + (endLocation - startLocation) / 2, 0.5);\n    } else {\n      var offset = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\n      startLocation += offset;\n      endLocation -= offset;\n      var rangeX = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n      var rangeY = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n      var rightLocation = dataItem.locations[xField];\n      var leftLocation = dataItem.locations[xOpenField]; // otherwise gantt chart will start items in the middle of a cell\n\n      if (this.xAxis instanceof ValueAxis) {\n        if (this.dataFields[this.xField] != this.dataFields[this.xOpenField]) {\n          rightLocation = 0;\n          leftLocation = 0;\n        }\n      }\n\n      var openPositionX = xAxis.getPositionX(dataItem, xOpenField, leftLocation, \"valueX\", rangeX);\n      var positionX = xAxis.getPositionX(dataItem, xField, rightLocation, \"valueX\", rangeX);\n      var openPositionY = yAxis.getPositionY(dataItem, yOpenField, startLocation, \"valueY\", rangeY);\n      var positionY = yAxis.getPositionY(dataItem, yField, endLocation, \"valueY\", rangeY);\n      var count = Math.ceil(xAxis.axisLength / axisRendererX.precisionStep * (positionX - openPositionX) / (xAxis.end - xAxis.start)) + 2;\n      var step = (positionX - openPositionX) / count;\n\n      if (positionX > openPositionX) {\n        for (var i = openPositionX; i <= positionX; i = i + step) {\n          if (i > positionX) {\n            i = positionX;\n          }\n\n          points.push(xAxis.renderer.positionToPoint(i, openPositionY));\n        }\n\n        points.push(xAxis.renderer.positionToPoint(positionX, openPositionY));\n\n        for (var i = positionX; i >= openPositionX; i = i - step) {\n          if (i < openPositionX) {\n            i = openPositionX;\n          }\n\n          points.push(xAxis.renderer.positionToPoint(i, positionY));\n        }\n\n        points.push(xAxis.renderer.positionToPoint(openPositionX, positionY));\n      }\n\n      middlePoint = xAxis.renderer.positionToPoint(openPositionX + (positionX - openPositionX) / 2, openPositionY + (positionY - openPositionY) / 2);\n    }\n\n    var column = dataItem.column;\n\n    if (!column) {\n      column = this.columns.create();\n      $object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\n\n      $object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\n\n      dataItem.column = column;\n      dataItem.addSprite(column);\n      this.setColumnStates(column);\n      column.paper = this.paper;\n    }\n\n    var curveColumn = column.curveColumn;\n\n    if (points.length > 0) {\n      points.push(points[0]);\n    }\n\n    curveColumn.path = $path.pointsToPath(points);\n    column.__disabled = false;\n    column.parent = this.columnsContainer;\n    column.tooltipX = middlePoint.x;\n    column.tooltipY = middlePoint.y;\n    column.curveColumn.tooltipX = middlePoint.x;\n    column.curveColumn.tooltipY = middlePoint.y;\n    this.axisRanges.each(function (axisRange) {\n      var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n      if (!rangeColumn) {\n        rangeColumn = _this.columns.create();\n\n        if (rangeColumn.dataItem) {\n          $array.remove(rangeColumn.dataItem.sprites, rangeColumn);\n        }\n\n        dataItem.addSprite(rangeColumn);\n        rangeColumn.paper = _this.paper;\n\n        _this.setColumnStates(rangeColumn);\n\n        dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n      }\n\n      var rangeCurveColumn = rangeColumn.curveColumn;\n      rangeCurveColumn.path = curveColumn.path;\n      rangeColumn.__disabled = false;\n      rangeColumn.parent = axisRange.contents;\n    });\n  };\n  /**\r\n   * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n   *\r\n   * @param    dataItem   Data item\r\n   * @param    xKey       Name of X data field\r\n   * @param    yKey       Name of Y data field\r\n   * @param    locationX  X location\r\n   * @param    locationY  Y location\r\n   * @param    stackKeyX  ?\r\n   * @param    stackKeyY  ?\r\n   * @returns             Coordinates\r\n   */\n\n\n  CurveColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\n    if (!stackKeyX) {\n      stackKeyX = \"valueX\";\n    }\n\n    if (!stackKeyY) {\n      stackKeyY = \"valueY\";\n    }\n\n    var renderer = this.yAxis.renderer; //let radius = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), renderer.innerRadius * (1 + this.bottomOffset), renderer.radius * (1 + this.topOffset));\n    //let radius = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\n\n    var radius = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), -renderer.radius * (1 + this.topOffset), -renderer.innerRadius * (1 + this.bottomOffset));\n    var range = {\n      start: this.xAxis.start,\n      end: this.xAxis.end\n    };\n    var xx = this.xAxis.getX(dataItem, xKey, locationX, stackKeyX, range);\n    var xy = this.xAxis.getY(dataItem, xKey, locationX, stackKeyX, range);\n    var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX, range);\n    return {\n      x: xx + radius * $math.cos(angle),\n      y: xy + radius * $math.sin(angle)\n    };\n  };\n  /**\r\n   * Returns an SVG path to be used as a mask for the series.\r\n   *\r\n   * @return SVG path\r\n   */\n\n\n  CurveColumnSeries.prototype.getMaskPath = function () {\n    var renderer = this.yAxis.renderer;\n    var path = renderer.getPositionRangePath(renderer.axis.start, renderer.axis.end);\n    var bulletsContainer = this.bulletsContainer;\n\n    if (this.chart && this.chart.maskBullets) {\n      if (!bulletsContainer.mask) {\n        bulletsContainer.mask = new Sprite();\n      }\n\n      bulletsContainer.mask.path = path;\n    } else {\n      bulletsContainer.mask = undefined;\n    }\n\n    return path;\n  };\n\n  Object.defineProperty(CurveColumnSeries.prototype, \"topOffset\", {\n    /**\r\n     * @return Top offset\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"topOffset\");\n    },\n\n    /**\r\n     * A relative part of an series elements allowed outside of the outer edge of\r\n     * the \"plot area\".\r\n     *\r\n     * @default 0.2\r\n     * @param  value  Top offset\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"topOffset\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurveColumnSeries.prototype, \"bottomOffset\", {\n    /**\r\n     * @return Bottom offset\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"bottomOffset\");\n    },\n\n    /**\r\n     * A relative part of an series elements allowed outside of the inner edge of\r\n     * the \"plot area\".\r\n     *\r\n     * @default 0.2\r\n     * @param  value  Bottom offset\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"bottomOffset\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [positionBulletReal description]\r\n   *\r\n   * @ignore\r\n   * @param {Sprite} bullet    [description]\r\n   * @param {number} positionX [description]\r\n   * @param {number} positionY [description]\r\n   */\n\n  CurveColumnSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\n      bullet.visible = false;\n    }\n\n    bullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\n  };\n\n  CurveColumnSeries.prototype.setXAxis = function (axis) {\n    _super.prototype.setXAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  CurveColumnSeries.prototype.setYAxis = function (axis) {\n    _super.prototype.setYAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  CurveColumnSeries.prototype.updateRendererRefs = function () {\n    var rendererX = this.xAxis.renderer;\n    var rendererY = this.yAxis.renderer;\n    rendererX.axisRendererY = rendererY;\n    rendererY.axisRendererX = rendererX;\n  };\n\n  return CurveColumnSeries;\n}(ColumnSeries);\n\nexport { CurveColumnSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurveColumnSeries\"] = CurveColumnSeries;\nregistry.registeredClasses[\"CurveColumnSeriesDataItem\"] = CurveColumnSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/CurveColumnSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Curve column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../../charts/series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { CurveColumn } from \"./CurveColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../../charts/axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurveColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurveColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurveColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurveColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurveColumnSeries]].\r\n */\r\nexport interface ICurveColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurveColumnSeries]].\r\n */\r\nexport interface ICurveColumnSeriesProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\ttopOffset?: number;\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\tbottomOffset?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurveColumnSeries]].\r\n */\r\nexport interface ICurveColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveColumnSeriesAdapters extends IColumnSeriesAdapters, ICurveColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link ICurveColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurveColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CurveColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: CurveColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: CurveColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurveColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveColumnSeries\";\r\n\r\n\t\tthis.bulletsContainer.mask = new Sprite();\r\n\r\n\t\tthis.topOffset = 0.2;\r\n\t\tthis.bottomOffset = 0.2;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a CurveColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return CurveColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurveColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//let startAngle = this.chart.startAngle;\r\n\t\t//let endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\t//let cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tlet axisRendererX: AxisRendererCurveX = <AxisRendererCurveX>xAxis.renderer;\r\n\t\tlet middlePoint: IPoint;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\tstartLocation += offset;\r\n\t\t\tendLocation -= offset;\r\n\r\n\t\t\tlet count = Math.ceil(this.xAxis.axisLength / axisRendererX.precisionStep / (this.endIndex - this.startIndex)) + 2;\r\n\r\n\t\t\tlet step = (endLocation - startLocation) / count;\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t\tbottomLocation = 1;\r\n\t\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\t\ttopLocation += offset;\r\n\t\t\t\t\tbottomLocation -= offset;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startLocation; i <= endLocation; i = i + step) {\r\n\t\t\t\tif (i > endLocation) {\r\n\t\t\t\t\ti = endLocation;\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, i, topLocation));\r\n\t\t\t}\r\n\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, endLocation, topLocation));\r\n\r\n\t\t\tfor (let i = endLocation; i >= startLocation; i = i - step) {\r\n\t\t\t\tif (i < startLocation) {\r\n\t\t\t\t\ti = startLocation;\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(this.getPoint(dataItem, xOpenField, yOpenField, i, bottomLocation));\r\n\t\t\t}\r\n\t\t\tpoints.push(this.getPoint(dataItem, xOpenField, yOpenField, startLocation, bottomLocation));\r\n\r\n\t\t\tmiddlePoint = this.getPoint(dataItem, xField, yField, startLocation + (endLocation - startLocation) / 2, 0.5);\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\tstartLocation += offset;\r\n\t\t\tendLocation -= offset;\r\n\r\n\t\t\tlet rangeX = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tlet rangeY = { start: yAxis.start, end: yAxis.end };\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet openPositionX = xAxis.getPositionX(dataItem, xOpenField, leftLocation, \"valueX\", rangeX);\r\n\t\t\tlet positionX = xAxis.getPositionX(dataItem, xField, rightLocation, \"valueX\", rangeX);\r\n\r\n\t\t\tlet openPositionY = yAxis.getPositionY(dataItem, yOpenField, startLocation, \"valueY\", rangeY)\r\n\t\t\tlet positionY = yAxis.getPositionY(dataItem, yField, endLocation, \"valueY\", rangeY)\r\n\r\n\t\t\tlet count = Math.ceil((xAxis.axisLength / axisRendererX.precisionStep) * (positionX - openPositionX) / (xAxis.end - xAxis.start)) + 2;\r\n\t\t\tlet step = (positionX - openPositionX) / count;\r\n\r\n\t\t\tif (positionX > openPositionX) {\r\n\t\t\t\tfor (let i = openPositionX; i <= positionX; i = i + step) {\r\n\t\t\t\t\tif (i > positionX) {\r\n\t\t\t\t\t\ti = positionX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(i, openPositionY));\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(positionX, openPositionY));\r\n\r\n\t\t\t\tfor (let i = positionX; i >= openPositionX; i = i - step) {\r\n\t\t\t\t\tif (i < openPositionX) {\r\n\t\t\t\t\t\ti = openPositionX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(i, positionY));\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(openPositionX, positionY));\r\n\t\t\t}\r\n\r\n\t\t\tmiddlePoint = xAxis.renderer.positionToPoint(openPositionX + (positionX - openPositionX) / 2, openPositionY + (positionY - openPositionY) / 2);\r\n\t\t}\r\n\r\n\t\tlet column = dataItem.column;\r\n\r\n\t\tif (!column) {\r\n\t\t\tcolumn = this.columns.create();\r\n\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.column = column;\r\n\t\t\tdataItem.addSprite(column);\r\n\t\t\tthis.setColumnStates(column);\r\n\t\t\tcolumn.paper = this.paper;\r\n\t\t}\r\n\r\n\t\tlet curveColumn = column.curveColumn;\r\n\t\tif (points.length > 0) {\r\n\t\t\tpoints.push(points[0]);\r\n\t\t}\r\n\t\tcurveColumn.path = $path.pointsToPath(points);\r\n\r\n\t\tcolumn.__disabled = false;\r\n\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\tcolumn.tooltipX = middlePoint.x;\r\n\t\tcolumn.tooltipY = middlePoint.y;\r\n\r\n\t\tcolumn.curveColumn.tooltipX = middlePoint.x;\r\n\t\tcolumn.curveColumn.tooltipY = middlePoint.y;\r\n\r\n\t\tthis.axisRanges.each((axisRange) => {\r\n\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (!rangeColumn) {\r\n\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\trangeColumn.paper = this.paper;\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t}\r\n\r\n\t\t\tlet rangeCurveColumn = rangeColumn.curveColumn;\r\n\t\t\trangeCurveColumn.path = curveColumn.path;\r\n\r\n\t\t\trangeColumn.__disabled = false;\r\n\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: CurveColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\t\tlet renderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\t\t//let radius = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), renderer.innerRadius * (1 + this.bottomOffset), renderer.radius * (1 + this.topOffset));\r\n\r\n\t\t//let radius = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), -renderer.radius * (1 + this.topOffset), -renderer.innerRadius * (1 + this.bottomOffset));\r\n\t\tlet range = { start: this.xAxis.start, end: this.xAxis.end };\r\n\r\n\t\tlet xx: number = this.xAxis.getX(dataItem, xKey, locationX, stackKeyX, range);\r\n\t\tlet xy: number = this.xAxis.getY(dataItem, xKey, locationX, stackKeyX, range);\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX, range);\r\n\r\n\t\treturn { x: xx + radius * $math.cos(angle), y: xy + radius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\t\tlet path = renderer.getPositionRangePath(renderer.axis.start, renderer.axis.end);\r\n\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tif (this.chart && this.chart.maskBullets) {\r\n\t\t\tif (!bulletsContainer.mask) {\r\n\t\t\t\tbulletsContainer.mask = new Sprite();\r\n\t\t\t}\r\n\t\t\tbulletsContainer.mask.path = path;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbulletsContainer.mask = undefined;\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t *\r\n\t * @default 0.2\r\n\t * @param  value  Top offset\r\n\t */\r\n\tpublic set topOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"topOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top offset\r\n\t */\r\n\tpublic get topOffset(): number {\r\n\t\treturn this.getPropertyValue(\"topOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t * \r\n\t * @default 0.2\r\n\t * @param  value  Bottom offset\r\n\t */\r\n\tpublic set bottomOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"bottomOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom offset\r\n\t */\r\n\tpublic get bottomOffset(): number {\r\n\t\treturn this.getPropertyValue(\"bottomOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * [positionBulletReal description]\r\n\t * \r\n\t * @ignore\r\n\t * @param {Sprite} bullet    [description]\r\n\t * @param {number} positionX [description]\r\n\t * @param {number} positionY [description]\r\n\t */\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCurveX>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t\trendererY.axisRendererX = rendererX;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveColumnSeries\"] = CurveColumnSeries;\r\nregistry.registeredClasses[\"CurveColumnSeriesDataItem\"] = CurveColumnSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}