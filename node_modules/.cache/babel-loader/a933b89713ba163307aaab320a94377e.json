{"ast":null,"code":"import _classCallCheck from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\src\\\\main\\\\content\\\\include\\\\C0202002_tab07_tab01_tab03.js\";\n\n/* eslint-disable array-callback-return */\nimport React, { Component } from 'react';\nimport { OwpButton, OwpSearchDateField, OwpSearchSelectField, OwpSearchTextField, OwpTextField, OwpTreeGrid } from 'owp/wrapper';\nimport Formsy from 'formsy-react';\nimport * as TGEvent from 'owp/TGEvent';\nimport moment from 'moment';\nimport { query } from 'owp/api';\nimport { setGridData, setRowAttribute } from 'main/GridUtill';\nvar FPNUNIT = 'FPNUNIT';\nvar KPPCPP_ACTIVE = 'KPPCPP_ACTIVE';\nvar TARGETMIN_ACTIVE = 'TARGETMIN_ACTIVE';\nvar TARGETMAX_ACTIVE = 'TARGETMAX_ACTIVE';\nvar TOLARANCE_ACTIVE = 'TOLARANCE_ACTIVE';\nvar SP_ACTIVE = 'SP_ACTIVE';\nvar PV_ACTIVE = 'PV_ACTIVE';\nvar REPORT_ACTIVE = 'REPORT_ACTIVE';\n\nvar Page = /*#__PURE__*/function (_Component) {\n  _inherits(Page, _Component);\n\n  var _super = _createSuper(Page);\n\n  function Page(props) {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _super.call(this, props); //TODO:load this from parent\n\n    _this.loadActiveGrid = function () {\n      query({\n        url: 'loadOwpMbrUnitProcessMainConfig/' + _this.state.UNITPROCESSID\n      }).then(function (res) {\n        if (res['OWP_MBR_UNIT_PROCESS.MAIN_CONFIG']) {\n          var gridData = JSON.parse(res['OWP_MBR_UNIT_PROCESS.MAIN_CONFIG']);\n          setGridData('C0202012', gridData);\n\n          _this.canEdit(); // this.getDataFromGrid();\n\n        }\n      });\n    };\n\n    _this.getDataFromGrid = function () {\n      var G = TGEvent.getGridByID('C0202012');\n\n      var _rows = Object.values(G['Rows']).filter(function (item) {\n        return item.Kind == 'Data';\n      });\n\n      var arrData = [];\n\n      _rows.some(function (row) {\n        var rowData = {\n          FPNUNIT: row[FPNUNIT],\n          KPPCPP_ACTIVE: row[KPPCPP_ACTIVE],\n          TARGETMIN_ACTIVE: row[TARGETMIN_ACTIVE],\n          TARGETMAX_ACTIVE: row[TARGETMAX_ACTIVE],\n          TOLARANCE_ACTIVE: row[TOLARANCE_ACTIVE],\n          SP_ACTIVE: row[SP_ACTIVE],\n          PV_ACTIVE: row[PV_ACTIVE],\n          REPORT_ACTIVE: row[REPORT_ACTIVE]\n        };\n        arrData.push(rowData);\n      });\n\n      console.log(JSON.stringify(arrData));\n    };\n\n    _this.canEdit = function () {\n      var G = TGEvent.getGridByID('C0202012');\n\n      var _rows = Object.values(G['Rows']).filter(function (item) {\n        return item.Kind == 'Data';\n      });\n\n      var EDIT_COLUMNS = [KPPCPP_ACTIVE, TARGETMIN_ACTIVE, TARGETMAX_ACTIVE, TOLARANCE_ACTIVE, SP_ACTIVE, PV_ACTIVE, REPORT_ACTIVE];\n\n      _rows.some(function (row) {\n        EDIT_COLUMNS.some(function (targetColumnName) {\n          setRowAttribute('C0202012', row, targetColumnName, 'BoolIcon', '4', 1);\n        });\n      });\n    };\n\n    _this.state = {\n      UNITPROCESSID: 139,\n      MAIN_CONFIG: ''\n    };\n    return _this;\n  }\n  /**\r\n   * Owp에서 사용하는 인풋에 대해 모두 사용할 수 있는 change 이벤트 리시버\r\n   * @param {Event} event 발생한 이벤트 객체\r\n   * @param {Function} callback 콜백 함수. 인풋의 name, value를 인수로 전달함.\r\n   */\n\n\n  _createClass(Page, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _showApprovalDialog = this.showApprovalDialog;\n      this.loadActiveGrid();\n    } //날짜 디폴드값 설정 함수\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('out');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-12\",\n        style: {\n          padding: '0'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(OwpTreeGrid, {\n        id: \"C0202012\",\n        LayoutUrl: \"assets/data/C0202012Def.xml\",\n        width: \"100%\" // height=\"21vh\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }\n      })))));\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nexport default Page;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/src/main/content/include/C0202002_tab07_tab01_tab03.js"],"names":["React","Component","OwpButton","OwpSearchDateField","OwpSearchSelectField","OwpSearchTextField","OwpTextField","OwpTreeGrid","Formsy","TGEvent","moment","query","setGridData","setRowAttribute","FPNUNIT","KPPCPP_ACTIVE","TARGETMIN_ACTIVE","TARGETMAX_ACTIVE","TOLARANCE_ACTIVE","SP_ACTIVE","PV_ACTIVE","REPORT_ACTIVE","Page","props","loadActiveGrid","url","state","UNITPROCESSID","then","res","gridData","JSON","parse","canEdit","getDataFromGrid","G","getGridByID","_rows","Object","values","filter","item","Kind","arrData","some","row","rowData","push","console","log","stringify","EDIT_COLUMNS","targetColumnName","MAIN_CONFIG","_showApprovalDialog","showApprovalDialog","width","padding"],"mappings":"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","sourcesContent":["/* eslint-disable array-callback-return */\r\nimport React, { Component } from 'react';\r\nimport {\r\n    OwpButton,\r\n    OwpSearchDateField,\r\n    OwpSearchSelectField,\r\n    OwpSearchTextField,\r\n    OwpTextField,\r\n    OwpTreeGrid,\r\n} from 'owp/wrapper';\r\nimport Formsy from 'formsy-react';\r\nimport * as TGEvent from 'owp/TGEvent';\r\nimport moment from 'moment';\r\nimport { query } from 'owp/api';\r\nimport { setGridData, setRowAttribute } from 'main/GridUtill';\r\n\r\nconst FPNUNIT = 'FPNUNIT';\r\nconst KPPCPP_ACTIVE = 'KPPCPP_ACTIVE';\r\nconst TARGETMIN_ACTIVE = 'TARGETMIN_ACTIVE';\r\nconst TARGETMAX_ACTIVE = 'TARGETMAX_ACTIVE';\r\nconst TOLARANCE_ACTIVE = 'TOLARANCE_ACTIVE';\r\nconst SP_ACTIVE = 'SP_ACTIVE';\r\nconst PV_ACTIVE = 'PV_ACTIVE';\r\nconst REPORT_ACTIVE = 'REPORT_ACTIVE';\r\n\r\nclass Page extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //TODO:load this from parent\r\n        this.state = {\r\n            UNITPROCESSID: 139,\r\n            MAIN_CONFIG: '',\r\n        };\r\n    }\r\n    /**\r\n     * Owp에서 사용하는 인풋에 대해 모두 사용할 수 있는 change 이벤트 리시버\r\n     * @param {Event} event 발생한 이벤트 객체\r\n     * @param {Function} callback 콜백 함수. 인풋의 name, value를 인수로 전달함.\r\n     */\r\n    componentDidMount() {\r\n        const _showApprovalDialog = this.showApprovalDialog;\r\n        this.loadActiveGrid();\r\n    }\r\n    //날짜 디폴드값 설정 함수\r\n    componentWillUnmount() {\r\n        console.log('out');\r\n    }\r\n\r\n    loadActiveGrid = () => {\r\n        query({\r\n            url: 'loadOwpMbrUnitProcessMainConfig/' + this.state.UNITPROCESSID,\r\n        }).then((res) => {\r\n            if (res['OWP_MBR_UNIT_PROCESS.MAIN_CONFIG']) {\r\n                let gridData = JSON.parse(res['OWP_MBR_UNIT_PROCESS.MAIN_CONFIG']);\r\n                setGridData('C0202012', gridData);\r\n                this.canEdit();\r\n                // this.getDataFromGrid();\r\n            }\r\n        });\r\n    };\r\n\r\n    getDataFromGrid = () => {\r\n        const G = TGEvent.getGridByID('C0202012');\r\n        const _rows = Object.values(G['Rows']).filter((item) => item.Kind == 'Data');\r\n        let arrData = [];\r\n        _rows.some((row) => {\r\n            let rowData = {\r\n                FPNUNIT: row[FPNUNIT],\r\n                KPPCPP_ACTIVE: row[KPPCPP_ACTIVE],\r\n                TARGETMIN_ACTIVE: row[TARGETMIN_ACTIVE],\r\n                TARGETMAX_ACTIVE: row[TARGETMAX_ACTIVE],\r\n                TOLARANCE_ACTIVE: row[TOLARANCE_ACTIVE],\r\n                SP_ACTIVE: row[SP_ACTIVE],\r\n                PV_ACTIVE: row[PV_ACTIVE],\r\n                REPORT_ACTIVE: row[REPORT_ACTIVE],\r\n            };\r\n            arrData.push(rowData);\r\n        });\r\n        console.log(JSON.stringify(arrData));\r\n    };\r\n\r\n    canEdit = () => {\r\n        const G = TGEvent.getGridByID('C0202012');\r\n        const _rows = Object.values(G['Rows']).filter((item) => item.Kind == 'Data');\r\n        const EDIT_COLUMNS = [\r\n            KPPCPP_ACTIVE,\r\n            TARGETMIN_ACTIVE,\r\n            TARGETMAX_ACTIVE,\r\n            TOLARANCE_ACTIVE,\r\n            SP_ACTIVE,\r\n            PV_ACTIVE,\r\n            REPORT_ACTIVE,\r\n        ];\r\n        _rows.some((row) => {\r\n            EDIT_COLUMNS.some((targetColumnName) => {\r\n                setRowAttribute('C0202012', row, targetColumnName, 'BoolIcon', '4', 1);\r\n            });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{ width: '100%' }}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\" style={{ padding: '0' }}>\r\n                            <OwpTreeGrid\r\n                                id=\"C0202012\"\r\n                                LayoutUrl=\"assets/data/C0202012Def.xml\"\r\n                                width=\"100%\"\r\n                                // height=\"21vh\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Page;\r\n"]},"metadata":{},"sourceType":"module"}