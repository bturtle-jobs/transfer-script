{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { XYCursor } from \"../../charts/cursors/XYCursor\"; //import { Percent, percent } from \"../../core/utils/Percent\";\n\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Cursor for [[CurveChart]].\r\n *\r\n * @see {@link ICurveCursorEvents} for a list of available events\r\n * @see {@link ICurveCursorAdapters} for a list of available Adapters\r\n */\n\nvar CurveCursor =\n/** @class */\nfunction (_super) {\n  __extends(CurveCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveCursor() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"CurveCursor\"; // Apply theme\n\n    _this.applyTheme();\n\n    _this.mask = undefined;\n    return _this;\n  }\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point  Point to check\r\n   * @return Fits within container?\r\n   */\n\n\n  CurveCursor.prototype.fitsToBounds = function (point) {\n    if (this.xAxis && this.yAxis) {\n      var xAxisRenderer = this.xAxis.renderer;\n      var yAxisRenderer = this.yAxis.renderer;\n      var index = xAxisRenderer.polyspline.getClosestPointIndex(point);\n      var distance = $math.getDistance(point, xAxisRenderer.polyspline.allPoints[index]);\n\n      if (distance >= Math.abs(yAxisRenderer.radius) && distance >= Math.abs(yAxisRenderer.innerRadius)) {\n        return false;\n      }\n\n      return true;\n    }\n  };\n  /**\r\n   * [triggerMoveReal description]\r\n   *\r\n   * @param  point  Target point\r\n   */\n\n\n  CurveCursor.prototype.triggerMoveReal = function (point) {\n    if (!this.xAxis || this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled)) {\n      this.updateLineX(this.point);\n    }\n\n    if (!this.yAxis || this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled)) {\n      this.updateLineY(this.point);\n    }\n\n    this.updateSelection();\n\n    _super.prototype.triggerMoveReal.call(this, point);\n  };\n  /**\r\n   * (Re)draws the x cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n\n\n  CurveCursor.prototype.updateLineX = function (point) {\n    var lineX = this.lineX;\n    var xAxis = this.xAxis;\n\n    if (!xAxis) {\n      this.xAxis = this.chart.xAxes.getIndex(0);\n      xAxis = this.xAxis;\n    }\n\n    if (lineX && lineX.visible && !lineX.disabled && xAxis) {\n      var position = xAxis.renderer.pointToPosition(point);\n      var axisRendererX = xAxis.renderer;\n      lineX.path = axisRendererX.getGridPath($math.fitToRange(position, xAxis.start, xAxis.end));\n    }\n  };\n  /**\r\n   * (Re)draws the vertical (radial) cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n\n\n  CurveCursor.prototype.updateLineY = function (point) {\n    var lineY = this.lineY;\n    var yAxis = this.yAxis;\n\n    if (!yAxis) {\n      this.yAxis = this.chart.yAxes.getIndex(0);\n      yAxis = this.yAxis;\n    }\n\n    if (lineY && lineY.visible && !lineY.disabled && yAxis) {\n      var position = yAxis.renderer.pointToPosition(point);\n      var axisRendererY = yAxis.renderer;\n      lineY.path = axisRendererY.getGridPath($math.fitToRange(position, yAxis.start, yAxis.end));\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurveCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n      var xAxis = this.xAxis;\n      var yAxis = this.yAxis;\n\n      if (xAxis && yAxis && downPoint) {\n        var point = this.point;\n        var selection = this.selection;\n        selection.x = 0;\n        selection.y = 0;\n        var path = \"\";\n        var behavior = this.behavior;\n\n        if (behavior == \"zoomX\" || behavior == \"selectX\") {\n          var startPosition = xAxis.renderer.pointToPosition(downPoint);\n          var endPosition = xAxis.renderer.pointToPosition(point);\n          path += xAxis.renderer.getPositionRangePath(startPosition, endPosition);\n          startPosition = xAxis.toGlobalPosition(startPosition);\n          endPosition = xAxis.toGlobalPosition(endPosition);\n          this.xRange = {\n            start: Math.min(startPosition, endPosition),\n            end: Math.max(endPosition, startPosition)\n          };\n        } else if (behavior == \"zoomY\" || behavior == \"selectY\") {\n          var startPosition = yAxis.renderer.pointToPosition(downPoint);\n          var endPosition = yAxis.renderer.pointToPosition(point);\n          path += yAxis.renderer.getPositionRangePath(startPosition, endPosition);\n          startPosition = yAxis.toGlobalPosition(startPosition);\n          endPosition = yAxis.toGlobalPosition(endPosition);\n          this.yRange = {\n            start: Math.min(startPosition, endPosition),\n            end: Math.max(endPosition, startPosition)\n          };\n        }\n\n        selection.path = path;\n      } else {\n        this.selection.hide();\n      }\n    }\n  };\n  /**\r\n   * Updates cursors current positions.\r\n   */\n\n\n  CurveCursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    if (this.xAxis) {\n      this.xPosition = this.xAxis.toGlobalPosition(this.xAxis.renderer.pointToPosition(this.point));\n    }\n\n    if (this.yAxis) {\n      this.yPosition = this.yAxis.toGlobalPosition(this.yAxis.renderer.pointToPosition(this.point));\n    }\n  };\n  /**\r\n   * Overriding inherited method, so that nothing happens when it's triggered.\r\n   */\n\n\n  CurveCursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Updates Cursor's position when axis tooltip changes horizontal position.\r\n   *\r\n   * @param event Axis event\r\n   */\n\n\n  CurveCursor.prototype.handleXTooltipPosition = function (event) {\n    if (this.xAxis.cursorTooltipEnabled) {\n      var tooltip = this.xAxis.tooltip;\n      this.updateLineX($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * Updates Cursor's position when axis tooltip changes vertical position.\r\n   *\r\n   * @todo Description\r\n   * @param event Axis event\r\n   */\n\n\n  CurveCursor.prototype.handleYTooltipPosition = function (event) {\n    if (this.yAxis.cursorTooltipEnabled) {\n      var tooltip = this.yAxis.tooltip;\n      this.updateLineY($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * Overriding so that nothing happens when it's called.\r\n   *\r\n   * @param  point  Point\r\n   */\n\n\n  CurveCursor.prototype.updateLinePositions = function (point) {};\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  CurveCursor.prototype.getRanges = function () {};\n  /**\r\n   * Overriding inherited method, so that nothing happens when `updateSize`\r\n   * is triggered.\r\n   *\r\n   * CurveCursor is quite complicated and needs own sizing logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurveCursor.prototype.updateSize = function () {};\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurveCursor.prototype.fixPoint = function (point) {\n    // overriding xy method\n    return point;\n  };\n\n  return CurveCursor;\n}(XYCursor);\n\nexport { CurveCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurveCursor\"] = CurveCursor;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/CurveCursor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"../../charts/cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\n//import { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\n//import * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurveCursor]].\r\n */\r\nexport interface ICurveCursorProperties extends IXYCursorProperties { }\r\n\r\n/**\r\n * Defines events for [[CurveCursor]].\r\n */\r\nexport interface ICurveCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveCursorAdapters extends IXYCursorAdapters, ICurveCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[CurveChart]].\r\n *\r\n * @see {@link ICurveCursorEvents} for a list of available events\r\n * @see {@link ICurveCursorAdapters} for a list of available Adapters\r\n */\r\nexport class CurveCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: ICurveCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: ICurveCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveCursor\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tlet xAxisRenderer: AxisRendererCurveX = <AxisRendererCurveX>this.xAxis.renderer;\r\n\t\t\tlet yAxisRenderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\t\t\tlet index = xAxisRenderer.polyspline.getClosestPointIndex(point);\r\n\t\t\tlet distance = $math.getDistance(point, xAxisRenderer.polyspline.allPoints[index]);\r\n\t\t\tif (distance >= Math.abs(yAxisRenderer.radius) && distance >= Math.abs(yAxisRenderer.innerRadius)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [triggerMoveReal description]\r\n\t * \r\n\t * @param  point  Target point\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint) {\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the x cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\t\tlet lineX = this.lineX;\r\n\t\tlet xAxis = this.xAxis;\r\n\r\n\t\tif (!xAxis) {\r\n\t\t\tthis.xAxis = this.chart.xAxes.getIndex(0);\r\n\t\t\txAxis = this.xAxis;\r\n\t\t}\r\n\r\n\t\tif (lineX && lineX.visible && !lineX.disabled && xAxis) {\r\n\t\t\tlet position = xAxis.renderer.pointToPosition(point);\r\n\t\t\tlet axisRendererX = <AxisRendererCurveX>xAxis.renderer;\r\n\t\t\tlineX.path = axisRendererX.getGridPath($math.fitToRange(position, xAxis.start, xAxis.end));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tlet lineY = this.lineY;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!yAxis) {\r\n\t\t\tthis.yAxis = this.chart.yAxes.getIndex(0);\r\n\t\t\tyAxis = this.yAxis;\r\n\t\t}\r\n\r\n\t\tif (lineY && lineY.visible && !lineY.disabled && yAxis) {\r\n\r\n\t\t\tlet position = yAxis.renderer.pointToPosition(point);\r\n\r\n\t\t\tlet axisRendererY = <AxisRendererCurveY>yAxis.renderer;\r\n\t\t\tlineY.path = axisRendererY.getGridPath($math.fitToRange(position, yAxis.start, yAxis.end));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis && yAxis && downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\r\n\t\t\t\tlet selection = this.selection;\r\n\t\t\t\tselection.x = 0;\r\n\t\t\t\tselection.y = 0;\r\n\t\t\t\tlet path = \"\";\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\tlet startPosition = xAxis.renderer.pointToPosition(downPoint);\r\n\t\t\t\t\tlet endPosition = xAxis.renderer.pointToPosition(point);\r\n\r\n\t\t\t\t\tpath += xAxis.renderer.getPositionRangePath(startPosition, endPosition);\r\n\r\n\t\t\t\t\tstartPosition = xAxis.toGlobalPosition(startPosition);\r\n\t\t\t\t\tendPosition = xAxis.toGlobalPosition(endPosition);\r\n\r\n\t\t\t\t\tthis.xRange = { start: Math.min(startPosition, endPosition), end: Math.max(endPosition, startPosition) };\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\tlet startPosition = yAxis.renderer.pointToPosition(downPoint);\r\n\t\t\t\t\tlet endPosition = yAxis.renderer.pointToPosition(point);\r\n\r\n\t\t\t\t\tpath += yAxis.renderer.getPositionRangePath(startPosition, endPosition);\r\n\r\n\t\t\t\t\tstartPosition = yAxis.toGlobalPosition(startPosition);\r\n\t\t\t\t\tendPosition = yAxis.toGlobalPosition(endPosition);\r\n\r\n\t\t\t\t\tthis.yRange = { start: Math.min(startPosition, endPosition), end: Math.max(endPosition, startPosition) };\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.path = path;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xPosition = this.xAxis.toGlobalPosition(this.xAxis.renderer.pointToPosition(this.point));\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yPosition = this.yAxis.toGlobalPosition(this.yAxis.renderer.pointToPosition(this.point));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t */\r\n\tprotected updatePoint(point: IPoint): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding so that nothing happens when it's called.\r\n\t * \r\n\t * @param  point  Point\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void { }\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * CurveCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveCursor\"] = CurveCursor;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}