{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\owp\\\\src\\\\components\\\\TreeGrid\\\\OwpPresetTreeGrid.js\";\n\n/**\r\n * @deprecated `owp/wrapper/OwpTreeGrid`를 사용해주세요.\r\n */\nimport isEmpty from 'lodash/isEmpty';\nimport { query } from 'owp/api';\nimport { getFlatNavigation } from 'owp/common/navigation';\nimport { mapDataToOwpPresetFormProps } from 'owp/components/Form/util';\nimport PropTypes from 'prop-types';\nimport { find, forEachObjIndexed, fromPairs, map, path, pipe, prop, propEq, props, toString, uniq } from 'ramda';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport TreeGrid from './TreeGrid';\nimport TreeGridToolbar from './TreeGridToolbar';\nimport { changesAsJSON, getSelectedData, makeBatchData } from './util';\nvar treeGridBoolMap = {\n  false: 0,\n  true: 1\n};\nvar permissionBoolMap = {\n  T: true,\n  F: false\n};\n\nfunction mapPermissions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$C_PERMISSION = _ref.C_PERMISSION,\n      C_PERMISSION = _ref$C_PERMISSION === void 0 ? 'T' : _ref$C_PERMISSION,\n      _ref$R_PERMISSION = _ref.R_PERMISSION,\n      R_PERMISSION = _ref$R_PERMISSION === void 0 ? 'T' : _ref$R_PERMISSION,\n      _ref$D_PERMISSION = _ref.D_PERMISSION,\n      D_PERMISSION = _ref$D_PERMISSION === void 0 ? 'T' : _ref$D_PERMISSION;\n\n  return {\n    C: !!permissionBoolMap[C_PERMISSION],\n    R: !!permissionBoolMap[R_PERMISSION],\n    U: !!permissionBoolMap[C_PERMISSION],\n    // 등록 권한과 수정 권한은 현재 정책상 동일\n    D: !!permissionBoolMap[D_PERMISSION]\n  };\n}\n\nfunction useSuggestColumns(autocompleteColumns) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      suggestColumns = _useState2[0],\n      setSuggestColumns = _useState2[1];\n\n  useEffect(function () {\n    forEachObjIndexed(function (value, key) {\n      query({\n        url: value.query.url\n      }).then(function (data) {\n        var _mapDataToOwpPresetFo = mapDataToOwpPresetFormProps({\n          dataKey: 'suggestions',\n          labelKey: 'Text',\n          valueKey: 'Name'\n        })(data),\n            suggestions = _mapDataToOwpPresetFo.suggestions;\n\n        var format = pipe(map(props(['Name', 'Text'])), fromPairs, toString)(suggestions);\n        setSuggestColumns(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            [key]: {\n              Type: 'Text',\n              SuggestType: 'Search',\n              Suggest: {\n                Items: suggestions\n              },\n              Format: format,\n              EditFormat: format\n            }\n          });\n        });\n      }).catch(function (error) {\n        console.log('TCL: error', error);\n      });\n    }, autocompleteColumns);\n  }, [autocompleteColumns]);\n  return suggestColumns;\n}\n\nfunction makeGridBatchData(grid, _ref2) {\n  var rowIdKey = _ref2.rowIdKey,\n      userSeq = _ref2.userSeq;\n  return makeBatchData(changesAsJSON(grid.GetXmlData('changes,nogrid,noio')), {\n    rowIdKey: rowIdKey,\n    userSeq: userSeq\n  });\n}\n\nvar OwpPresetTreeGrid = function OwpPresetTreeGrid(_ref3) {\n  var navigation = _ref3.navigation,\n      location = _ref3.location,\n      autocompleteColumns = _ref3.autocompleteColumns,\n      rows = _ref3.rows,\n      columns = _ref3.columns,\n      rowIdKey = _ref3.rowIdKey,\n      userSeq = _ref3.userSeq,\n      title = _ref3.title,\n      shouldShowToolbar = _ref3.shouldShowToolbar,\n      _onSave = _ref3.onSave,\n      _onSelect = _ref3.onSelect,\n      _onChange = _ref3.onChange,\n      restProps = _objectWithoutProperties(_ref3, [\"navigation\", \"location\", \"autocompleteColumns\", \"rows\", \"columns\", \"rowIdKey\", \"userSeq\", \"title\", \"shouldShowToolbar\", \"onSave\", \"onSelect\", \"onChange\"]);\n\n  var gridInstance = useRef(null); // permissions\n\n  var permissions = pipe(getFlatNavigation, find(propEq('url', location.pathname)), prop('permission'), mapPermissions)(navigation); // autosuggest\n\n  var suggestColumns = useSuggestColumns(autocompleteColumns);\n\n  if (!isEmpty(autocompleteColumns) && (isEmpty(suggestColumns) || Object.keys(suggestColumns).length !== Object.keys(autocompleteColumns).length)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldShowToolbar && /*#__PURE__*/React.createElement(TreeGridToolbar, {\n    title: title,\n    canAdd: permissions.C,\n    canEdit: permissions.U,\n    canDelete: permissions.D,\n    onAdd: function onAdd() {\n      gridInstance.current.ActionAddRowEnd(1);\n    },\n    onAddCopy: function onAddCopy() {\n      gridInstance.current.ActionCopySelectedEnd(1);\n      gridInstance.current.ActionDeselectAll(1);\n    },\n    onEdit: function onEdit() {},\n    onDelete: function onDelete() {\n      gridInstance.current.ActionDeleteSelected(1);\n      gridInstance.current.ActionDeselectAll(1);\n    },\n    onShowSettings: function onShowSettings() {\n      gridInstance.current.ActionShowColumns();\n    },\n    onDownloadExcel: function onDownloadExcel() {\n      gridInstance.current.ActionExport();\n    },\n    onSave: function onSave() {\n      gridInstance.current.Save();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TreeGrid, Object.assign({}, restProps, {\n    columns: columns,\n    rows: rows,\n    cfgOptions: _objectSpread({\n      Adding: treeGridBoolMap[permissions.C],\n      Editing: treeGridBoolMap[permissions.U],\n      Deleting: treeGridBoolMap[permissions.D]\n    }, rowIdKey && {\n      IdNames: [rowIdKey],\n      AutoIdPrefix: \"\".concat(rowIdKey, \"_\")\n    }),\n    columnOptions: suggestColumns,\n    onMount: function onMount(grid) {\n      gridInstance.current = grid;\n    },\n    onRowAdd: function onRowAdd() {},\n    onRowDelete: function onRowDelete(g, row) {},\n    onRowUndelete: function onRowUndelete(g, row) {},\n    onSelect: function onSelect(grid, row, deselect) {\n      if (!!row.id) {\n        var selectedData = getSelectedData(changesAsJSON(grid.GetXmlData('changes,selected,nogrid,noio')), {\n          rowIdKey: rowIdKey\n        });\n        var rowId = row.id.toString();\n        var newKey = rowIdKey || 'id';\n        var resultData = uniq(deselect ? selectedData.filter(function (selected) {\n          return selected[newKey] !== rowId;\n        }) : [{\n          [newKey]: rowId\n        }].concat(_toConsumableArray(selectedData)));\n\n        _onSelect(resultData);\n      }\n    },\n    onSave: function onSave(grid) {\n      _onSave(makeGridBatchData(grid, {\n        rowIdKey: rowIdKey,\n        userSeq: userSeq\n      }));\n    },\n    onChange: function onChange(grid) {\n      _onChange(makeGridBatchData(grid, {\n        rowIdKey: rowIdKey,\n        userSeq: userSeq\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  })));\n};\n\nOwpPresetTreeGrid.propTypes = {\n  /**\r\n   * OWP 서비스로 호출된 데이터를 통해 검색가능한 셀렉트 박스 형식으로 표시 할 때 사용\r\n   * 선언된 컬럼의 키 값을 기준으로 한다.\r\n   */\n  autocompleteColumns: PropTypes.objectOf(PropTypes.shape({\n    query: PropTypes.shape({\n      url: PropTypes.string.isRequired,\n      params: PropTypes.object\n    })\n  })),\n\n  /**\r\n   * 컬럼의 타입을 셀렉트 박스 형식으로 표시 할 때 사용\r\n   * 선언된 컬럼의 키 값을 기준으로 한다.\r\n   */\n  selectColumns: PropTypes.objectOf(PropTypes.shape({\n    labelKey: PropTypes.string.isRequired,\n    valueKey: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.object).isRequired\n  })),\n\n  /**\r\n   * 컬럼의 타입을 라디오 버튼 형식으로 표시 할 때 사용\r\n   * 선언된 컬럼의 키 값을 기준으로 한다.\r\n   */\n  radioColumns: PropTypes.objectOf(PropTypes.shape({\n    labelKey: PropTypes.string.isRequired,\n    valueKey: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.object).isRequired\n  })),\n  // suggestColumns: PropTypes.object,\n\n  /**\r\n   * 셀(cell)의 타입을 셀렉트 박스 형식으로 표시 할 때 사용\r\n   * 선언된 컬럼의 키 값을 기준으로 한다.\r\n   */\n  selectCells: PropTypes.objectOf(PropTypes.shape({\n    labelKey: PropTypes.string.isRequired,\n    valueKey: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.object).isRequired\n  })),\n\n  /**\r\n   * 셀(cell)의 타입을 라디오 버튼 형식으로 표시 할 때 사용\r\n   * 선언된 컬럼의 키 값을 기준으로 한다.\r\n   */\n  radioCells: PropTypes.objectOf(PropTypes.shape({\n    labelKey: PropTypes.string.isRequired,\n    valueKey: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.object).isRequired\n  })),\n\n  /**\r\n   * Update, Delete 및 Select 경우 동적인 PK 를 처리하기 위해 사용\r\n   * 선언된 PK 이름 (예: `OWP_Order_Panel.ORDERSEQ`) 을 기준으로 pk id 를 추출한다.\r\n   */\n  rowIdKey: PropTypes.string,\n\n  /**\r\n   * 툴바 타이틀\r\n   */\n  title: PropTypes.string,\n\n  /**\r\n   * 툴바 디스플레이 여부 플래그\r\n   */\n  shouldShowToolbar: PropTypes.bool,\n\n  /**\r\n   * TreeGrid의 Save 이벤트가 호출 된 후 실행\r\n   *\r\n   * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터들이 rest api 형식에 맞게 변경되서 전달 됨\r\n   */\n  onSave: PropTypes.func,\n\n  /**\r\n   * TreeGrid의 Checkbox 이벤트(click) 발생 시 실행\r\n   *\r\n   * @param {Array} object [{rowIdKey: \"1\"}, ...]\r\n   */\n  onSelect: PropTypes.func,\n\n  /**\r\n   * TreeGrid에서 CUD 발생 시 실행\r\n   *\r\n   * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터들이 rest api 형식에 맞게 변경되서 전달 됨\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  userSeq: PropTypes.number\n};\nOwpPresetTreeGrid.defaultProps = {\n  selectColumns: {},\n  radioColumns: {},\n  selectCells: {},\n  radioCells: {},\n  rowIdKey: null,\n  userSeq: null,\n  title: '',\n  shouldShowToolbar: true,\n  onSelect: function onSelect() {},\n  onSave: function onSave() {},\n  onChange: function onChange() {}\n};\n\nfunction mapStateToProps(_ref4) {\n  var fuse = _ref4.fuse,\n      auth = _ref4.auth;\n  return {\n    navigation: fuse.navigation,\n    userSeq: path(['user', 'data', 'userSeq'], auth)\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(OwpPresetTreeGrid));","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/components/TreeGrid/OwpPresetTreeGrid.js"],"names":["isEmpty","query","getFlatNavigation","mapDataToOwpPresetFormProps","PropTypes","find","forEachObjIndexed","fromPairs","map","path","pipe","prop","propEq","props","toString","uniq","React","useEffect","useRef","useState","connect","withRouter","TreeGrid","TreeGridToolbar","changesAsJSON","getSelectedData","makeBatchData","treeGridBoolMap","false","true","permissionBoolMap","T","F","mapPermissions","C_PERMISSION","R_PERMISSION","D_PERMISSION","C","R","U","D","useSuggestColumns","autocompleteColumns","suggestColumns","setSuggestColumns","value","key","url","then","data","dataKey","labelKey","valueKey","suggestions","format","prevState","Type","SuggestType","Suggest","Items","Format","EditFormat","catch","error","console","log","makeGridBatchData","grid","rowIdKey","userSeq","GetXmlData","OwpPresetTreeGrid","navigation","location","rows","columns","title","shouldShowToolbar","onSave","onSelect","onChange","restProps","gridInstance","permissions","pathname","Object","keys","length","current","ActionAddRowEnd","ActionCopySelectedEnd","ActionDeselectAll","ActionDeleteSelected","ActionShowColumns","ActionExport","Save","Adding","Editing","Deleting","IdNames","AutoIdPrefix","g","row","deselect","id","selectedData","rowId","newKey","resultData","filter","selected","propTypes","objectOf","shape","string","isRequired","params","object","selectColumns","arrayOf","radioColumns","selectCells","radioCells","bool","func","number","defaultProps","mapStateToProps","fuse","auth"],"mappings":"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","sourcesContent":["/**\r\n * @deprecated `owp/wrapper/OwpTreeGrid`를 사용해주세요.\r\n */\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { query } from 'owp/api';\r\nimport { getFlatNavigation } from 'owp/common/navigation';\r\nimport { mapDataToOwpPresetFormProps } from 'owp/components/Form/util';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    find,\r\n    forEachObjIndexed,\r\n    fromPairs,\r\n    map,\r\n    path,\r\n    pipe,\r\n    prop,\r\n    propEq,\r\n    props,\r\n    toString,\r\n    uniq,\r\n} from 'ramda';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport TreeGrid from './TreeGrid';\r\nimport TreeGridToolbar from './TreeGridToolbar';\r\nimport { changesAsJSON, getSelectedData, makeBatchData } from './util';\r\n\r\nconst treeGridBoolMap = {\r\n    false: 0,\r\n    true: 1,\r\n};\r\n\r\nconst permissionBoolMap = {\r\n    T: true,\r\n    F: false,\r\n};\r\n\r\nfunction mapPermissions({\r\n    C_PERMISSION = 'T',\r\n    R_PERMISSION = 'T',\r\n    // U_PERMISSION = 'T',\r\n    D_PERMISSION = 'T',\r\n} = {}) {\r\n    return {\r\n        C: !!permissionBoolMap[C_PERMISSION],\r\n        R: !!permissionBoolMap[R_PERMISSION],\r\n        U: !!permissionBoolMap[C_PERMISSION], // 등록 권한과 수정 권한은 현재 정책상 동일\r\n        D: !!permissionBoolMap[D_PERMISSION],\r\n    };\r\n}\r\n\r\nfunction useSuggestColumns(autocompleteColumns) {\r\n    const [suggestColumns, setSuggestColumns] = useState({});\r\n\r\n    useEffect(() => {\r\n        forEachObjIndexed((value, key) => {\r\n            query({ url: value.query.url })\r\n                .then((data) => {\r\n                    const { suggestions } = mapDataToOwpPresetFormProps({\r\n                        dataKey: 'suggestions',\r\n                        labelKey: 'Text',\r\n                        valueKey: 'Name',\r\n                    })(data);\r\n                    const format = pipe(\r\n                        map(props(['Name', 'Text'])),\r\n                        fromPairs,\r\n                        toString\r\n                    )(suggestions);\r\n\r\n                    setSuggestColumns((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            [key]: {\r\n                                Type: 'Text',\r\n                                SuggestType: 'Search',\r\n                                Suggest: {\r\n                                    Items: suggestions,\r\n                                },\r\n                                Format: format,\r\n                                EditFormat: format,\r\n                            },\r\n                        };\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    console.log('TCL: error', error);\r\n                });\r\n        }, autocompleteColumns);\r\n    }, [autocompleteColumns]);\r\n\r\n    return suggestColumns;\r\n}\r\n\r\nfunction makeGridBatchData(grid, { rowIdKey, userSeq }) {\r\n    return makeBatchData(changesAsJSON(grid.GetXmlData('changes,nogrid,noio')), {\r\n        rowIdKey,\r\n        userSeq,\r\n    });\r\n}\r\n\r\nconst OwpPresetTreeGrid = ({\r\n    navigation,\r\n    location,\r\n    autocompleteColumns,\r\n    rows,\r\n    columns,\r\n\r\n    rowIdKey,\r\n\r\n    userSeq,\r\n\r\n    // common props\r\n    title,\r\n    shouldShowToolbar,\r\n\r\n    onSave,\r\n    onSelect,\r\n    onChange,\r\n\r\n    ...restProps\r\n}) => {\r\n    const gridInstance = useRef(null);\r\n\r\n    // permissions\r\n    const permissions = pipe(\r\n        getFlatNavigation,\r\n        find(propEq('url', location.pathname)),\r\n        prop('permission'),\r\n        mapPermissions\r\n    )(navigation);\r\n\r\n    // autosuggest\r\n    const suggestColumns = useSuggestColumns(autocompleteColumns);\r\n\r\n    if (\r\n        !isEmpty(autocompleteColumns) &&\r\n        (isEmpty(suggestColumns) ||\r\n            Object.keys(suggestColumns).length !== Object.keys(autocompleteColumns).length)\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {shouldShowToolbar && (\r\n                <TreeGridToolbar\r\n                    title={title}\r\n                    canAdd={permissions.C}\r\n                    canEdit={permissions.U}\r\n                    canDelete={permissions.D}\r\n                    onAdd={() => {\r\n                        gridInstance.current.ActionAddRowEnd(1);\r\n                    }}\r\n                    onAddCopy={() => {\r\n                        gridInstance.current.ActionCopySelectedEnd(1);\r\n                        gridInstance.current.ActionDeselectAll(1);\r\n                    }}\r\n                    onEdit={() => {}}\r\n                    onDelete={() => {\r\n                        gridInstance.current.ActionDeleteSelected(1);\r\n                        gridInstance.current.ActionDeselectAll(1);\r\n                    }}\r\n                    onShowSettings={() => {\r\n                        gridInstance.current.ActionShowColumns();\r\n                    }}\r\n                    onDownloadExcel={() => {\r\n                        gridInstance.current.ActionExport();\r\n                    }}\r\n                    onSave={() => {\r\n                        gridInstance.current.Save();\r\n                    }}\r\n                />\r\n            )}\r\n            <TreeGrid\r\n                {...restProps}\r\n                columns={columns}\r\n                rows={rows}\r\n                cfgOptions={{\r\n                    Adding: treeGridBoolMap[permissions.C],\r\n                    Editing: treeGridBoolMap[permissions.U],\r\n                    Deleting: treeGridBoolMap[permissions.D],\r\n                    ...(rowIdKey && {\r\n                        IdNames: [rowIdKey],\r\n                        AutoIdPrefix: `${rowIdKey}_`,\r\n                    }),\r\n                }}\r\n                columnOptions={suggestColumns}\r\n                onMount={(grid) => {\r\n                    gridInstance.current = grid;\r\n                }}\r\n                onRowAdd={() => {}}\r\n                onRowDelete={(g, row) => {}}\r\n                onRowUndelete={(g, row) => {}}\r\n                onSelect={(grid, row, deselect) => {\r\n                    if (!!row.id) {\r\n                        const selectedData = getSelectedData(\r\n                            changesAsJSON(grid.GetXmlData('changes,selected,nogrid,noio')),\r\n                            { rowIdKey }\r\n                        );\r\n\r\n                        const rowId = row.id.toString();\r\n                        const newKey = rowIdKey || 'id';\r\n\r\n                        const resultData = uniq(\r\n                            deselect\r\n                                ? selectedData.filter((selected) => selected[newKey] !== rowId)\r\n                                : [{ [newKey]: rowId }, ...selectedData]\r\n                        );\r\n\r\n                        onSelect(resultData);\r\n                    }\r\n                }}\r\n                onSave={(grid) => {\r\n                    onSave(makeGridBatchData(grid, { rowIdKey, userSeq }));\r\n                }}\r\n                onChange={(grid) => {\r\n                    onChange(makeGridBatchData(grid, { rowIdKey, userSeq }));\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nOwpPresetTreeGrid.propTypes = {\r\n    /**\r\n     * OWP 서비스로 호출된 데이터를 통해 검색가능한 셀렉트 박스 형식으로 표시 할 때 사용\r\n     * 선언된 컬럼의 키 값을 기준으로 한다.\r\n     */\r\n    autocompleteColumns: PropTypes.objectOf(\r\n        PropTypes.shape({\r\n            query: PropTypes.shape({\r\n                url: PropTypes.string.isRequired,\r\n                params: PropTypes.object,\r\n            }),\r\n        })\r\n    ),\r\n\r\n    /**\r\n     * 컬럼의 타입을 셀렉트 박스 형식으로 표시 할 때 사용\r\n     * 선언된 컬럼의 키 값을 기준으로 한다.\r\n     */\r\n    selectColumns: PropTypes.objectOf(\r\n        PropTypes.shape({\r\n            labelKey: PropTypes.string.isRequired,\r\n            valueKey: PropTypes.string.isRequired,\r\n            data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n        })\r\n    ),\r\n\r\n    /**\r\n     * 컬럼의 타입을 라디오 버튼 형식으로 표시 할 때 사용\r\n     * 선언된 컬럼의 키 값을 기준으로 한다.\r\n     */\r\n    radioColumns: PropTypes.objectOf(\r\n        PropTypes.shape({\r\n            labelKey: PropTypes.string.isRequired,\r\n            valueKey: PropTypes.string.isRequired,\r\n            data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n        })\r\n    ),\r\n\r\n    // suggestColumns: PropTypes.object,\r\n\r\n    /**\r\n     * 셀(cell)의 타입을 셀렉트 박스 형식으로 표시 할 때 사용\r\n     * 선언된 컬럼의 키 값을 기준으로 한다.\r\n     */\r\n    selectCells: PropTypes.objectOf(\r\n        PropTypes.shape({\r\n            labelKey: PropTypes.string.isRequired,\r\n            valueKey: PropTypes.string.isRequired,\r\n            data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n        })\r\n    ),\r\n\r\n    /**\r\n     * 셀(cell)의 타입을 라디오 버튼 형식으로 표시 할 때 사용\r\n     * 선언된 컬럼의 키 값을 기준으로 한다.\r\n     */\r\n    radioCells: PropTypes.objectOf(\r\n        PropTypes.shape({\r\n            labelKey: PropTypes.string.isRequired,\r\n            valueKey: PropTypes.string.isRequired,\r\n            data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n        })\r\n    ),\r\n\r\n    /**\r\n     * Update, Delete 및 Select 경우 동적인 PK 를 처리하기 위해 사용\r\n     * 선언된 PK 이름 (예: `OWP_Order_Panel.ORDERSEQ`) 을 기준으로 pk id 를 추출한다.\r\n     */\r\n    rowIdKey: PropTypes.string,\r\n\r\n    /**\r\n     * 툴바 타이틀\r\n     */\r\n    title: PropTypes.string,\r\n\r\n    /**\r\n     * 툴바 디스플레이 여부 플래그\r\n     */\r\n    shouldShowToolbar: PropTypes.bool,\r\n\r\n    /**\r\n     * TreeGrid의 Save 이벤트가 호출 된 후 실행\r\n     *\r\n     * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터들이 rest api 형식에 맞게 변경되서 전달 됨\r\n     */\r\n    onSave: PropTypes.func,\r\n\r\n    /**\r\n     * TreeGrid의 Checkbox 이벤트(click) 발생 시 실행\r\n     *\r\n     * @param {Array} object [{rowIdKey: \"1\"}, ...]\r\n     */\r\n    onSelect: PropTypes.func,\r\n\r\n    /**\r\n     * TreeGrid에서 CUD 발생 시 실행\r\n     *\r\n     * @param {Array} object TreeGrid에서 CUD(Create, Update, Delete) 된 데이터들이 rest api 형식에 맞게 변경되서 전달 됨\r\n     */\r\n    onChange: PropTypes.func,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    userSeq: PropTypes.number,\r\n};\r\n\r\nOwpPresetTreeGrid.defaultProps = {\r\n    selectColumns: {},\r\n    radioColumns: {},\r\n    selectCells: {},\r\n    radioCells: {},\r\n\r\n    rowIdKey: null,\r\n\r\n    userSeq: null,\r\n\r\n    title: '',\r\n    shouldShowToolbar: true,\r\n\r\n    onSelect: () => {},\r\n    onSave: () => {},\r\n    onChange: () => {},\r\n};\r\n\r\nfunction mapStateToProps({ fuse, auth }) {\r\n    return {\r\n        navigation: fuse.navigation,\r\n        userSeq: path(['user', 'data', 'userSeq'], auth),\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(OwpPresetTreeGrid));\r\n"]},"metadata":{},"sourceType":"module"}