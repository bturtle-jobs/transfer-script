{"ast":null,"code":"/**\r\n * 그리드에서 사용할만한 유틸 함수 모음.\r\n * @author hw.kim\r\n * @date 2020-05-12\r\n *\r\n * @update 2020-05-19 15:50\r\n * @work removeSelect 함수 추가\r\n * @update 2020-05-25 12:54\r\n * @work onGridLoad 함수 추가\r\n * @update 2020-05-26 12:12\r\n * @work @owp/common에 포함됨에 따라 함수명 변경\r\n *\r\n * how to use\r\n * import { saveGridSelect, restoreGridSelect, ... } from '@owp/common';\r\n */\n\n/**\r\n * 선택한 Row 저장하는 객체\r\n */\nvar selectedList = {};\n/**\r\n * Row 구분하는 키값 저장하는 객체\r\n */\n\nvar selectKey = {};\n/**\r\n * 내부 함수. gridID로 그리드 객체 찾는 함수.\r\n * TGEvent에서 가져옴.\r\n * @param {String} gridId\r\n */\n\nvar getGridByID = function getGridByID(gridId) {\n  var G = window.GetGrids();\n\n  for (var i = 0; i < G.length; i++) {\n    if (G[i].Data.id === gridId) {\n      return G[i];\n    }\n  }\n\n  return null;\n};\n/**\r\n * 그리드에서 선택된 데이터를 저장하는 함수.\r\n * 이게 선행되어야 복원이 가능함.\r\n * @param {String} gridId 그리드 ID\r\n * @param {String} rowKey 모든 row 중에서 고유한 값을 가지고 있는 키\r\n * @returns {Boolean} 그리드를 찾을 수 없으면 false 반환\r\n */\n\n\nexport var saveGridSelect = function saveGridSelect(gridId, rowKey) {\n  var G = getGridByID(gridId);\n\n  if (!!G) {\n    selectedList[gridId] = G.GetSelRows();\n    selectKey[gridId] = rowKey;\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\r\n * 선택되었던 항목 복원하기\r\n * @param {String} gridId 그리드 ID\r\n */\n\nexport var restoreGridSelect = function restoreGridSelect(gridId) {\n  // 그리드 리로드 후 사용할 수 있도록 세팅.\n  var interval = window.setInterval(function () {\n    var G = getGridByID(gridId);\n\n    if (!!G && G.Loading == 0) {\n      window.clearInterval(interval);\n      reselect(G);\n    }\n  }, 200);\n};\n/**\r\n * 내부 함수. 실제 복원 기능을 수행하는 함수.\r\n * @param {TGrid} Grid TreeGrid TGrid 객체\r\n * @returns {Boolean} 선택이 불가능할 경우 false 리턴.\r\n */\n\nvar reselect = function reselect(Grid) {\n  if (!!Grid) {\n    var gridId = Grid.Data.id;\n    var rowKey = selectKey[gridId];\n    var selected = selectedList[gridId];\n    var currentRows = Object.values(Grid[\"Rows\"]).filter(function (item) {\n      return item.Kind == \"Data\";\n    });\n\n    if (!selected || !currentRows) {\n      // 저장된 선택 row가 없거나 row 자체가 없는 그리드일 경우\n      return false;\n    }\n\n    for (var i = 0; i < selected.length; i++) {\n      for (var j = 0; j < currentRows.length; j++) {\n        var currentRowValue = currentRows[j][rowKey];\n\n        if (!!currentRowValue) {\n          if (currentRowValue == selected[i][rowKey]) {\n            Grid.SelectRow(currentRows[j], 1);\n            break;\n          } // continue;\n\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\r\n * 저장되어있는 선택된 row 데이터를 지우기.\r\n * @param {string} gridId 그리드 ID\r\n */\n\n\nexport var removeGridSelect = function removeGridSelect(gridId) {\n  delete selectedList[gridId];\n  delete selectKey[gridId];\n};\n/**\r\n * 그리드의 모든 row 지우기\r\n * @param {string} gridId 그리드 ID\r\n */\n\nexport var clearGridData = function clearGridData(gridId) {\n  var G = getGridByID(gridId);\n\n  if (!!G) {\n    G.ClearBody();\n  }\n};\n/**\r\n * 그리드에 새로운 데이터 넣기\r\n * @param {string} gridId 그리드 아이디\r\n * @param {Array} dataArray 그리드에 넣을 데이터 배열\r\n * @returns {Boolean} 그리드를 찾을 수 없거나 dataArray가 배열이 아니면 false\r\n */\n\nexport var setGridData = function setGridData(gridId, dataArray) {\n  var G = getGridByID(gridId);\n\n  if (!G) {\n    return false;\n  }\n\n  if (!Array.isArray(dataArray)) {\n    return false;\n  }\n\n  G.Source.Data = {\n    AlertError: undefined,\n    Data: {\n      Body: [dataArray]\n    },\n    Debug: {},\n    Format: \"Internal\",\n    JavaScript: \"\",\n    Method: \"Get\",\n    Name: \"Data\",\n    Param: {},\n    Sync: 0\n  };\n  G.ReloadBody();\n  return true;\n};\n/**\r\n * 그리드가 정상적으로 로딩된 이후에만 데이터를 불러올 수 있도록 콜백함수를 등록한다.\r\n * @param {string} gridId 그리드 ID\r\n * @param {function} callback 그리드 로딩된 이후에 실행할 함수\r\n */\n\nexport var onGridLoad = function onGridLoad(gridId, callback) {\n  var interval = window.setInterval(function () {\n    var g = getGridByID(gridId);\n\n    if (!!g) {\n      //console.log(gridId, \"is loading:\", g.Loading ? true : false);\n      if (g.Loading === 0) {\n        window.clearInterval(interval);\n\n        if (typeof callback == \"function\") {\n          callback(g);\n        }\n      }\n    }\n  }, 100);\n};\n/**\r\n * 내부함수.\r\n * @param {TGrid} Grid TreeGrid TGrid 객체\r\n * @param {string|number} rowIdOrRowIndex Row ID 혹은 Row 인덱스 번호\r\n * @returns {TRow} TreeGrid Trow 객체\r\n */\n\nvar getRow = function getRow(Grid, rowIdOrRowIndex) {\n  if (!!Grid) {\n    var rows = Grid[\"Rows\"]; // rowId 일 경우 키 값으로 조회가 가능함.\n\n    if (!!rows[rowIdOrRowIndex]) {\n      return rows[rowIdOrRowIndex];\n    } else {\n      return Object.values(rows).filter(function (item) {\n        return item.Kind == \"Data\";\n      }).filter(function (item) {\n        return item.HasIndex == rowIdOrRowIndex;\n      })[0];\n    }\n  } else {\n    return null;\n  }\n};\n/**\r\n * 이미 로딩이 끝난 그리드의 특정 행 속성을 바꾸는 함수.\r\n * @param {string} gridId 그리드 ID\r\n * @param {number} rowIndexOrRowObject Row 인덱스 번호 혹은 TreeGrid TRow 객체\r\n * @param {string} columnName 바꿀 컬럼 명\r\n * @param {string} attrName 바꿀 속성 이름. *대소문자 주의\r\n * @param {string} attrValue 바꿀 값.\r\n * @param {Boolean} refresh 즉시 그리드 갱신 여부. 기본 false\r\n */\n\n\nexport var setRowAttribute = function setRowAttribute(gridId, rowIndexOrRowObject, columnName, attrName, attrValue) {\n  var refresh = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var g = getGridByID(gridId);\n\n  if (!!g) {\n    var row = typeof rowIndexOrRowObject == \"object\" ? rowIndexOrRowObject : getRow(g, rowIndexOrRowObject);\n    g.SetAttribute(row, columnName, attrName, attrValue, refresh, true);\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\r\n * 이미 로딩이 끝난 그리드의 특정 행 속성을 한번에 여러개 바꾸는 함수.\r\n * @param {string} gridId 그리드 ID\r\n * @param {number} rowIndexOrRowObject Row 인덱스 번호 혹은 TreeGrid TRow 객체\r\n * @param {string} columnName 바꿀 컬럼 명\r\n * @param {object} attrObject 바꿀 속성명 및 값이 들어있는 객체. 이와 같은 형태여야 한다. { AttrName: AttrValue, Type: \"Date\" }\r\n */\n\nexport var setRowAttributes = function setRowAttributes(gridId, rowIndexOrRowObject, columnName, attrObject) {\n  if (typeof attrObject == \"object\") {\n    var keys = Object.keys(attrObject);\n    keys.forEach(function (key, i) {\n      setRowAttribute(gridId, rowIndexOrRowObject, columnName, key, attrObject[key], keys.length - 1 == i);\n    });\n  } else {\n    return false;\n  }\n};","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/src/main/GridUtill.js"],"names":["selectedList","selectKey","getGridByID","gridId","G","window","GetGrids","i","length","Data","id","saveGridSelect","rowKey","GetSelRows","restoreGridSelect","interval","setInterval","Loading","clearInterval","reselect","Grid","selected","currentRows","Object","values","filter","item","Kind","j","currentRowValue","SelectRow","removeGridSelect","clearGridData","ClearBody","setGridData","dataArray","Array","isArray","Source","AlertError","undefined","Body","Debug","Format","JavaScript","Method","Name","Param","Sync","ReloadBody","onGridLoad","callback","g","getRow","rowIdOrRowIndex","rows","HasIndex","setRowAttribute","rowIndexOrRowObject","columnName","attrName","attrValue","refresh","row","SetAttribute","setRowAttributes","attrObject","keys","forEach","key"],"mappings":"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","sourcesContent":["/**\r\n * 그리드에서 사용할만한 유틸 함수 모음.\r\n * @author hw.kim\r\n * @date 2020-05-12\r\n *\r\n * @update 2020-05-19 15:50\r\n * @work removeSelect 함수 추가\r\n * @update 2020-05-25 12:54\r\n * @work onGridLoad 함수 추가\r\n * @update 2020-05-26 12:12\r\n * @work @owp/common에 포함됨에 따라 함수명 변경\r\n *\r\n * how to use\r\n * import { saveGridSelect, restoreGridSelect, ... } from '@owp/common';\r\n */\r\n\r\n/**\r\n * 선택한 Row 저장하는 객체\r\n */\r\nlet selectedList = {};\r\n/**\r\n * Row 구분하는 키값 저장하는 객체\r\n */\r\nlet selectKey = {};\r\n\r\n/**\r\n * 내부 함수. gridID로 그리드 객체 찾는 함수.\r\n * TGEvent에서 가져옴.\r\n * @param {String} gridId\r\n */\r\nconst getGridByID = function(gridId) {\r\n    const G = window.GetGrids()\r\n    for (let i = 0; i < G.length; i++) {\r\n        if (G[i].Data.id === gridId) {\r\n            return G[i]\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * 그리드에서 선택된 데이터를 저장하는 함수.\r\n * 이게 선행되어야 복원이 가능함.\r\n * @param {String} gridId 그리드 ID\r\n * @param {String} rowKey 모든 row 중에서 고유한 값을 가지고 있는 키\r\n * @returns {Boolean} 그리드를 찾을 수 없으면 false 반환\r\n */\r\nexport const saveGridSelect = function (gridId, rowKey) {\r\n    let G = getGridByID(gridId);\r\n    if(!!G) {\r\n        selectedList[gridId] = G.GetSelRows();\r\n        selectKey[gridId] = rowKey;\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * 선택되었던 항목 복원하기\r\n * @param {String} gridId 그리드 ID\r\n */\r\nexport const restoreGridSelect = function(gridId) {\r\n\r\n    // 그리드 리로드 후 사용할 수 있도록 세팅.\r\n    let interval = window.setInterval(()=>{\r\n        let G = getGridByID(gridId);\r\n        if(!!G && G.Loading == 0) {\r\n            window.clearInterval(interval);\r\n            reselect(G);\r\n        }\r\n    }, 200);\r\n}\r\n\r\n/**\r\n * 내부 함수. 실제 복원 기능을 수행하는 함수.\r\n * @param {TGrid} Grid TreeGrid TGrid 객체\r\n * @returns {Boolean} 선택이 불가능할 경우 false 리턴.\r\n */\r\nconst reselect = function (Grid) {\r\n    if(!!Grid) {\r\n        let gridId = Grid.Data.id;\r\n        let rowKey = selectKey[gridId];\r\n        let selected = selectedList[gridId];\r\n        let currentRows = Object.values(Grid[\"Rows\"]).filter(item => item.Kind == \"Data\");\r\n\r\n        if(!selected || !currentRows) {\r\n            // 저장된 선택 row가 없거나 row 자체가 없는 그리드일 경우\r\n            return false;\r\n        }\r\n\r\n        for(let i=0;i<selected.length;i++) {\r\n            for(let j=0;j<currentRows.length;j++) {\r\n                let currentRowValue = currentRows[j][rowKey];\r\n                if(!!currentRowValue) {\r\n                    if(currentRowValue == selected[i][rowKey]) {\r\n                        Grid.SelectRow(currentRows[j], 1);\r\n                        break;\r\n                    }\r\n                    // continue;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * 저장되어있는 선택된 row 데이터를 지우기.\r\n * @param {string} gridId 그리드 ID\r\n */\r\nexport const removeGridSelect = function (gridId) {\r\n    delete selectedList[gridId];\r\n    delete selectKey[gridId];\r\n}\r\n\r\n/**\r\n * 그리드의 모든 row 지우기\r\n * @param {string} gridId 그리드 ID\r\n */\r\nexport const clearGridData = function (gridId) {\r\n    let G = getGridByID(gridId);\r\n    if(!!G) {\r\n        G.ClearBody();\r\n    }\r\n}\r\n\r\n/**\r\n * 그리드에 새로운 데이터 넣기\r\n * @param {string} gridId 그리드 아이디\r\n * @param {Array} dataArray 그리드에 넣을 데이터 배열\r\n * @returns {Boolean} 그리드를 찾을 수 없거나 dataArray가 배열이 아니면 false\r\n */\r\nexport const setGridData = function (gridId, dataArray) {\r\n    let G = getGridByID(gridId);\r\n    if(!G) {\r\n        return false;\r\n    }\r\n\r\n    if(!Array.isArray(dataArray)) {\r\n        return false;\r\n    }\r\n\r\n    G.Source.Data = {\r\n        AlertError: undefined,\r\n        Data: { Body: [ dataArray ] },\r\n        Debug: {},\r\n        Format: \"Internal\",\r\n        JavaScript: \"\",\r\n        Method: \"Get\",\r\n        Name: \"Data\",\r\n        Param: {},\r\n        Sync: 0\r\n    }\r\n    G.ReloadBody();\r\n    return true;\r\n}\r\n\r\n/**\r\n * 그리드가 정상적으로 로딩된 이후에만 데이터를 불러올 수 있도록 콜백함수를 등록한다.\r\n * @param {string} gridId 그리드 ID\r\n * @param {function} callback 그리드 로딩된 이후에 실행할 함수\r\n */\r\nexport const onGridLoad = function (gridId, callback) {\r\n    let interval = window.setInterval(()=>{\r\n        let g = getGridByID(gridId);\r\n        if(!!g) {\r\n            //console.log(gridId, \"is loading:\", g.Loading ? true : false);\r\n            if(g.Loading === 0) {\r\n                window.clearInterval(interval);\r\n\r\n                if(typeof callback == \"function\") {\r\n                    callback(g);\r\n                }\r\n            }\r\n        }\r\n    }, 100)\r\n}\r\n\r\n/**\r\n * 내부함수.\r\n * @param {TGrid} Grid TreeGrid TGrid 객체\r\n * @param {string|number} rowIdOrRowIndex Row ID 혹은 Row 인덱스 번호\r\n * @returns {TRow} TreeGrid Trow 객체\r\n */\r\nconst getRow = function(Grid, rowIdOrRowIndex) {\r\n    if(!!Grid) {\r\n        let rows = Grid[\"Rows\"];\r\n\r\n        // rowId 일 경우 키 값으로 조회가 가능함.\r\n        if(!!rows[rowIdOrRowIndex]) {\r\n            return rows[rowIdOrRowIndex];\r\n        } else {\r\n            return Object.values(rows).filter(item => item.Kind == \"Data\").filter(item => item.HasIndex == rowIdOrRowIndex)[0];\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * 이미 로딩이 끝난 그리드의 특정 행 속성을 바꾸는 함수.\r\n * @param {string} gridId 그리드 ID\r\n * @param {number} rowIndexOrRowObject Row 인덱스 번호 혹은 TreeGrid TRow 객체\r\n * @param {string} columnName 바꿀 컬럼 명\r\n * @param {string} attrName 바꿀 속성 이름. *대소문자 주의\r\n * @param {string} attrValue 바꿀 값.\r\n * @param {Boolean} refresh 즉시 그리드 갱신 여부. 기본 false\r\n */\r\nexport const setRowAttribute = function (gridId, rowIndexOrRowObject, columnName, attrName, attrValue, refresh = false) {\r\n    let g = getGridByID(gridId);\r\n    if(!!g) {\r\n        let row = typeof rowIndexOrRowObject == \"object\" ? rowIndexOrRowObject : getRow(g, rowIndexOrRowObject);\r\n        g.SetAttribute(row, columnName, attrName, attrValue, refresh, true);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * 이미 로딩이 끝난 그리드의 특정 행 속성을 한번에 여러개 바꾸는 함수.\r\n * @param {string} gridId 그리드 ID\r\n * @param {number} rowIndexOrRowObject Row 인덱스 번호 혹은 TreeGrid TRow 객체\r\n * @param {string} columnName 바꿀 컬럼 명\r\n * @param {object} attrObject 바꿀 속성명 및 값이 들어있는 객체. 이와 같은 형태여야 한다. { AttrName: AttrValue, Type: \"Date\" }\r\n */\r\nexport const setRowAttributes = function (gridId, rowIndexOrRowObject, columnName, attrObject) {\r\n    if(typeof attrObject == \"object\") {\r\n        let keys = Object.keys(attrObject);\r\n        keys.forEach((key, i) => {\r\n            setRowAttribute(gridId, rowIndexOrRowObject, columnName, key, attrObject[key], (keys.length - 1) == i);\r\n        })\r\n    } else {\r\n        return false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}