{"ast":null,"code":"/**\r\n * Curve line series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { LineSeries, LineSeriesDataItem } from \"../../charts/series/LineSeries\";\nimport { registry } from \"../../core/Registry\";\nimport { Sprite } from \"../../core/Sprite\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[CurveLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar CurveLineSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(CurveLineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurveLineSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return CurveLineSeriesDataItem;\n}(LineSeriesDataItem);\n\nexport { CurveLineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link ICurveLineSeriesEvents} for a list of available Events\r\n * @see {@link ICurveLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar CurveLineSeries =\n/** @class */\nfunction (_super) {\n  __extends(CurveLineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurveLineSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurveLineSeries\";\n    _this.connectEnds = false;\n    _this.bulletsContainer.mask = new Sprite();\n    _this.topOffset = 0.2;\n    _this.bottomOffset = 0.2;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  CurveLineSeries.prototype.createDataItem = function () {\n    return new CurveLineSeriesDataItem();\n  };\n  /**\r\n   * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n   *\r\n   * @param    dataItem   Data item\r\n   * @param    xKey       Name of X data field\r\n   * @param    yKey       Name of Y data field\r\n   * @param    locationX  X location\r\n   * @param    locationY  Y location\r\n   * @param    stackKeyX  ?\r\n   * @param    stackKeyY  ?\r\n   * @returns             Coordinates\r\n   */\n\n\n  CurveLineSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\n    if (!stackKeyX) {\n      stackKeyX = \"valueX\";\n    }\n\n    if (!stackKeyY) {\n      stackKeyY = \"valueY\";\n    }\n\n    var renderer = this.yAxis.renderer;\n    var radius = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), -renderer.radius * (1 + this.bottomOffset), -renderer.innerRadius * (1 + this.topOffset));\n    var xx = this.xAxis.getX(dataItem, xKey, locationX, stackKeyX);\n    var xy = this.xAxis.getY(dataItem, xKey, locationX, stackKeyX);\n    var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\n    return {\n      x: xx + radius * $math.cos(angle),\n      y: xy + radius * $math.sin(angle)\n    };\n  };\n  /**\r\n   * [addPoints description]\r\n   *\r\n   * @todo Description\r\n   * @param points    [description]\r\n   * @param dataItem  [description]\r\n   * @param xField    [description]\r\n   * @param yField    [description]\r\n   * @param backwards [description]\r\n   */\n\n\n  CurveLineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\n    var point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\n\n    if (point) {\n      points.push(point);\n    }\n  };\n  /**\r\n   * Returns an SVG path to be used as a mask for the series.\r\n   *\r\n   * @return SVG path\r\n   */\n\n\n  CurveLineSeries.prototype.getMaskPath = function () {\n    var rendererY = this.yAxis.renderer;\n    var path = rendererY.getPositionRangePath(this.yAxis.start, this.yAxis.end);\n    var bulletsContainer = this.bulletsContainer;\n\n    if (this.chart && this.chart.maskBullets) {\n      if (!bulletsContainer.mask) {\n        bulletsContainer.mask = new Sprite();\n      }\n\n      bulletsContainer.mask.path = path;\n    } else {\n      bulletsContainer.mask = undefined;\n    }\n\n    return path;\n  };\n  /**\r\n   * [drawSegment description]\r\n   *\r\n   * @todo Description\r\n   * @param segment      [description]\r\n   * @param points       [description]\r\n   * @param closePoints  [description]\r\n   */\n\n\n  CurveLineSeries.prototype.drawSegment = function (segment, points, closePoints) {\n    if (this.connectEnds) {\n      // adds one point to the beginning of closePoints array, if needed\n      if (this.dataFields[this._xOpenField] || this.dataFields[this._yOpenField] || this.stacked) {\n        points.push(points[0]);\n\n        if (closePoints.length > 0) {\n          closePoints.unshift(closePoints[closePoints.length - 1]);\n        }\n      }\n    }\n\n    _super.prototype.drawSegment.call(this, segment, points, closePoints);\n  };\n\n  Object.defineProperty(CurveLineSeries.prototype, \"connectEnds\", {\n    /**\r\n     * @return Connect?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"connectEnds\");\n    },\n\n    /**\r\n     * Should the last and and first data points be connected, forming a complete\r\n     * closed circle?\r\n     *\r\n     * @default false\r\n     * @param  value  Connect?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"connectEnds\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurveLineSeries.prototype, \"topOffset\", {\n    /**\r\n     * @return Top offset\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"topOffset\");\n    },\n\n    /**\r\n     * A relative part of an series elements allowed outside of the outer edge of\r\n     * the \"plot area\".\r\n     *\r\n     * @default 0.2\r\n     * @param  value  Top offset\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"topOffset\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurveLineSeries.prototype, \"bottomOffset\", {\n    /**\r\n     * @return Bottom offset\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"bottomOffset\");\n    },\n\n    /**\r\n     * A relative part of an series elements allowed outside of the inner edge of\r\n     * the \"plot area\".\r\n     *\r\n     * @default 0.2\r\n     * @param  value  Bottom offset\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"bottomOffset\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [positionBulletReal description]\r\n   *\r\n   * @param {Sprite} bullet    [description]\r\n   * @param {number} positionX [description]\r\n   * @param {number} positionY [description]\r\n   */\n\n  CurveLineSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\n      bullet.visible = false;\n    }\n\n    bullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\n  };\n\n  CurveLineSeries.prototype.setXAxis = function (axis) {\n    _super.prototype.setXAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  CurveLineSeries.prototype.setYAxis = function (axis) {\n    _super.prototype.setYAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  CurveLineSeries.prototype.updateRendererRefs = function () {\n    var rendererX = this.xAxis.renderer;\n    var rendererY = this.yAxis.renderer;\n    rendererX.axisRendererY = rendererY;\n    rendererY.axisRendererX = rendererX;\n  };\n\n  return CurveLineSeries;\n}(LineSeries);\n\nexport { CurveLineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurveLineSeries\"] = CurveLineSeries;\nregistry.registeredClasses[\"CurveLineSeriesDataItem\"] = CurveLineSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/CurveLineSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Curve line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"../../charts/series/LineSeries\";\r\nimport { LineSeriesSegment } from \"../../charts/series/LineSeriesSegment\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurveLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurveLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurveLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurveLineSeries]].\r\n */\r\nexport interface ICurveLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurveLineSeries]].\r\n */\r\nexport interface ICurveLineSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\ttopOffset?: number;\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\tbottomOffset?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurveLineSeries]].\r\n */\r\nexport interface ICurveLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveLineSeriesAdapters extends ILineSeriesAdapters, ICurveLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link ICurveLineSeriesEvents} for a list of available Events\r\n * @see {@link ICurveLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CurveLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurveLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CurveLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveLineSeries\";\r\n\t\tthis.connectEnds = false;\r\n\r\n\t\tthis.bulletsContainer.mask = new Sprite();\r\n\r\n\t\tthis.topOffset = 0.2;\r\n\t\tthis.bottomOffset = 0.2;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CurveLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: CurveLineSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\r\n\t\tlet radius: number = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), -renderer.radius * (1 + this.bottomOffset), -renderer.innerRadius * (1 + this.topOffset));\r\n\r\n\t\tlet xx: number = this.xAxis.getX(dataItem, xKey, locationX, stackKeyX);\r\n\t\tlet xy: number = this.xAxis.getY(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: xx + radius * $math.cos(angle), y: xy + radius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet rendererY = this.yAxis.renderer;\r\n\t\tlet path = rendererY.getPositionRangePath(this.yAxis.start, this.yAxis.end);\r\n\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tif (this.chart && this.chart.maskBullets) {\r\n\t\t\tif (!bulletsContainer.mask) {\r\n\t\t\t\tbulletsContainer.mask = new Sprite();\r\n\t\t\t}\r\n\t\t\tbulletsContainer.mask.path = path;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbulletsContainer.mask = undefined;\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tif (this.connectEnds) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default false\r\n\t * @param  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t * \r\n\t * @default 0.2\r\n\t * @param  value  Top offset\r\n\t */\r\n\tpublic set topOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"topOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top offset\r\n\t */\r\n\tpublic get topOffset(): number {\r\n\t\treturn this.getPropertyValue(\"topOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t * \r\n\t * @default 0.2\r\n\t * @param  value  Bottom offset\r\n\t */\r\n\tpublic set bottomOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"bottomOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom offset\r\n\t */\r\n\tpublic get bottomOffset(): number {\r\n\t\treturn this.getPropertyValue(\"bottomOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * [positionBulletReal description]\r\n\t *\r\n\t * @param {Sprite} bullet    [description]\r\n\t * @param {number} positionX [description]\r\n\t * @param {number} positionY [description]\r\n\t */\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis:Axis){\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis:Axis){\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\t\r\n\r\n\tprotected updateRendererRefs(){\r\n\t\tlet rendererX = <AxisRendererCurveX>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t\trendererY.axisRendererX = rendererX;\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveLineSeries\"] = CurveLineSeries;\r\nregistry.registeredClasses[\"CurveLineSeriesDataItem\"] = CurveLineSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}