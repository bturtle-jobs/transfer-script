{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\src\\\\main\\\\content\\\\include\\\\C0202002_tab07_tab01_tab02.js\";\nimport React, { Component } from 'react';\nimport { OwpButton, OwpSearchDateField, OwpSearchSelectField, OwpSearchTextField, OwpTextField, OwpTreeGrid, OwpMessage, OwpDialog } from 'owp/wrapper';\nimport Formsy from 'formsy-react';\nimport * as TGEvent from 'owp/TGEvent';\nimport moment from 'moment';\nimport { query, mutate } from 'owp/api';\nimport { setGridData, setRowAttribute, restoreGridSelect, setRowAttributes } from 'main/GridUtill';\nimport Pop_C0202002_03 from './Pop_C0202002_03';\nimport Pop_C0202002_04 from './Pop_C0202002_04';\nimport { saveGridSelect } from 'main/GridUtill';\nvar GRID_ID = 'C0202011'; // const MEASURING_EQUIPMENT = 'MEASURING_EQUIPMENT';\n// const MAX_ROW = 6;\n// const FACILITY = 'FACILITY';\n// const MATERIAL = 'MATERIAL';\n// const facilityDummy = [\n//     { 'OWP_FACILITIES.FACILITY_NAME': 'R-1117', 'OWP_FACILITIES.FACILITY_SEQ': '28' },\n//     { 'OWP_FACILITIES.FACILITY_NAME': 'AC-1105', 'OWP_FACILITIES.FACILITY_SEQ': '29' },\n//     { 'OWP_FACILITIES.FACILITY_NAME': 'AC-1110', 'OWP_FACILITIES.FACILITY_SEQ': '27' },\n// ];\n// const measuringDummy = [\n//     {\n//         'MEASURING_EQUIPMENT.EQUIPMENT_NAME': 'B-1102-2020.12.15',\n//         'MEASURING_EQUIPMENT.EQUIPMENT_SEQ': '30',\n//     },\n//     {\n//         'MEASURING_EQUIPMENT.EQUIPMENT_NAME': 'A-1102-2020.12.15',\n//         'MEASURING_EQUIPMENT.EQUIPMENT_SEQ': '31',\n//     },\n// ];\n// const inputSeedDummy = [\n//     {\n//         'INPUT_SPEED.NAME': '00.00 kg/hr or kg/min',\n//         'INPUT_SPEED.SEQ': '11',\n//     },\n//     {\n//         'INPUT_SPEED.NAME': '00.30 kg/hr or 00.30 kg/min',\n//         'INPUT_SPEED.SEQ': '12',\n//     },\n// ];\n// const mock = `[{\"FACILITY\":\"28\",\"MATERIAL\":\"mock\",\"CONFIG_TYPE\":\"mock\",\"TOTAL_INPUT\":\"mock\",\"INPUT_SPEED\":\"11\",\"MEASURING_EQUIPMENT\":\"31\"},{\"FACILITY\":\"29\",\"MATERIAL\":\"mock\",\"CONFIG_TYPE\":\"mock\",\"TOTAL_INPUT\":\"mock\",\"INPUT_SPEED\":\"12\",\"MEASURING_EQUIPMENT\":\"30\"}]`;\n\nvar Page = /*#__PURE__*/function (_Component) {\n  _inherits(Page, _Component);\n\n  var _super = _createSuper(Page);\n\n  function Page(props) {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _super.call(this, props);\n\n    _this.loadStdMainGrid = function () {\n      query({\n        url: 'listOwpMbrProcessStdByUnitProcess',\n        params: {\n          jsondata: JSON.stringify({\n            'OWP_MBR_PROCESS_STD.UNITPROCESSSEQ': _this.props.PROCESSSEQ + ''\n          })\n        }\n      }).then(function (res) {\n        console.log(res);\n        res.forEach(function (item) {\n          switch (item['OWP_MBR_PROCESS_STD.STD_RATE']) {\n            case '1':\n              break;\n\n            case '2':\n              break;\n\n            default:\n              break;\n          }\n        });\n        setGridData(GRID_ID, res);\n\n        _this.setState(function (state) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            gridLength: res.length\n          });\n        });\n      }).catch(function (error) {\n        console.error(error);\n      });\n    };\n\n    _this.openDialogCheck = function () {\n      _this.setState({\n        isDialogCheckOpen: true\n      });\n\n      _this.setState({\n        popMessage: '저장하시겠습니까?'\n      });\n    };\n\n    _this.closeDialogCheck = function () {\n      _this.setState({\n        isDialogCheckOpen: false\n      });\n    };\n\n    _this.clickDelete = function () {\n      _this.onDelete('START');\n    };\n\n    _this.onDelete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var G, _rows;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              G = TGEvent.getGridByID(GRID_ID);\n\n              if (G) {\n                _rows = G.GetSelRows();\n\n                if (_rows.length > 0) {\n                  _rows.filter(function (item) {\n                    return item.Kind === 'Data';\n                  }).map(function (row) {\n                    var PROCESSSTDSEQ = row['OWP_MBR_PROCESS_STD.PROCESSSTDSEQ'];\n                    var data = {\n                      cudtype: 'delete',\n                      'OWP_MBR_PROCESS_STD.PROCESSSTDSEQ': PROCESSSTDSEQ\n                    };\n                    mutate({\n                      url: '/deleteOwpMbrProcessStd/' + PROCESSSTDSEQ + '',\n                      data: data\n                    }).then(function (res) {\n                      _this.loadStdMainGrid();\n\n                      G.ReloadBody();\n\n                      _this.closeDialogCheck();\n                    }).catch(function (error) {\n                      console.error(error);\n                    });\n                  });\n                }\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.state = {\n      gridLength: 0,\n      facilityEnum: null,\n      measuringEnum: null,\n      inputSpeedEnum: null,\n      isDialogCheckOpen: false,\n      //TODO:change this\n      popMessage: '저장하시겠습니까',\n      PROCESSSTDSEQ: 0\n    };\n    return _this;\n  }\n  /**\r\n   * Owp에서 사용하는 인풋에 대해 모두 사용할 수 있는 change 이벤트 리시버\r\n   * @param {Event} event 발생한 이벤트 객체\r\n   * @param {Function} callback 콜백 함수. 인풋의 name, value를 인수로 전달함.\r\n   */\n\n\n  _createClass(Page, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _showApprovalDialog = this.showApprovalDialog;\n      this.loadStdMainGrid();\n      TGEvent.OWPTGSelect(GRID_ID, function (is, row) {\n        saveGridSelect(GRID_ID, 'OWP_MBR_PROCESS_STD.PROCESSSTDSEQ');\n\n        if (is) {\n          _this2.setState(function (state) {\n            return {\n              PROCESSSTDSEQ: row['OWP_MBR_PROCESS_STD.PROCESSSTDSEQ']\n            };\n          });\n        } else {\n          _this2.setState(function (state) {\n            return {\n              PROCESSSTDSEQ: 0\n            };\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(OwpDialog, {\n        onOpen: this.state.isDialogCheckOpen,\n        dialogActions: /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"w-full center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(OwpButton, {\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: this.clickDelete,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 33\n          }\n        }, \"\\uC800\\uC7A5\"), /*#__PURE__*/React.createElement(OwpButton, {\n          color: \"secondary\",\n          variant: \"outlined\",\n          onClick: this.closeDialogCheck,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 33\n          }\n        }, \"\\uCDE8\\uC18C\"))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }\n      }, this.state.popMessage)), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6 b\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 25\n        }\n      }, \"Std \\uB300\\uC2DC\\uBCF4\\uB4DC \\uC124\\uC815\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        style: {\n          textAlign: 'right',\n          paddingRight: '0'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          right: '0',\n          margin: '1px 155px 0 0'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Pop_C0202002_03, {\n        PROCESSSEQ: this.props.PROCESSSEQ,\n        gridLength: this.state.gridLength,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          right: '0',\n          margin: '1px 70px 0 0'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Pop_C0202002_04, {\n        PROCESSSEQ: this.props.PROCESSSEQ,\n        PROCESSSTDSEQ: this.state.PROCESSSTDSEQ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(OwpButton, {\n        color: 'secondary',\n        variant: 'outlined',\n        onClick: this.openDialogCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 29\n        }\n      }, \"\\uC0AD\\uC81C\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(OwpTreeGrid, {\n        id: \"C0202011\",\n        LayoutUrl: \"assets/data/C0202011Def.xml\" // DataUrl={'/assets/data/C0202000Data.xml'}\n        ,\n        width: \"100%\",\n        height: \"40vh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 29\n        }\n      })))));\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nexport default Page;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/src/main/content/include/C0202002_tab07_tab01_tab02.js"],"names":["React","Component","OwpButton","OwpSearchDateField","OwpSearchSelectField","OwpSearchTextField","OwpTextField","OwpTreeGrid","OwpMessage","OwpDialog","Formsy","TGEvent","moment","query","mutate","setGridData","setRowAttribute","restoreGridSelect","setRowAttributes","Pop_C0202002_03","Pop_C0202002_04","saveGridSelect","GRID_ID","Page","props","loadStdMainGrid","url","params","jsondata","JSON","stringify","PROCESSSEQ","then","res","console","log","forEach","item","setState","state","gridLength","length","catch","error","openDialogCheck","isDialogCheckOpen","popMessage","closeDialogCheck","clickDelete","onDelete","G","getGridByID","_rows","GetSelRows","filter","Kind","map","row","PROCESSSTDSEQ","data","cudtype","ReloadBody","facilityEnum","measuringEnum","inputSpeedEnum","_showApprovalDialog","showApprovalDialog","OWPTGSelect","is","width","textAlign","paddingRight","position","right","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    OwpButton,\r\n    OwpSearchDateField,\r\n    OwpSearchSelectField,\r\n    OwpSearchTextField,\r\n    OwpTextField,\r\n    OwpTreeGrid,\r\n    OwpMessage,\r\n    OwpDialog,\r\n} from 'owp/wrapper';\r\nimport Formsy from 'formsy-react';\r\nimport * as TGEvent from 'owp/TGEvent';\r\nimport moment from 'moment';\r\nimport { query, mutate } from 'owp/api';\r\nimport { setGridData, setRowAttribute, restoreGridSelect, setRowAttributes } from 'main/GridUtill';\r\nimport Pop_C0202002_03 from './Pop_C0202002_03';\r\nimport Pop_C0202002_04 from './Pop_C0202002_04';\r\nimport { saveGridSelect } from 'main/GridUtill';\r\n\r\nconst GRID_ID = 'C0202011';\r\n// const MEASURING_EQUIPMENT = 'MEASURING_EQUIPMENT';\r\n// const MAX_ROW = 6;\r\n// const FACILITY = 'FACILITY';\r\n// const MATERIAL = 'MATERIAL';\r\n// const facilityDummy = [\r\n//     { 'OWP_FACILITIES.FACILITY_NAME': 'R-1117', 'OWP_FACILITIES.FACILITY_SEQ': '28' },\r\n//     { 'OWP_FACILITIES.FACILITY_NAME': 'AC-1105', 'OWP_FACILITIES.FACILITY_SEQ': '29' },\r\n//     { 'OWP_FACILITIES.FACILITY_NAME': 'AC-1110', 'OWP_FACILITIES.FACILITY_SEQ': '27' },\r\n// ];\r\n\r\n// const measuringDummy = [\r\n//     {\r\n//         'MEASURING_EQUIPMENT.EQUIPMENT_NAME': 'B-1102-2020.12.15',\r\n//         'MEASURING_EQUIPMENT.EQUIPMENT_SEQ': '30',\r\n//     },\r\n//     {\r\n//         'MEASURING_EQUIPMENT.EQUIPMENT_NAME': 'A-1102-2020.12.15',\r\n//         'MEASURING_EQUIPMENT.EQUIPMENT_SEQ': '31',\r\n//     },\r\n// ];\r\n\r\n// const inputSeedDummy = [\r\n//     {\r\n//         'INPUT_SPEED.NAME': '00.00 kg/hr or kg/min',\r\n//         'INPUT_SPEED.SEQ': '11',\r\n//     },\r\n//     {\r\n//         'INPUT_SPEED.NAME': '00.30 kg/hr or 00.30 kg/min',\r\n//         'INPUT_SPEED.SEQ': '12',\r\n//     },\r\n// ];\r\n\r\n// const mock = `[{\"FACILITY\":\"28\",\"MATERIAL\":\"mock\",\"CONFIG_TYPE\":\"mock\",\"TOTAL_INPUT\":\"mock\",\"INPUT_SPEED\":\"11\",\"MEASURING_EQUIPMENT\":\"31\"},{\"FACILITY\":\"29\",\"MATERIAL\":\"mock\",\"CONFIG_TYPE\":\"mock\",\"TOTAL_INPUT\":\"mock\",\"INPUT_SPEED\":\"12\",\"MEASURING_EQUIPMENT\":\"30\"}]`;\r\n\r\nclass Page extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gridLength: 0,\r\n            facilityEnum: null,\r\n            measuringEnum: null,\r\n            inputSpeedEnum: null,\r\n            isDialogCheckOpen: false,\r\n            //TODO:change this\r\n            popMessage: '저장하시겠습니까',\r\n            PROCESSSTDSEQ: 0,\r\n        };\r\n    }\r\n    /**\r\n     * Owp에서 사용하는 인풋에 대해 모두 사용할 수 있는 change 이벤트 리시버\r\n     * @param {Event} event 발생한 이벤트 객체\r\n     * @param {Function} callback 콜백 함수. 인풋의 name, value를 인수로 전달함.\r\n     */\r\n    componentDidMount() {\r\n        const _showApprovalDialog = this.showApprovalDialog;\r\n        this.loadStdMainGrid();\r\n        TGEvent.OWPTGSelect(GRID_ID, (is, row) => {\r\n            saveGridSelect(GRID_ID, 'OWP_MBR_PROCESS_STD.PROCESSSTDSEQ');\r\n            if (is) {\r\n                this.setState((state) => {\r\n                    return { PROCESSSTDSEQ: row['OWP_MBR_PROCESS_STD.PROCESSSTDSEQ'] };\r\n                });\r\n            } else {\r\n                this.setState((state) => {\r\n                    return { PROCESSSTDSEQ: 0 };\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    loadStdMainGrid = () => {\r\n        query({\r\n            url: 'listOwpMbrProcessStdByUnitProcess',\r\n            params: {\r\n                jsondata: JSON.stringify({\r\n                    'OWP_MBR_PROCESS_STD.UNITPROCESSSEQ': this.props.PROCESSSEQ + '',\r\n                }),\r\n            },\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                res.forEach((item) => {\r\n                    switch (item['OWP_MBR_PROCESS_STD.STD_RATE']) {\r\n                        case '1':\r\n                            break;\r\n                        case '2':\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                });\r\n                setGridData(GRID_ID, res);\r\n                this.setState((state) => {\r\n                    return {\r\n                        ...state,\r\n                        gridLength: res.length,\r\n                    };\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    // loadStdMainConfig = () => {\r\n    //     //TODO:change this load to another UI\r\n    //     query({\r\n    //         url: 'loadOwpMbrUnitProcessMainConfig/' + 139,\r\n    //     }).then((res) => {\r\n    //         if (res['OWP_MBR_UNIT_PROCESS.MAIN_CONFIG']) {\r\n    //             let gridData = JSON.parse(mock);\r\n    //             let facilityEnum = this.loadFacilityEnum();\r\n    //             let measuringEnum = this.loadMeasuringEnum();\r\n    //             let inputSpeedEnum = this.loadInputSpeedEnum();\r\n    //             //let functionEnum = this.loadFunctionEnum();\r\n    //             this.setState((state) => {\r\n    //                 return {\r\n    //                     ...state,\r\n    //                     gridLength: gridData.length,\r\n    //                     facilityEnum: facilityEnum,\r\n    //                     measuringEnum: measuringEnum,\r\n    //                     inputSpeedEnum: inputSpeedEnum,\r\n    //                     //functionEnum: functionEnum,\r\n    //                 };\r\n    //             });\r\n\r\n    //             setGridData('C0202011', gridData);\r\n    //             window.setTimeout(() => {\r\n    //                 this.setGridDynamicColumnType();\r\n    //             }, 100);\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    // handleAddRow = () => {\r\n    //     if (this.state.gridLength >= MAX_ROW) {\r\n    //         OwpMessage({\r\n    //             message: '6 미만',\r\n    //             variant: 'error',\r\n    //         });\r\n    //     } else {\r\n    //         const G = TGEvent.getGridByID(GRID_ID);\r\n    //         G.ActionAcceptEdit();\r\n    //         TGEvent.OWPTGAddRow(GRID_ID, (row) => {\r\n    //             this.setDynamicRowAttributes(row);\r\n    //             this.setState((state) => {\r\n    //                 return {\r\n    //                     ...state,\r\n    //                     gridLength: state.gridLength + 1,\r\n    //                 };\r\n    //             });\r\n    //         });\r\n    //     }\r\n    // };\r\n\r\n    // handleUpdate = () => {\r\n    //     this.fillGridData();\r\n    //     this.setGridDynamicColumnType();\r\n    // };\r\n\r\n    // handleDeleteRow = () => {\r\n    //     this.fillGridData(true);\r\n    //     this.setGridDynamicColumnType();\r\n    // };\r\n\r\n    // setGridDynamicColumnType = () => {\r\n    //     const G = TGEvent.getGridByID(GRID_ID);\r\n    //     if (G) {\r\n    //         const _rows = Object.values(G['Rows']).filter((item) => item.Kind == 'Data');\r\n    //         _rows.forEach((row) => {\r\n    //             this.setDynamicRowAttributes(row);\r\n    //         });\r\n    //     }\r\n    // };\r\n\r\n    // setDynamicRowAttributes = (row) => {\r\n    //     setRowAttributes(GRID_ID, row, FACILITY, this.state.facilityEnum);\r\n    //     setRowAttributes(GRID_ID, row, MEASURING_EQUIPMENT, this.state.measuringEnum);\r\n    //     setRowAttributes(GRID_ID, row, 'INPUT_SPEED', this.state.inputSpeedEnum);\r\n    // };\r\n\r\n    // fillGridData = (isDelete) => {\r\n    //     const G = TGEvent.getGridByID(GRID_ID);\r\n    //     if (G) {\r\n    //         const _rows = Object.values(G['Rows']).filter((item) => item.Kind == 'Data');\r\n    //         let arrData = [];\r\n    //         _rows.some((row) => {\r\n    //             if (isDelete && row['Selected'] === 1) {\r\n    //                 return false;\r\n    //             } else {\r\n    //                 arrData.push({\r\n    //                     FACILITY: row['FACILITY'],\r\n    //                     MATERIAL: row['MATERIAL'],\r\n    //                     CONFIG_TYPE: row['CONFIG_TYPE'],\r\n    //                     TOTAL_INPUT: row['TOTAL_INPUT'],\r\n    //                     INPUT_SPEED: row['INPUT_SPEED'],\r\n    //                     MEASURING_EQUIPMENT: row['MEASURING_EQUIPMENT'],\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //         setGridData(GRID_ID, arrData);\r\n    //         this.setState((state) => {\r\n    //             return { ...state, gridLength: arrData.length };\r\n    //         });\r\n    //     }\r\n    // };\r\n\r\n    // loadFacilityEnum = () => {\r\n    //     //TODO:load from server\r\n    //     //TODO: write new service to get facility from parent of unit process id=\r\n\r\n    //     let res = facilityDummy;\r\n    //     if (res) {\r\n    //         let enums = '';\r\n    //         let enumKeys = '';\r\n    //         res.forEach((item) => {\r\n    //             enums = enums + '|' + item['OWP_FACILITIES.FACILITY_NAME'];\r\n    //             enumKeys = enumKeys + '|' + item['OWP_FACILITIES.FACILITY_SEQ'];\r\n    //         });\r\n\r\n    //         return {\r\n    //             Type: 'Enum',\r\n    //             Enum: enums,\r\n    //             EnumKeys: enumKeys,\r\n    //         };\r\n    //     }\r\n    //     return null;\r\n    // };\r\n\r\n    // loadFunctionEnum = () => {\r\n    //     query({\r\n    //         url: 'listIPX_CommonCodeLowAC',\r\n    //         params: {\r\n    //             jsondata: JSON.stringify({\r\n    //                 'IPX_COMMONCODE.GROUPID': 'D023000',\r\n    //             }),\r\n    //         },\r\n    //     }).then((res) => {\r\n    //         console.log(res);\r\n    //     });\r\n    // };\r\n\r\n    // loadMeasuringEnum = () => {\r\n    //     //TODO:load from server\r\n    //     //TODO: write new service to get facility from parent of unit process id=\r\n\r\n    //     let res = measuringDummy;\r\n    //     if (res) {\r\n    //         let enums = '';\r\n    //         let enumKeys = '';\r\n    //         res.forEach((item) => {\r\n    //             enums = enums + '|' + item['MEASURING_EQUIPMENT.EQUIPMENT_NAME'];\r\n    //             enumKeys = enumKeys + '|' + item['MEASURING_EQUIPMENT.EQUIPMENT_SEQ'];\r\n    //         });\r\n\r\n    //         return {\r\n    //             Type: 'Enum',\r\n    //             Enum: enums,\r\n    //             EnumKeys: enumKeys,\r\n    //         };\r\n    //     }\r\n    //     return null;\r\n    // };\r\n\r\n    // loadInputSpeedEnum = () => {\r\n    //     //TODO:load from server\r\n    //     //TODO: write new service to get facility from parent of unit process id=\r\n\r\n    //     let res = inputSeedDummy;\r\n    //     if (res) {\r\n    //         let enums = '';\r\n    //         let enumKeys = '';\r\n    //         res.forEach((item) => {\r\n    //             enums = enums + '|' + item['INPUT_SPEED.NAME'];\r\n    //             enumKeys = enumKeys + '|' + item['INPUT_SPEED.SEQ'];\r\n    //         });\r\n\r\n    //         return {\r\n    //             Type: 'Enum',\r\n    //             Enum: enums,\r\n    //             EnumKeys: enumKeys,\r\n    //         };\r\n    //     }\r\n    //     return null;\r\n    // };\r\n\r\n    // loadInputSpeedEnum = () => {\r\n    //     //TODO:load from server\r\n    //     //TODO: write new service to get facility from parent of unit process id=\r\n\r\n    //     let res = inputSeedDummy;\r\n    //     if (res) {\r\n    //         let enums = '';\r\n    //         let enumKeys = '';\r\n    //         res.forEach((item) => {\r\n    //             enums = enums + '|' + item['INPUT_SPEED.NAME'];\r\n    //             enumKeys = enumKeys + '|' + item['INPUT_SPEED.SEQ'];\r\n    //         });\r\n\r\n    //         return {\r\n    //             Type: 'Enum',\r\n    //             Enum: enums,\r\n    //             EnumKeys: enumKeys,\r\n    //         };\r\n    //     }\r\n    //     return null;\r\n    // };\r\n\r\n    // loadMesasuringEquipmentEnum = () => {};\r\n\r\n    openDialogCheck = () => {\r\n        this.setState({ isDialogCheckOpen: true });\r\n        this.setState({ popMessage: '저장하시겠습니까?' });\r\n    };\r\n\r\n    closeDialogCheck = () => {\r\n        this.setState({ isDialogCheckOpen: false });\r\n    };\r\n\r\n    clickDelete = () => {\r\n        this.onDelete('START');\r\n    };\r\n\r\n    onDelete = async () => {\r\n        const G = TGEvent.getGridByID(GRID_ID);\r\n        if (G) {\r\n            const _rows = G.GetSelRows();\r\n            if (_rows.length > 0) {\r\n                _rows\r\n                    .filter((item) => item.Kind === 'Data')\r\n                    .map((row) => {\r\n                        let PROCESSSTDSEQ = row['OWP_MBR_PROCESS_STD.PROCESSSTDSEQ'];\r\n                        const data = {\r\n                            cudtype: 'delete',\r\n                            'OWP_MBR_PROCESS_STD.PROCESSSTDSEQ': PROCESSSTDSEQ,\r\n                        };\r\n\r\n                        mutate({\r\n                            url: '/deleteOwpMbrProcessStd/' + PROCESSSTDSEQ + '',\r\n                            data,\r\n                        })\r\n                            .then((res) => {\r\n                                this.loadStdMainGrid();\r\n                                G.ReloadBody();\r\n                                this.closeDialogCheck();\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                            });\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <OwpDialog\r\n                    onOpen={this.state.isDialogCheckOpen}\r\n                    dialogActions={\r\n                        <React.Fragment>\r\n                            <div className=\"w-full center\">\r\n                                <OwpButton\r\n                                    color=\"secondary\"\r\n                                    variant=\"contained\"\r\n                                    onClick={this.clickDelete}\r\n                                >\r\n                                    저장\r\n                                </OwpButton>\r\n                                <OwpButton\r\n                                    color=\"secondary\"\r\n                                    variant=\"outlined\"\r\n                                    onClick={this.closeDialogCheck}\r\n                                >\r\n                                    취소\r\n                                </OwpButton>\r\n                            </div>\r\n                        </React.Fragment>\r\n                    }\r\n                >\r\n                    <React.Fragment>{this.state.popMessage}</React.Fragment>\r\n                </OwpDialog>\r\n                <div style={{ width: '100%' }}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6 b\">Std 대시보드 설정</div>\r\n                        <div className=\"col-md-6\" style={{ textAlign: 'right', paddingRight: '0' }}>\r\n                            {/* <OwpButton\r\n                                color={'secondary'}\r\n                                variant={'contained'}\r\n                                onClick={() => this.handleAddRow()}\r\n                            >\r\n                                추가\r\n                            </OwpButton> */}\r\n                            <div\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '0',\r\n                                    margin: '1px 155px 0 0',\r\n                                }}\r\n                            >\r\n                                <Pop_C0202002_03\r\n                                    PROCESSSEQ={this.props.PROCESSSEQ}\r\n                                    gridLength={this.state.gridLength}\r\n                                ></Pop_C0202002_03>\r\n                            </div>\r\n                            {/* <OwpButton\r\n                                color={'secondary'}\r\n                                variant={'contained'}\r\n                                onClick={() => this.handleUpdate()}\r\n                            >\r\n                                수정\r\n                            </OwpButton> */}\r\n                            <div\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '0',\r\n                                    margin: '1px 70px 0 0',\r\n                                }}\r\n                            >\r\n                                <Pop_C0202002_04\r\n                                    PROCESSSEQ={this.props.PROCESSSEQ}\r\n                                    PROCESSSTDSEQ={this.state.PROCESSSTDSEQ}\r\n                                ></Pop_C0202002_04>\r\n                            </div>\r\n                            <OwpButton\r\n                                color={'secondary'}\r\n                                variant={'outlined'}\r\n                                onClick={this.openDialogCheck}\r\n                            >\r\n                                삭제\r\n                            </OwpButton>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <OwpTreeGrid\r\n                                id=\"C0202011\"\r\n                                LayoutUrl=\"assets/data/C0202011Def.xml\"\r\n                                // DataUrl={'/assets/data/C0202000Data.xml'}\r\n                                width=\"100%\"\r\n                                height=\"40vh\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Page;\r\n"]},"metadata":{},"sourceType":"module"}