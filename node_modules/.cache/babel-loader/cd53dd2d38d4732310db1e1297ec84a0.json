{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { is, keys, path, pipe } from 'ramda';\n\nfunction mapDataToItems() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return data.map(function () {\n    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      label: item.CODENM || item['IPX_COMMONCODE.CODENM'],\n      value: item.CODEID || item['IPX_COMMONCODE.CODEID']\n    };\n  });\n}\n\nfunction mapCommonCode(codes) {\n  var commonCodes = {\n    codes: {}\n  };\n\n  var _iterator = _createForOfIteratorHelper(codes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var code = _step.value;\n      var key = pipe(keys, function (_keys) {\n        return is(Array, _keys) && is(String, _keys[0]) && _keys[0];\n      })(code);\n\n      if (!!key) {\n        commonCodes.codes[key] = pipe(path([key, 'CODES']), mapDataToItems)(code);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return commonCodes;\n}\n\nexport var SET_COMMON_CODE = '[COMMON] COMMON CODE';\n/**\r\n * Set User Data\r\n */\n\nexport function setCommonCodeData(codes) {\n  return function (dispatch) {\n    /*\r\n    Set Common Code Data\r\n     */\n    dispatch({\n      type: SET_COMMON_CODE,\n      payload: mapCommonCode(codes)\n    });\n  };\n}","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/auth/store/actions/common.actions.js"],"names":["is","keys","path","pipe","mapDataToItems","data","map","item","label","CODENM","value","CODEID","mapCommonCode","codes","commonCodes","code","key","_keys","Array","String","SET_COMMON_CODE","setCommonCodeData","dispatch","type","payload"],"mappings":";AAAA,SAASA,EAAT,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,QAAqC,OAArC;;AAEA,SAASC,cAAT,GAAmC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AAC/B,SAAOA,IAAI,CAACC,GAAL,CAAS;AAAA,QAACC,IAAD,uEAAQ,EAAR;AAAA,WAAgB;AAC5BC,MAAAA,KAAK,EAAED,IAAI,CAACE,MAAL,IAAeF,IAAI,CAAC,uBAAD,CADE;AAE5BG,MAAAA,KAAK,EAAEH,IAAI,CAACI,MAAL,IAAeJ,IAAI,CAAC,uBAAD;AAFE,KAAhB;AAAA,GAAT,CAAP;AAIH;;AAED,SAASK,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,MAAMC,WAAW,GAAG;AAAED,IAAAA,KAAK,EAAE;AAAT,GAApB;;AAD0B,6CAEPA,KAFO;AAAA;;AAAA;AAE1B,wDAA0B;AAAA,UAAfE,IAAe;AACtB,UAAMC,GAAG,GAAGb,IAAI,CACZF,IADY,EAEZ,UAAAgB,KAAK;AAAA,eAAIjB,EAAE,CAACkB,KAAD,EAAQD,KAAR,CAAF,IAAoBjB,EAAE,CAACmB,MAAD,EAASF,KAAK,CAAC,CAAD,CAAd,CAAtB,IAA4CA,KAAK,CAAC,CAAD,CAArD;AAAA,OAFO,CAAJ,CAGVF,IAHU,CAAZ;;AAKA,UAAI,CAAC,CAACC,GAAN,EAAW;AACPF,QAAAA,WAAW,CAACD,KAAZ,CAAkBG,GAAlB,IAAyBb,IAAI,CACzBD,IAAI,CAAC,CAACc,GAAD,EAAM,OAAN,CAAD,CADqB,EAEzBZ,cAFyB,CAAJ,CAGvBW,IAHuB,CAAzB;AAIH;AACJ;AAdyB;AAAA;AAAA;AAAA;AAAA;;AAgB1B,SAAOD,WAAP;AACH;;AAED,OAAO,IAAMM,eAAe,GAAG,sBAAxB;AAEP;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BR,KAA3B,EAAkC;AACrC,SAAO,UAAAS,QAAQ,EAAI;AACf;AACR;AACA;AACQA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEH,eADD;AAELI,MAAAA,OAAO,EAAEZ,aAAa,CAACC,KAAD;AAFjB,KAAD,CAAR;AAIH,GARD;AASH","sourcesContent":["import { is, keys, path, pipe } from 'ramda';\r\n\r\nfunction mapDataToItems(data = []) {\r\n    return data.map((item = {}) => ({\r\n        label: item.CODENM || item['IPX_COMMONCODE.CODENM'],\r\n        value: item.CODEID || item['IPX_COMMONCODE.CODEID'],\r\n    }));\r\n}\r\n\r\nfunction mapCommonCode(codes) {\r\n    const commonCodes = { codes: {} };\r\n    for (const code of codes) {\r\n        const key = pipe(\r\n            keys,\r\n            _keys => is(Array, _keys) && is(String, _keys[0]) && _keys[0]\r\n        )(code);\r\n\r\n        if (!!key) {\r\n            commonCodes.codes[key] = pipe(\r\n                path([key, 'CODES']),\r\n                mapDataToItems\r\n            )(code);\r\n        }\r\n    }\r\n\r\n    return commonCodes;\r\n}\r\n\r\nexport const SET_COMMON_CODE = '[COMMON] COMMON CODE';\r\n\r\n/**\r\n * Set User Data\r\n */\r\nexport function setCommonCodeData(codes) {\r\n    return dispatch => {\r\n        /*\r\n        Set Common Code Data\r\n         */\r\n        dispatch({\r\n            type: SET_COMMON_CODE,\r\n            payload: mapCommonCode(codes),\r\n        });\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}