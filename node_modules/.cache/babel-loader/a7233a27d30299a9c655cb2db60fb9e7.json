{"ast":null,"code":"/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n    'constant': /\\b[A-Z0-9_]{2,}\\b/,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'delimiter': {\n      pattern: /\\?>|<\\?(?:php|=)?/i,\n      alias: 'important'\n    },\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': null // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': null // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;\n  Prism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/(?:<\\?php|<\\?)/ig.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/prismjs/components/prism-php.js"],"names":["Prism","languages","php","extend","pattern","lookbehind","insertBefore","alias","inside","punctuation","greedy","string_interpolation","rest","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"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","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n\tPrism.languages.php = Prism.languages.extend('clike', {\n\t\t'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n\t\t'constant': /\\b[A-Z0-9_]{2,}\\b/,\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'shell-comment': {\n\t\t\tpattern: /(^|[^\\\\])#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'keyword', {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>|<\\?(?:php|=)?/i,\n\t\t\talias: 'important'\n\t\t},\n\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,\n\t\t'package': {\n\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\\\/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Must be defined after the function pattern\n\tPrism.languages.insertBefore('php', 'operator', {\n\t\t'property': {\n\t\t\tpattern: /(->)[\\w]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'nowdoc-string': {\n\t\t\tpattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'heredoc-string': {\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': null // See below\n\t\t\t}\n\t\t},\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'interpolation': null // See below\n\t\t\t}\n\t\t}\n\t});\n\t// The different types of PHP strings \"replace\" the C-like standard string\n\tdelete Prism.languages.php['string'];\n\n\tvar string_interpolation = {\n\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\trest: Prism.languages.php\n\t\t}\n\t};\n\tPrism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;\n\tPrism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;\n\n\tPrism.hooks.add('before-tokenize', function(env) {\n\t\tif (!/(?:<\\?php|<\\?)/ig.test(env.code)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar phpPattern = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function(env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n\t});\n\n}(Prism));"]},"metadata":{},"sourceType":"script"}