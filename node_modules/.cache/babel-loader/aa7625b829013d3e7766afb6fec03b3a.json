{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\owp\\\\src\\\\components\\\\Table\\\\PivotTable.js\";\n\nimport axios from 'axios';\nimport isEmpty from 'lodash/isEmpty';\nimport last from 'lodash/last';\nimport { showMessage } from 'owp/common';\nimport { FileDndZone, SelectTextField } from 'owp/components';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'react-pivottable/pivottable.css';\nimport PivotTableUI from 'react-pivottable/PivotTableUI';\nimport createPlotlyRenderers from 'react-pivottable/PlotlyRenderers';\nimport TableRenderers from 'react-pivottable/TableRenderers';\nimport Plot from 'react-plotly.js';\nimport XLSX from 'xlsx'; // constants\n\nvar ACCEPT = '.xlsx, .xlsb, .xlsm, .xls';\nvar ERROR_MESSAGES = {\n  warning: {\n    message: '올바른 XLSX 형식이 아닙니다.',\n    variant: 'warning'\n  },\n  error: {\n    message: 'XLSX 파일 로드를 실패했습니다.',\n    variant: 'error'\n  },\n  empty: {\n    message: '로드할 데이터가 없습니다.',\n    variant: 'warning'\n  }\n}; // create Plotly renderers via dependency injection\n\nvar PlotlyRenderers = createPlotlyRenderers(Plot); // regarding xlsx to json\n\nvar readXlsx = function readXlsx(data) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    if (!data || !data instanceof Blob || data.type === 'text/html') {\n      showMessage(ERROR_MESSAGES.error);\n      reject(data);\n      return;\n    }\n\n    var reader = new FileReader();\n    var canRABS = !!options.canRABS || !!reader.readAsBinaryString;\n\n    reader.onabort = function (error) {\n      showMessage(ERROR_MESSAGES.warning);\n      reject(error);\n    };\n\n    reader.onerror = function (error) {\n      showMessage(ERROR_MESSAGES.error);\n      reject(error);\n    };\n\n    reader.onload = function (e) {\n      var bstr = e.target.result;\n      var wb = XLSX.read(bstr, {\n        type: canRABS ? 'binary' : 'array',\n        cellDates: true,\n        cellNF: false,\n        cellText: false\n      });\n      resolve(wb);\n    };\n\n    if (canRABS) {\n      reader.readAsBinaryString(data);\n    } else {\n      reader.readAsArrayBuffer(data);\n    }\n  });\n};\n\nvar makeSheetToJson = function makeSheetToJson() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      data = _ref.data,\n      name = _ref.name;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!!data) {\n    var convertedData = XLSX.utils.sheet_to_json(data, _objectSpread({\n      raw: false\n    }, options));\n\n    if (Array.isArray(convertedData) && !isEmpty(convertedData)) {\n      showMessage({\n        message: \"\".concat(name, \" \\uC2DC\\uD2B8\\uB97C \\uC131\\uACF5\\uC801\\uC73C\\uB85C \\uB85C\\uB4DC \\uD588\\uC2B5\\uB2C8\\uB2E4.\"),\n        variant: 'success'\n      });\n      return convertedData;\n    }\n  }\n\n  showMessage(ERROR_MESSAGES.empty);\n  return [];\n};\n\nvar readXlsxFromDataURL = function readXlsxFromDataURL(dataURL) {\n  return new Promise(function (resolve, reject) {\n    if (ACCEPT.indexOf(last(last(dataURL.split('/')).split('.')).toLowerCase()) === -1) {\n      showMessage(ERROR_MESSAGES.warning);\n      reject(ERROR_MESSAGES.warning);\n      return;\n    }\n\n    axios(_objectSpread({\n      method: 'get',\n      url: dataURL,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest'\n      },\n      responseType: 'blob'\n    }, dataURL.indexOf('http') === -1 && {\n      baseURL: window.location.origin\n    })).then(function () {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          data = _ref2.data;\n\n      return readXlsx(data, {\n        canRABS: true\n      }).then(function (xlsxData) {\n        return resolve(xlsxData);\n      }).catch(function (error) {\n        return reject(error);\n      });\n    }).catch(function (error) {\n      return reject(error);\n    });\n  });\n};\n\nvar PivotTable = function PivotTable(_ref3) {\n  var sheetSelectProps = _ref3.sheetSelectProps,\n      sheetOptions = _ref3.sheetOptions,\n      dropZoneProps = _ref3.dropZoneProps,\n      dataURL = _ref3.dataURL,\n      data = _ref3.data,\n      pivotTableOnly = _ref3.pivotTableOnly,\n      restProps = _objectWithoutProperties(_ref3, [\"sheetSelectProps\", \"sheetOptions\", \"dropZoneProps\", \"dataURL\", \"data\", \"pivotTableOnly\"]);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      pivotTableData = _useState2[0],\n      setPivotTableData = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sheetData = _useState4[0],\n      setSheetData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sheetNames = _useState6[0],\n      setSheetNames = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedSheetName = _useState8[0],\n      setSelectedSheetName = _useState8[1];\n\n  var preparePivotTableData = function preparePivotTableData() {\n    var xlsxData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Set sheets\n    setSheetData(xlsxData.Sheets); // Set worksheet names\n\n    setSheetNames(xlsxData.SheetNames); // Get first sheet name\n\n    var sheetName = xlsxData.SheetNames[0];\n    setSelectedSheetName(sheetName); // Set first sheet\n\n    setPivotTableData(makeSheetToJson({\n      data: xlsxData.Sheets[sheetName],\n      name: sheetName\n    }, sheetOptions));\n  };\n\n  useEffect(function () {\n    if (dataURL && isEmpty(data)) {\n      readXlsxFromDataURL(dataURL).then(function (xlsxData) {\n        return preparePivotTableData(xlsxData);\n      }).catch(function (error) {\n        return console.error(error);\n      });\n      return;\n    }\n\n    if (!isEmpty(data) && Array.isArray(data)) {\n      setPivotTableData(data);\n    }\n  }, [dataURL, data]);\n  var handleChangeFiles = useCallback(function (nextFiles) {\n    if (isEmpty(nextFiles)) {\n      showMessage(ERROR_MESSAGES.warning);\n      return;\n    }\n\n    var acceptedFile = nextFiles[0];\n    readXlsx(acceptedFile).then(function (xlsxData) {\n      return preparePivotTableData(xlsxData);\n    }).catch(function (error) {\n      return console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: \"justify-center mx-8 my-8\"\n  }, restProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }), !pivotTableOnly && isEmpty(dataURL) && isEmpty(data) && /*#__PURE__*/React.createElement(FileDndZone, Object.assign({\n    className: \"my-8\",\n    style: {\n      width: '100%',\n      height: 80\n    }\n  }, dropZoneProps, {\n    useClickButtonEvent: true,\n    multiple: false,\n    accept: ACCEPT,\n    onDrop: handleChangeFiles,\n    onChange: handleChangeFiles,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  })), !pivotTableOnly && !isEmpty(sheetNames) && sheetNames.length > 1 && /*#__PURE__*/React.createElement(SelectTextField, Object.assign({\n    className: \"my-8\"\n  }, sheetSelectProps, {\n    value: selectedSheetName,\n    items: sheetNames.map(function (name) {\n      return {\n        label: name,\n        value: name\n      };\n    }),\n    onChange: function onChange(sheetName) {\n      setSelectedSheetName(sheetName);\n      setPivotTableData(makeSheetToJson({\n        data: sheetData[sheetName],\n        name: sheetName\n      }, sheetOptions));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PivotTableUI, Object.assign({\n    data: pivotTableData,\n    onChange: function onChange(nextData) {\n      return setPivotTableData(nextData);\n    },\n    renderers: Object.assign({}, TableRenderers, PlotlyRenderers)\n  }, pivotTableData, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }))));\n};\n\nPivotTable.propTypes = {\n  /**\r\n   * Drop Zone props\r\n   */\n  dropZoneProps: PropTypes.object,\n\n  /**\r\n   * Sheet 가 N개인 경우 Select Props\r\n   */\n  sheetSelectProps: PropTypes.object,\n\n  /**\r\n   * sheet option\r\n   * @link https://github.com/SheetJS/js-xlsx#json\r\n   */\n  sheetOptions: PropTypes.object,\n\n  /**\r\n   * url 을 설정하면 DropZone 은 비활성화됨. domain origin 포함 가능.\r\n   */\n  dataURL: PropTypes.string,\n\n  /**\r\n   * pivot table 데이터. 셋팅 시 DropZone 은 비활성화됨.\r\n   * @link https://github.com/plotly/react-pivottable#accepted-formats-for-data\r\n   */\n  data: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number])),\n\n  /**\r\n   * @ignore\r\n   */\n  pivotTableOnly: PropTypes.bool\n};\nPivotTable.defaultProps = {\n  dropZoneProps: {\n    label: 'XLSX 파일을 끌어놓거나 클릭하여 선택해주세요.'\n  },\n  sheetSelectProps: {\n    label: 'EXCEL SHEET',\n    fullWidth: true\n  },\n  sheetOptions: {\n    dateNF: 'yyyy/mm/dd hh:mm'\n  },\n  dataURL: null,\n  data: [],\n  pivotTableOnly: false\n};\nexport default PivotTable;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/owp/src/components/Table/PivotTable.js"],"names":["axios","isEmpty","last","showMessage","FileDndZone","SelectTextField","PropTypes","React","useCallback","useEffect","useState","PivotTableUI","createPlotlyRenderers","TableRenderers","Plot","XLSX","ACCEPT","ERROR_MESSAGES","warning","message","variant","error","empty","PlotlyRenderers","readXlsx","data","options","Promise","resolve","reject","Blob","type","reader","FileReader","canRABS","readAsBinaryString","onabort","onerror","onload","e","bstr","target","result","wb","read","cellDates","cellNF","cellText","readAsArrayBuffer","makeSheetToJson","name","convertedData","utils","sheet_to_json","raw","Array","isArray","readXlsxFromDataURL","dataURL","indexOf","split","toLowerCase","method","url","headers","responseType","baseURL","window","location","origin","then","xlsxData","catch","PivotTable","sheetSelectProps","sheetOptions","dropZoneProps","pivotTableOnly","restProps","pivotTableData","setPivotTableData","sheetData","setSheetData","sheetNames","setSheetNames","selectedSheetName","setSelectedSheetName","preparePivotTableData","Sheets","SheetNames","sheetName","console","handleChangeFiles","nextFiles","acceptedFile","width","height","length","map","label","value","nextData","Object","assign","propTypes","object","string","arrayOf","oneOfType","number","bool","defaultProps","fullWidth","dateNF"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport last from 'lodash/last';\r\nimport { showMessage } from 'owp/common';\r\nimport { FileDndZone, SelectTextField } from 'owp/components';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport 'react-pivottable/pivottable.css';\r\nimport PivotTableUI from 'react-pivottable/PivotTableUI';\r\nimport createPlotlyRenderers from 'react-pivottable/PlotlyRenderers';\r\nimport TableRenderers from 'react-pivottable/TableRenderers';\r\nimport Plot from 'react-plotly.js';\r\nimport XLSX from 'xlsx';\r\n\r\n// constants\r\nconst ACCEPT = '.xlsx, .xlsb, .xlsm, .xls';\r\nconst ERROR_MESSAGES = {\r\n    warning: {\r\n        message: '올바른 XLSX 형식이 아닙니다.',\r\n        variant: 'warning',\r\n    },\r\n    error: {\r\n        message: 'XLSX 파일 로드를 실패했습니다.',\r\n        variant: 'error',\r\n    },\r\n    empty: {\r\n        message: '로드할 데이터가 없습니다.',\r\n        variant: 'warning',\r\n    },\r\n};\r\n\r\n// create Plotly renderers via dependency injection\r\nconst PlotlyRenderers = createPlotlyRenderers(Plot);\r\n\r\n// regarding xlsx to json\r\nconst readXlsx = (data, options = {}) =>\r\n    new Promise((resolve, reject) => {\r\n        if (!data || !data instanceof Blob || data.type === 'text/html') {\r\n            showMessage(ERROR_MESSAGES.error);\r\n            reject(data);\r\n            return;\r\n        }\r\n        const reader = new FileReader();\r\n        const canRABS = !!options.canRABS || !!reader.readAsBinaryString;\r\n\r\n        reader.onabort = (error) => {\r\n            showMessage(ERROR_MESSAGES.warning);\r\n            reject(error);\r\n        };\r\n\r\n        reader.onerror = (error) => {\r\n            showMessage(ERROR_MESSAGES.error);\r\n            reject(error);\r\n        };\r\n\r\n        reader.onload = (e) => {\r\n            const bstr = e.target.result;\r\n            const wb = XLSX.read(bstr, {\r\n                type: canRABS ? 'binary' : 'array',\r\n                cellDates: true,\r\n                cellNF: false,\r\n                cellText: false,\r\n            });\r\n\r\n            resolve(wb);\r\n        };\r\n\r\n        if (canRABS) {\r\n            reader.readAsBinaryString(data);\r\n        } else {\r\n            reader.readAsArrayBuffer(data);\r\n        }\r\n    });\r\n\r\nconst makeSheetToJson = ({ data, name } = {}, options = {}) => {\r\n    if (!!data) {\r\n        const convertedData = XLSX.utils.sheet_to_json(data, {\r\n            raw: false,\r\n            ...options,\r\n        });\r\n\r\n        if (Array.isArray(convertedData) && !isEmpty(convertedData)) {\r\n            showMessage({\r\n                message: `${name} 시트를 성공적으로 로드 했습니다.`,\r\n                variant: 'success',\r\n            });\r\n            return convertedData;\r\n        }\r\n    }\r\n\r\n    showMessage(ERROR_MESSAGES.empty);\r\n\r\n    return [];\r\n};\r\n\r\nconst readXlsxFromDataURL = (dataURL) =>\r\n    new Promise((resolve, reject) => {\r\n        if (ACCEPT.indexOf(last(last(dataURL.split('/')).split('.')).toLowerCase()) === -1) {\r\n            showMessage(ERROR_MESSAGES.warning);\r\n            reject(ERROR_MESSAGES.warning);\r\n            return;\r\n        }\r\n\r\n        axios({\r\n            method: 'get',\r\n            url: dataURL,\r\n            headers: {\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n            },\r\n            responseType: 'blob',\r\n            ...(dataURL.indexOf('http') === -1 && {\r\n                baseURL: window.location.origin,\r\n            }),\r\n        })\r\n            .then(({ data } = {}) =>\r\n                readXlsx(data, { canRABS: true })\r\n                    .then((xlsxData) => resolve(xlsxData))\r\n                    .catch((error) => reject(error))\r\n            )\r\n            .catch((error) => reject(error));\r\n    });\r\n\r\nconst PivotTable = ({\r\n    sheetSelectProps,\r\n    sheetOptions,\r\n    dropZoneProps,\r\n    dataURL,\r\n    data,\r\n    pivotTableOnly,\r\n    ...restProps\r\n}) => {\r\n    const [pivotTableData, setPivotTableData] = useState([]);\r\n    const [sheetData, setSheetData] = useState({});\r\n    const [sheetNames, setSheetNames] = useState([]);\r\n    const [selectedSheetName, setSelectedSheetName] = useState(0);\r\n\r\n    const preparePivotTableData = (xlsxData = {}) => {\r\n        // Set sheets\r\n        setSheetData(xlsxData.Sheets);\r\n\r\n        // Set worksheet names\r\n        setSheetNames(xlsxData.SheetNames);\r\n\r\n        // Get first sheet name\r\n        const sheetName = xlsxData.SheetNames[0];\r\n        setSelectedSheetName(sheetName);\r\n\r\n        // Set first sheet\r\n        setPivotTableData(\r\n            makeSheetToJson(\r\n                {\r\n                    data: xlsxData.Sheets[sheetName],\r\n                    name: sheetName,\r\n                },\r\n                sheetOptions\r\n            )\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (dataURL && isEmpty(data)) {\r\n            readXlsxFromDataURL(dataURL)\r\n                .then((xlsxData) => preparePivotTableData(xlsxData))\r\n                .catch((error) => console.error(error));\r\n            return;\r\n        }\r\n\r\n        if (!isEmpty(data) && Array.isArray(data)) {\r\n            setPivotTableData(data);\r\n        }\r\n    }, [dataURL, data]);\r\n\r\n    const handleChangeFiles = useCallback((nextFiles) => {\r\n        if (isEmpty(nextFiles)) {\r\n            showMessage(ERROR_MESSAGES.warning);\r\n            return;\r\n        }\r\n\r\n        const acceptedFile = nextFiles[0];\r\n\r\n        readXlsx(acceptedFile)\r\n            .then((xlsxData) => preparePivotTableData(xlsxData))\r\n            .catch((error) => console.error(error));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"justify-center mx-8 my-8\" {...restProps}>\r\n            {!pivotTableOnly && isEmpty(dataURL) && isEmpty(data) && (\r\n                <FileDndZone\r\n                    className=\"my-8\"\r\n                    style={{ width: '100%', height: 80 }}\r\n                    {...dropZoneProps}\r\n                    useClickButtonEvent\r\n                    multiple={false}\r\n                    accept={ACCEPT}\r\n                    onDrop={handleChangeFiles}\r\n                    onChange={handleChangeFiles}\r\n                />\r\n            )}\r\n            {!pivotTableOnly && !isEmpty(sheetNames) && sheetNames.length > 1 && (\r\n                <SelectTextField\r\n                    className=\"my-8\"\r\n                    {...sheetSelectProps}\r\n                    value={selectedSheetName}\r\n                    items={sheetNames.map((name) => ({\r\n                        label: name,\r\n                        value: name,\r\n                    }))}\r\n                    onChange={(sheetName) => {\r\n                        setSelectedSheetName(sheetName);\r\n                        setPivotTableData(\r\n                            makeSheetToJson(\r\n                                {\r\n                                    data: sheetData[sheetName],\r\n                                    name: sheetName,\r\n                                },\r\n                                sheetOptions\r\n                            )\r\n                        );\r\n                    }}\r\n                />\r\n            )}\r\n            <div className=\"flex flex-col\">\r\n                <PivotTableUI\r\n                    data={pivotTableData}\r\n                    onChange={(nextData) => setPivotTableData(nextData)}\r\n                    renderers={Object.assign({}, TableRenderers, PlotlyRenderers)}\r\n                    {...pivotTableData}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nPivotTable.propTypes = {\r\n    /**\r\n     * Drop Zone props\r\n     */\r\n    dropZoneProps: PropTypes.object,\r\n    /**\r\n     * Sheet 가 N개인 경우 Select Props\r\n     */\r\n    sheetSelectProps: PropTypes.object,\r\n    /**\r\n     * sheet option\r\n     * @link https://github.com/SheetJS/js-xlsx#json\r\n     */\r\n    sheetOptions: PropTypes.object,\r\n    /**\r\n     * url 을 설정하면 DropZone 은 비활성화됨. domain origin 포함 가능.\r\n     */\r\n    dataURL: PropTypes.string,\r\n    /**\r\n     * pivot table 데이터. 셋팅 시 DropZone 은 비활성화됨.\r\n     * @link https://github.com/plotly/react-pivottable#accepted-formats-for-data\r\n     */\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number])\r\n    ),\r\n    /**\r\n     * @ignore\r\n     */\r\n    pivotTableOnly: PropTypes.bool,\r\n};\r\n\r\nPivotTable.defaultProps = {\r\n    dropZoneProps: { label: 'XLSX 파일을 끌어놓거나 클릭하여 선택해주세요.' },\r\n    sheetSelectProps: { label: 'EXCEL SHEET', fullWidth: true },\r\n    sheetOptions: { dateNF: 'yyyy/mm/dd hh:mm' },\r\n    dataURL: null,\r\n    data: [],\r\n    pivotTableOnly: false,\r\n};\r\n\r\nexport default PivotTable;\r\n"]},"metadata":{},"sourceType":"module"}