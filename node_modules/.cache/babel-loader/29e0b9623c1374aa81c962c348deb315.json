{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Trunks\\\\OWP-GIT\\\\owp-fe\\\\src\\\\main\\\\content\\\\login\\\\LoginForm.js\";\nimport { TextFieldFormsy } from \"owp/@fuse\";\nimport { Button, Icon, InputAdornment, withStyles } from '@material-ui/core';\nimport * as Actions from \"owp/auth/store/actions\";\nimport Formsy from 'formsy-react';\nimport React, { Component } from 'react';\nimport connect from 'react-redux/es/connect/connect';\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '100%'\n    }\n  };\n};\n\nvar LoginForm = /*#__PURE__*/function (_Component) {\n  _inherits(LoginForm, _Component);\n\n  var _super = _createSuper(LoginForm);\n\n  function LoginForm() {\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      canSubmit: false\n    };\n    _this.form = React.createRef();\n\n    _this.disableButton = function () {\n      _this.setState({\n        canSubmit: false\n      });\n    };\n\n    _this.enableButton = function () {\n      _this.setState({\n        canSubmit: true\n      });\n    };\n\n    _this.onSubmit = function (model) {\n      _this.disableButton();\n\n      _this.props.submitLogin(model).then(function (_ref) {\n        var type = _ref.type;\n        type === 'LOGIN_SUCCESS' && window.location.reload();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      localStorage.removeItem('pwchange');\n      var userID = window.localStorage.getItem('UserID');\n\n      if (userID) {\n        this.setState({\n          UserID: userID\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.login.error && (this.props.login.error.email || this.props.login.error.password)) {\n        this.form.updateInputsWithError(_objectSpread({}, this.props.login.error));\n        this.props.login.error = null;\n        this.disableButton();\n      }\n\n      if (this.props.user.role !== 'guest') {\n        var pathname = this.props.location.state && this.props.location.state.redirectUrl; // ? this.props.location.state.redirectUrl\n        // : '/';\n\n        if (pathname) {\n          this.props.history.push({\n            pathname: pathname\n          });\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      var canSubmit = this.state.canSubmit;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Formsy, {\n        onValidSubmit: this.onSubmit,\n        onValid: this.enableButton,\n        onInvalid: this.disableButton,\n        ref: function ref(form) {\n          return _this2.form = form;\n        },\n        className: \"flex flex-col justify-center w-full\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TextFieldFormsy, {\n        className: \"mb-16\",\n        type: \"text\",\n        name: \"email\",\n        label: \"\\uC544\\uC774\\uB514\",\n        value: this.state.UserID,\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(Icon, {\n            className: \"text-20\",\n            color: \"action\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 41\n            }\n          }, \"email\"))\n        },\n        variant: \"outlined\",\n        required: true,\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(TextFieldFormsy, {\n        className: \"mb-16\",\n        type: \"password\",\n        name: \"password\",\n        label: \"\\uD328\\uC2A4\\uC6CC\\uB4DC\" // validations={{\n        //     minLength: 4,\n        //     matchRegexp: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{4,}$/\n        // }}\n        // validationErrors={{\n        //     minLength: '패스워드는 최소 4자 이상이어야 합니다.',\n        //     matchRegexp: '패스워드는 문자와 숫자의 조합이어야합니다.'\n        // }}\n        ,\n        InputProps: {\n          endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(Icon, {\n            className: \"text-20\",\n            color: \"action\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 41\n            }\n          }, \"vpn_key\"))\n        },\n        variant: \"outlined\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"secondary\",\n        className: \"w-full mx-auto mt-16 normal-case\",\n        \"aria-label\": \"LOG IN\",\n        disabled: !canSubmit,\n        value: \"legacy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }\n      }, \"\\uB85C\\uADF8\\uC778\"))));\n    }\n  }]);\n\n  return LoginForm;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    submitLogin: Actions.submitLogin\n  }, dispatch);\n}\n\nfunction mapStateToProps(_ref2) {\n  var auth = _ref2.auth;\n  return {\n    login: auth.login,\n    user: auth.user\n  };\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(withRouter(connect(mapStateToProps, mapDispatchToProps)(LoginForm)));","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/src/main/content/login/LoginForm.js"],"names":["TextFieldFormsy","Button","Icon","InputAdornment","withStyles","Actions","Formsy","React","Component","connect","withRouter","bindActionCreators","styles","theme","root","width","LoginForm","state","canSubmit","form","createRef","disableButton","setState","enableButton","onSubmit","model","props","submitLogin","then","type","window","location","reload","localStorage","removeItem","userID","getItem","UserID","prevProps","prevState","login","error","email","password","updateInputsWithError","user","role","pathname","redirectUrl","history","push","classes","endAdornment","mapDispatchToProps","dispatch","mapStateToProps","auth","withTheme"],"mappings":"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","sourcesContent":["import {TextFieldFormsy} from \"owp/@fuse\";\r\nimport {Button, Icon, InputAdornment, withStyles} from '@material-ui/core';\r\nimport * as Actions from \"owp/auth/store/actions\";\r\nimport Formsy from 'formsy-react';\r\nimport React, {Component} from 'react';\r\nimport connect from 'react-redux/es/connect/connect';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n});\r\n\r\nclass LoginForm extends Component {\r\n    state = {\r\n        canSubmit: false\r\n    };\r\n\r\n    form = React.createRef();\r\n\r\n    disableButton = () => {\r\n        this.setState({ canSubmit: false });\r\n    };\r\n\r\n    enableButton = () => {\r\n        this.setState({ canSubmit: true });\r\n    };\r\n\r\n    onSubmit = model => {\r\n        this.disableButton();\r\n        this.props.submitLogin(model).then(({ type })=> {\r\n            type === 'LOGIN_SUCCESS' && window.location.reload();\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        localStorage.removeItem('pwchange');\r\n        const userID = window.localStorage.getItem('UserID');\r\n        if(userID){\r\n            this.setState({UserID:userID});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            this.props.login.error &&\r\n            (this.props.login.error.email || this.props.login.error.password)\r\n        ) {\r\n            this.form.updateInputsWithError({\r\n                ...this.props.login.error,\r\n            });\r\n\r\n            this.props.login.error = null;\r\n            this.disableButton();\r\n        }\r\n\r\n        if (this.props.user.role !== 'guest') {\r\n            const pathname =\r\n                this.props.location.state &&\r\n                this.props.location.state.redirectUrl;\r\n            // ? this.props.location.state.redirectUrl\r\n            // : '/';\r\n\r\n            if (pathname) {\r\n                this.props.history.push({\r\n                    pathname,\r\n                });\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { canSubmit } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className={classes.root}>\r\n                    <Formsy\r\n                        onValidSubmit={this.onSubmit}\r\n                        onValid={this.enableButton}\r\n                        onInvalid={this.disableButton}\r\n                        ref={form => (this.form = form)}\r\n                        className=\"flex flex-col justify-center w-full\"\r\n                    >\r\n                        <TextFieldFormsy\r\n                            className=\"mb-16\"\r\n                            type=\"text\"\r\n                            name=\"email\"\r\n                            label=\"아이디\"\r\n                            value={this.state.UserID}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <Icon className=\"text-20\" color=\"action\">\r\n                                            email\r\n                                        </Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            autoComplete=\"off\"\r\n                        />\r\n\r\n                        <TextFieldFormsy\r\n                            className=\"mb-16\"\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            label=\"패스워드\"\r\n                            // validations={{\r\n                            //     minLength: 4,\r\n                            //     matchRegexp: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{4,}$/\r\n                            // }}\r\n                            // validationErrors={{\r\n                            //     minLength: '패스워드는 최소 4자 이상이어야 합니다.',\r\n                            //     matchRegexp: '패스워드는 문자와 숫자의 조합이어야합니다.'\r\n                            // }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <Icon className=\"text-20\" color=\"action\">\r\n                                            vpn_key\r\n                                        </Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                            variant=\"outlined\"\r\n                            required\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className=\"w-full mx-auto mt-16 normal-case\"\r\n                            aria-label=\"LOG IN\"\r\n                            disabled={!canSubmit}\r\n                            value=\"legacy\"\r\n                        >\r\n                            로그인\r\n                        </Button>\r\n                    </Formsy>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators(\r\n        {\r\n            submitLogin: Actions.submitLogin,\r\n        },\r\n        dispatch\r\n    );\r\n}\r\n\r\nfunction mapStateToProps({ auth }) {\r\n    return {\r\n        login: auth.login,\r\n        user: auth.user,\r\n    };\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(\r\n    withRouter(\r\n        connect(\r\n            mapStateToProps,\r\n            mapDispatchToProps\r\n        )(LoginForm)\r\n    )\r\n);\r\n"]},"metadata":{},"sourceType":"module"}