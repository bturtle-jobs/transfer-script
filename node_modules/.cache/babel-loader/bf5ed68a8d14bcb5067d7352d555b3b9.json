{"ast":null,"code":"/**\r\n * Functionality for drawing bullets with basic shapes.\r\n */\nimport { __extends } from \"tslib\";\nimport { Bullet } from \"../../charts/elements/Bullet\";\nimport { Rectangle } from \"../../core/elements/Rectangle\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Triangle } from \"../../core/elements/Triangle\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a ShapeBullet shape.\r\n *\r\n * @since 4.9.34\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IShapeBulletEvents} for a list of available events\r\n * @see {@link IShapeBulletAdapters} for a list of available Adapters\r\n */\n\nvar ShapeBullet =\n/** @class */\nfunction (_super) {\n  __extends(ShapeBullet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ShapeBullet() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ShapeBullet\";\n    _this.size = 10;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ShapeBullet.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.shapeElement) {\n      this.shapeElement.dispose();\n    }\n\n    switch (this.shape) {\n      case \"square\":\n        this.createSquare();\n        break;\n\n      case \"diamond\":\n        this.createSquare(45);\n        break;\n\n      case \"circle\":\n        this.createCircle();\n        break;\n\n      case \"up\":\n        this.createTriangle();\n        break;\n\n      case \"right\":\n        this.createTriangle(90);\n        break;\n\n      case \"down\":\n        this.createTriangle(180);\n        break;\n\n      case \"left\":\n        this.createTriangle(270);\n        break;\n    } // todo\n\n  };\n  /**\r\n   * Decorates the shape so it is positioned properly.\r\n   */\n\n\n  ShapeBullet.prototype.processShape = function () {\n    this.shapeElement.horizontalCenter = \"middle\";\n    this.shapeElement.verticalCenter = \"middle\";\n  };\n  /**\r\n   * Creates a square shape.\r\n   */\n\n\n  ShapeBullet.prototype.createSquare = function (rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    var element = this.createChild(Rectangle);\n    element.width = this.size;\n    element.height = this.size;\n    element.rotation = rotation;\n    this.shapeElement = element;\n    this.processShape();\n  };\n  /**\r\n   * Creates a circle shape.\r\n   */\n\n\n  ShapeBullet.prototype.createCircle = function (rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    var element = this.createChild(Circle);\n    element.radius = this.size / 2;\n    this.shapeElement = element;\n    this.processShape();\n  };\n  /**\r\n   * Creates a triangle shape.\r\n   */\n\n\n  ShapeBullet.prototype.createTriangle = function (rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    var element = this.createChild(Triangle);\n    element.width = this.size;\n    element.height = this.size;\n    element.rotation = rotation;\n    this.shapeElement = element;\n    this.processShape();\n  };\n\n  Object.defineProperty(ShapeBullet.prototype, \"shape\", {\n    /**\r\n     * @return shape scope\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"shape\");\n    },\n\n    /**\r\n     * Shape of the bullet.\r\n     *\r\n     * Available options: `\"square\"`, `\"diamond\"`, `\"circle\"`, `\"up\"`, `\"down\"`,\r\n     * `\"left\"`, `\"right\"`.\r\n     *\r\n     * There is no default. If `shape` is not set, the bullets will come out\r\n     * empty.\r\n     *\r\n     * @param  value  Shape\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"shape\", value, true)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ShapeBullet.prototype, \"size\", {\n    /**\r\n     * @return Size (px)\r\n     */\n    get: function get() {\n      var size = this.getPropertyValue(\"size\");\n\n      if (!$type.isNumber(size)) {\n        size = 0;\n      }\n\n      return size;\n    },\n\n    /**\r\n     * Size (width and height in pixels) of the bullet. The actual shapes will be\r\n     * sized and positioned to fit this pixel value.\r\n     *\r\n     * @default 10\r\n     * @param value  Size (px)\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"size\", value, true)) {\n        this.width = value;\n        this.height = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ShapeBullet;\n}(Bullet);\n\nexport { ShapeBullet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ShapeBullet\"] = ShapeBullet;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/bullets/ShapeBullet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing bullets with basic shapes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"../../charts/elements/Bullet\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ShapeBullet]].\r\n */\r\nexport interface IShapeBulletProperties extends IBulletProperties {\r\n\r\n\t/**\r\n\t * Size (width and height in pixels) of the bullet. The actual shapes will be\r\n\t * sized and positioned to fit this pixel value.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tsize?: number;\r\n\r\n\t/**\r\n\t * Shape of the bullet.\r\n\t */\r\n\tshape?: BulletShapes;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ShapeBullet]].\r\n */\r\nexport interface IShapeBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ShapeBullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IShapeBulletAdapters extends IBulletAdapters, IShapeBulletProperties { }\r\n\r\n/**\r\n * Defines available shapes for a [[ShapeBullet]].\r\n */\r\nexport type BulletShapes = \"square\" | \"diamond\" | \"circle\" | \"up\" | \"down\" | \"left\" | \"right\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a ShapeBullet shape.\r\n *\r\n * @since 4.9.34\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IShapeBulletEvents} for a list of available events\r\n * @see {@link IShapeBulletAdapters} for a list of available Adapters\r\n */\r\nexport class ShapeBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IShapeBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IShapeBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IShapeBulletEvents;\r\n\r\n\t/**\r\n\t * An actual element comprising the shape.\r\n\t *\r\n\t * The type of the element will depend on the `shape` setting. It could be\r\n\t * a `Circle`, `Rectangle`, or `Triangle`.\r\n\t */\r\n\tpublic shapeElement: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ShapeBullet\";\r\n\t\tthis.size = 10;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.shapeElement) {\r\n\t\t\tthis.shapeElement.dispose();\r\n\t\t}\r\n\r\n\t\tswitch (this.shape) {\r\n\t\t\tcase \"square\":\r\n\t\t\t\tthis.createSquare();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"diamond\":\r\n\t\t\t\tthis.createSquare(45);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"circle\":\r\n\t\t\t\tthis.createCircle();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"up\":\r\n\t\t\t\tthis.createTriangle();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"right\":\r\n\t\t\t\tthis.createTriangle(90);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"down\":\r\n\t\t\t\tthis.createTriangle(180);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"left\":\r\n\t\t\t\tthis.createTriangle(270);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// todo\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates the shape so it is positioned properly.\r\n\t */\r\n\tprivate processShape(): void {\r\n\t\tthis.shapeElement.horizontalCenter = \"middle\";\r\n\t\tthis.shapeElement.verticalCenter = \"middle\";\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a square shape.\r\n\t */\r\n\tprivate createSquare(rotation: number = 0): void {\r\n\t\tconst element = this.createChild(Rectangle);\r\n\t\telement.width = this.size;\r\n\t\telement.height = this.size;\r\n\t\telement.rotation = rotation;\r\n\t\tthis.shapeElement = element;\r\n\t\tthis.processShape();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a circle shape.\r\n\t */\r\n\tprivate createCircle(rotation: number = 0): void {\r\n\t\tconst element = this.createChild(Circle);\r\n\t\telement.radius = this.size / 2;\r\n\t\tthis.shapeElement = element;\r\n\t\tthis.processShape();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a triangle shape.\r\n\t */\r\n\tprivate createTriangle(rotation: number = 0): void {\r\n\t\tconst element = this.createChild(Triangle);\r\n\t\telement.width = this.size;\r\n\t\telement.height = this.size;\r\n\t\telement.rotation = rotation;\r\n\t\tthis.shapeElement = element;\r\n\t\tthis.processShape();\r\n\t}\r\n\r\n\t/**\r\n\t * Shape of the bullet.\r\n\t *\r\n\t * Available options: `\"square\"`, `\"diamond\"`, `\"circle\"`, `\"up\"`, `\"down\"`,\r\n\t * `\"left\"`, `\"right\"`.\r\n\t *\r\n\t * There is no default. If `shape` is not set, the bullets will come out\r\n\t * empty.\r\n\t *\r\n\t * @param  value  Shape\r\n\t */\r\n\tpublic set shape(value: BulletShapes) {\r\n\t\tif (this.setPropertyValue(\"shape\", value, true)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return shape scope\r\n\t */\r\n\tpublic get shape(): BulletShapes {\r\n\t\treturn this.getPropertyValue(\"shape\");\r\n\t}\r\n\r\n\t/**\r\n\t * Size (width and height in pixels) of the bullet. The actual shapes will be\r\n\t * sized and positioned to fit this pixel value.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Size (px)\r\n\t */\r\n\tpublic set size(value: number) {\r\n\t\tif (this.setPropertyValue(\"size\", value, true)) {\r\n\t\t\tthis.width = value;\r\n\t\t\tthis.height = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Size (px)\r\n\t */\r\n\tpublic get size(): number {\r\n\t\tlet size: number = this.getPropertyValue(\"size\");\r\n\t\tif (!$type.isNumber(size)) {\r\n\t\t\tsize = 0;\r\n\t\t}\r\n\t\treturn size;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ShapeBullet\"] = ShapeBullet;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}