{"ast":null,"code":"/**\r\n * Radar chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { CurveChart, CurveChartDataItem } from \"./CurveChart\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[SpiralChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SpiralChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SpiralChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SpiralChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SpiralChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SpiralChartDataItem;\n}(CurveChartDataItem);\n\nexport { SpiralChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Spiral chart.\r\n *\r\n * @see {@link ISpiralChartEvents} for a list of available Events\r\n * @see {@link ISpiralChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Spiral} for documentation\r\n * @important\r\n */\n\nvar SpiralChart =\n/** @class */\nfunction (_super) {\n  __extends(SpiralChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SpiralChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SpiralChart\";\n    _this.levelCount = 3;\n    _this.precisionStep = 5;\n    _this.startAngle = 0;\n    _this.endAngle = 0;\n    _this.innerRadius = percent(25);\n    _this.yAxisRadius = percent(35);\n    _this.yAxisInnerRadius = percent(-35);\n    _this.inversed = false; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SpiralChart.prototype, \"levelCount\", {\n    /**\r\n     * @return Number of circles\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"levelCount\");\n    },\n\n    /**\r\n     * Number of rings the spiral will consist of.\r\n     *\r\n     * @default 3\r\n     * @param  value  Number of circles\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"levelCount\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"startAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * An angle the spiral will start at.\r\n     *\r\n     * @default 0\r\n     * @param  value  Start angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * An angle the spiral will end at.\r\n     *\r\n     * @default 0\r\n     * @param  value  End angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"radiusStep\", {\n    /**\r\n     * @return Radius step (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radiusStep\");\n    },\n\n    /**\r\n     * Number of pixels the spiral diameter will increase by each full rotation.\r\n     *\r\n     * Normally the chart will calculate it by itself. You can override it by\r\n     * setting your own value of `radiusStep`.\r\n     *\r\n     * In such case the chart might be bigger or smaller than chart container.\r\n     *\r\n     * @param {number} value  Radius step (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radiusStep\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"precisionStep\", {\n    /**\r\n     * @return Precision\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"precisionStep\");\n    },\n\n    /**\r\n     * Precision setting to use when automatically generating axis points for the\r\n     * spiral.\r\n     *\r\n     * The smaller the number, the finer line. However, small number will impact\r\n     * the performace.\r\n     *\r\n     * Depending on actual chart configuration, you might need to find the best\r\n     * possible value to balance between detail and good performance.\r\n     *\r\n     * @default 5\r\n     * @param  value  Precision\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"precisionStep\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the spiral.\r\n     *\r\n     * Can be either fixed number in pixels, or in percent.\r\n     *\r\n     * @default 25%\r\n     * @param  value  Inner radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"innerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"yAxisRadius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"yAxisRadius\");\n    },\n\n    /**\r\n     * Outer radius of the Y axis.\r\n     *\r\n     * It can be fixed number of pixels or percentage of the radius of distance\r\n     * between rings of the spiral.\r\n     *\r\n     * IMPORTANT: this will override `radius` setting set on directly on the\r\n     * Y axis renderer.\r\n     *\r\n     * @default 35%\r\n     * @param  value  Outer radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"yAxisRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"yAxisInnerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"yAxisInnerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the Y axis.\r\n     *\r\n     * It can be fixed number of pixels or percentage of the radius of distance\r\n     * between rings of the spiral.\r\n     *\r\n     * IMPORTANT: this will override `innerRadius` setting set on directly on the\r\n     * Y axis renderer.\r\n     *\r\n     * @default -35%\r\n     * @param  value  Inner radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"yAxisInnerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpiralChart.prototype, \"inversed\", {\n    /**\r\n     * @return Inversed?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"inversed\");\n    },\n\n    /**\r\n     * Normally the spiral will start at the center.\r\n     *\r\n     * Set this to `true` to start at the outer end.\r\n     *\r\n     * @default false\r\n     * @param  value  Inversed?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"inversed\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates the chart.\r\n   *\r\n   * @ignore\r\n   */\n\n  SpiralChart.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var curveContainer = this.curveContainer;\n    var w = this.plotContainer.maxWidth - curveContainer.pixelPaddingLeft - curveContainer.pixelPaddingRight;\n    var h = this.plotContainer.maxHeight - curveContainer.pixelPaddingTop - curveContainer.pixelPaddingBottom;\n    var radius = $math.min(w, h) / 2;\n    var radiusStep = this.radiusStep;\n    var innerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius);\n\n    if (!$type.isNumber(radiusStep)) {\n      radiusStep = (radius - innerRadius) / this.levelCount;\n    }\n\n    var points = $path.spiralPoints(0, 0, radius, radius, innerRadius, this.precisionStep, radiusStep, this.startAngle, this.endAngle);\n    var yInnerRadius = $utils.relativeRadiusToValue(this.yAxisInnerRadius, radiusStep);\n    var yRadius = $utils.relativeRadiusToValue(this.yAxisRadius, radiusStep);\n\n    if (this.inversed) {\n      points.reverse();\n    }\n\n    this.xAxes.each(function (axis) {\n      axis.renderer.points = points;\n      axis.renderer.autoScale = false;\n      axis.renderer.autoCenter = false;\n      axis.renderer.polyspline.tensionX = 1;\n      axis.renderer.polyspline.tensionY = 1;\n    });\n    this.yAxes.each(function (axis) {\n      axis.renderer.radius = yRadius;\n      axis.renderer.innerRadius = yInnerRadius;\n    });\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  SpiralChart.prototype.updateYAxis = function (renderer) {\n    _super.prototype.updateYAxis.call(this, renderer);\n\n    renderer.innerRadius = undefined;\n    renderer.radius = undefined;\n  };\n\n  return SpiralChart;\n}(CurveChart);\n\nexport { SpiralChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SpiralChart\"] = SpiralChart;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/SpiralChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CurveChart, ICurveChartProperties, ICurveChartDataFields, ICurveChartAdapters, ICurveChartEvents, CurveChartDataItem } from \"./CurveChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SpiralChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SpiralChartDataItem extends CurveChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SpiralChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SpiralChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SpiralChart]].\r\n */\r\nexport interface ISpiralChartDataFields extends ICurveChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SpiralChart]].\r\n */\r\nexport interface ISpiralChartProperties extends ICurveChartProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the spiral.\r\n\t *\r\n\t * Can be either fixed number in pixels, or in percent.\r\n\t *\r\n\t * @default 25%\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Number of rings the spiral will consist of.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tlevelCount?: number;\r\n\r\n\t/**\r\n\t * An angle the spiral will start at.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle the spiral will end at.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Number of pixels the spiral diameter will increase by each full rotation.\r\n\t *\r\n\t * Normally the chart will calculate it by itself. You can override it by\r\n\t * setting your own value of `radiusStep`.\r\n\t *\r\n\t * In such case the chart might be bigger or smaller than chart container.\r\n\t */\r\n\tradiusStep?: number;\r\n\r\n\t/**\r\n\t * Precision setting to use when automatically generating axis points for the\r\n\t * spiral.\r\n\t *\r\n\t * The smaller the number, the finer line. However, small number will impact\r\n\t * the performace.\r\n\t *\r\n\t * Depending on actual chart configuration, you might need to find the best\r\n\t * possible value to balance between detail and good performance.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tprecisionStep?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * @default 35%\r\n\t */\r\n\tyAxisRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * @default -35%\r\n\t */\r\n\tyAxisInnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Normally the spiral will start at the center.\r\n\t *\r\n\t * Set this to `true` to start at the outer end.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\tinversed?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SpiralChart]].\r\n */\r\nexport interface ISpiralChartEvents extends ICurveChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SpiralChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISpiralChartAdapters extends ICurveChartAdapters, ISpiralChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Spiral chart.\r\n *\r\n * @see {@link ISpiralChartEvents} for a list of available Events\r\n * @see {@link ISpiralChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Spiral} for documentation\r\n * @important\r\n */\r\nexport class SpiralChart extends CurveChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISpiralChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISpiralChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISpiralChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISpiralChartEvents;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SpiralChart\";\r\n\r\n\t\tthis.levelCount = 3;\r\n\t\tthis.precisionStep = 5;\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\t\tthis.innerRadius = percent(25);\r\n\r\n\t\tthis.yAxisRadius = percent(35);\r\n\t\tthis.yAxisInnerRadius = percent(-35);\r\n\r\n\t\tthis.inversed = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Number of rings the spiral will consist of.\r\n\t *\r\n\t * @default 3\r\n\t * @param  value  Number of circles\r\n\t */\r\n\tpublic set levelCount(value: number) {\r\n\t\tthis.setPropertyValue(\"levelCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of circles\r\n\t */\r\n\tpublic get levelCount(): number {\r\n\t\treturn this.getPropertyValue(\"levelCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle the spiral will start at.\r\n\t *\r\n\t * @default 0\r\n\t * @param  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle the spiral will end at.\r\n\t *\r\n\t * @default 0\r\n\t * @param  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of pixels the spiral diameter will increase by each full rotation.\r\n\t *\r\n\t * Normally the chart will calculate it by itself. You can override it by\r\n\t * setting your own value of `radiusStep`.\r\n\t *\r\n\t * In such case the chart might be bigger or smaller than chart container.\r\n\t * \r\n\t * @param {number} value  Radius step (px)\r\n\t */\r\n\tpublic set radiusStep(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusStep\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius step (px)\r\n\t */\r\n\tpublic get radiusStep(): number {\r\n\t\treturn this.getPropertyValue(\"radiusStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Precision setting to use when automatically generating axis points for the\r\n\t * spiral.\r\n\t *\r\n\t * The smaller the number, the finer line. However, small number will impact\r\n\t * the performace.\r\n\t *\r\n\t * Depending on actual chart configuration, you might need to find the best\r\n\t * possible value to balance between detail and good performance.\r\n\t *\r\n\t * @default 5\r\n\t * @param  value  Precision\r\n\t */\r\n\tpublic set precisionStep(value: number) {\r\n\t\tthis.setPropertyValue(\"precisionStep\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Precision\r\n\t */\r\n\tpublic get precisionStep(): number {\r\n\t\treturn this.getPropertyValue(\"precisionStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the spiral.\r\n\t *\r\n\t * Can be either fixed number in pixels, or in percent.\r\n\t *\r\n\t * @default 25%\r\n\t * @param  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * IMPORTANT: this will override `radius` setting set on directly on the\r\n\t * Y axis renderer.\r\n\t *\r\n\t * @default 35%\r\n\t * @param  value  Outer radius\r\n\t */\r\n\tpublic set yAxisRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"yAxisRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get yAxisRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"yAxisRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * IMPORTANT: this will override `innerRadius` setting set on directly on the\r\n\t * Y axis renderer.\r\n\t *\r\n\t * @default -35%\r\n\t * @param  value  Inner radius\r\n\t */\r\n\tpublic set yAxisInnerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"yAxisInnerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get yAxisInnerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"yAxisInnerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally the spiral will start at the center.\r\n\t *\r\n\t * Set this to `true` to start at the outer end.\r\n\t *\r\n\t * @default false\r\n\t * @param  value  Inversed?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inversed\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inversed?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"inversed\");\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the chart.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet curveContainer = this.curveContainer;\r\n\r\n\t\tlet w = this.plotContainer.maxWidth - curveContainer.pixelPaddingLeft - curveContainer.pixelPaddingRight;\r\n\t\tlet h = this.plotContainer.maxHeight - curveContainer.pixelPaddingTop - curveContainer.pixelPaddingBottom;\r\n\r\n\t\tlet radius = $math.min(w, h) / 2;\r\n\r\n\t\tlet radiusStep = this.radiusStep;\r\n\r\n\t\tlet innerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius);\r\n\r\n\t\tif (!$type.isNumber(radiusStep)) {\r\n\t\t\tradiusStep = (radius - innerRadius) / this.levelCount;\r\n\t\t}\r\n\r\n\t\tlet points = $path.spiralPoints(0, 0, radius, radius, innerRadius, this.precisionStep, radiusStep, this.startAngle, this.endAngle);\r\n\r\n\t\tlet yInnerRadius = $utils.relativeRadiusToValue(this.yAxisInnerRadius, radiusStep);\r\n\t\tlet yRadius = $utils.relativeRadiusToValue(this.yAxisRadius, radiusStep);\r\n\r\n\t\tif (this.inversed) {\r\n\t\t\tpoints.reverse();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.renderer.points = points;\r\n\t\t\taxis.renderer.autoScale = false;\r\n\t\t\taxis.renderer.autoCenter = false;\r\n\t\t\taxis.renderer.polyspline.tensionX = 1;\r\n\t\t\taxis.renderer.polyspline.tensionY = 1;\t\t\t\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.renderer.radius = yRadius;\r\n\t\t\taxis.renderer.innerRadius = yInnerRadius;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRendererCurveY) {\r\n\t\tsuper.updateYAxis(renderer);\r\n\t\trenderer.innerRadius = undefined;\r\n\t\trenderer.radius = undefined;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SpiralChart\"] = SpiralChart;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}