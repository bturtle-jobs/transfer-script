{"ast":null,"code":"/**\r\n * Serpentine chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { CurveChart, CurveChartDataItem } from \"./CurveChart\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[SerpentineChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SerpentineChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SerpentineChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SerpentineChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SerpentineChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SerpentineChartDataItem;\n}(CurveChartDataItem);\n\nexport { SerpentineChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Serpentine chart.\r\n *\r\n * @see {@link ISerpentineChartEvents} for a list of available Events\r\n * @see {@link ISerpentineChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Serpentine} for documentation\r\n * @important\r\n */\n\nvar SerpentineChart =\n/** @class */\nfunction (_super) {\n  __extends(SerpentineChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SerpentineChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SerpentineChart\";\n    _this.orientation = \"vertical\";\n    _this.levelCount = 3;\n    _this.yAxisRadius = percent(25);\n    _this.yAxisInnerRadius = percent(-25); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SerpentineChart.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation (direction) of the chart.\r\n     *\r\n     * Options: \"vertical\" (default) or \"horizontal\".\r\n     *\r\n     * @default vertical\r\n     * @param  value  Orientaiton\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SerpentineChart.prototype, \"levelCount\", {\n    /**\r\n     * @return Level count\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"levelCount\");\n    },\n\n    /**\r\n     * How many \"turns\" (levels) the chart will have.\r\n     *\r\n     * @default 3\r\n     * @param  value  Level count\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"levelCount\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SerpentineChart.prototype, \"yAxisRadius\", {\n    /**\r\n     * @return {number} Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"yAxisRadius\");\n    },\n\n    /**\r\n     * Outer radius of the Y axis.\r\n     *\r\n     * It can be fixed number of pixels or percentage of the radius of distance\r\n     * between rings of the spiral.\r\n     *\r\n     * IMPORTANT: this will override `radius` setting set on directly on the\r\n     * Y axis renderer.\r\n     *\r\n     * @default 25%\r\n     * @param  value  Outer radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"yAxisRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SerpentineChart.prototype, \"yAxisInnerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"yAxisInnerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the Y axis.\r\n     *\r\n     * It can be fixed number of pixels or percentage of the radius of distance\r\n     * between rings of the spiral.\r\n     *\r\n     * IMPORTANT: this will override `innerRadius` setting set on directly on the\r\n     * Y axis renderer.\r\n     *\r\n     * @default -25%\r\n     * @param  value  Inner radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"yAxisInnerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates the chart.\r\n   *\r\n   * @ignore\r\n   */\n\n  SerpentineChart.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var curveContainer = this.curveContainer;\n    var w = this.plotContainer.maxWidth - curveContainer.pixelPaddingLeft - curveContainer.pixelPaddingRight;\n    var h = this.plotContainer.maxHeight - curveContainer.pixelPaddingTop - curveContainer.pixelPaddingBottom;\n    var axisRadius = 0;\n    this.yAxes.each(function (axis) {\n      axisRadius = $math.max(axis.renderer.radius, axisRadius);\n    });\n    w -= 2 * axisRadius;\n    h -= 2 * axisRadius;\n    var points = [];\n    var levelCount = this.levelCount;\n    var radius;\n\n    if (this.orientation == \"vertical\") {\n      radius = $math.min(h / (levelCount - 1) / 2, w / 2);\n      h = $math.min(radius * (levelCount - 1) * 2, h);\n\n      for (var i = 0; i < this.levelCount; i++) {\n        if (i % 2 === 0) {\n          points.push({\n            x: -w / 2 + radius,\n            y: -h / 2 + h / (levelCount - 1) * i\n          });\n          points.push({\n            x: w / 2 - radius,\n            y: -h / 2 + h / (levelCount - 1) * i\n          });\n          var centerPoint = {\n            x: w / 2 - radius,\n            y: -h / 2 + h / (levelCount - 1) * (i + 0.5)\n          };\n\n          if (i < this.levelCount - 1) {\n            for (var i_1 = 0; i_1 < 50; i_1++) {\n              var angle = -90 + i_1 / 50 * 180;\n              points.push({\n                x: centerPoint.x + radius * $math.cos(angle),\n                y: centerPoint.y + radius * $math.sin(angle)\n              });\n            }\n          }\n        } else {\n          points.push({\n            x: w / 2 - radius,\n            y: -h / 2 + h / (levelCount - 1) * i\n          });\n          points.push({\n            x: -w / 2 + radius,\n            y: -h / 2 + h / (levelCount - 1) * i\n          });\n          var centerPoint = {\n            x: -w / 2 + radius,\n            y: -h / 2 + h / (levelCount - 1) * (i + 0.5)\n          };\n\n          if (i < this.levelCount - 1) {\n            for (var i_2 = 0; i_2 < 50; i_2++) {\n              var angle = -90 - i_2 / 50 * 180;\n              points.push({\n                x: centerPoint.x + radius * $math.cos(angle),\n                y: centerPoint.y + radius * $math.sin(angle)\n              });\n            }\n          }\n        }\n      }\n    } else {\n      radius = $math.min(w / (levelCount - 1) / 2, h / 2);\n      w = $math.min(radius * (levelCount - 1) * 2, w);\n\n      for (var i = 0; i < this.levelCount; i++) {\n        if (i % 2 === 0) {\n          points.push({\n            y: -h / 2 + radius,\n            x: -w / 2 + w / (levelCount - 1) * i\n          });\n          points.push({\n            y: h / 2 - radius,\n            x: -w / 2 + w / (levelCount - 1) * i\n          });\n          var centerPoint = {\n            y: h / 2 - radius,\n            x: -w / 2 + w / (levelCount - 1) * (i + 0.5)\n          };\n\n          if (i < this.levelCount - 1) {\n            for (var i_3 = 0; i_3 < 50; i_3++) {\n              var angle = -90 + i_3 / 50 * 180;\n              points.push({\n                y: centerPoint.y + radius * $math.cos(angle),\n                x: centerPoint.x + radius * $math.sin(angle)\n              });\n            }\n          }\n        } else {\n          points.push({\n            y: h / 2 - radius,\n            x: -w / 2 + w / (levelCount - 1) * i\n          });\n          points.push({\n            y: -h / 2 + radius,\n            x: -w / 2 + w / (levelCount - 1) * i\n          });\n          var centerPoint = {\n            y: -h / 2 + radius,\n            x: -w / 2 + w / (levelCount - 1) * (i + 0.5)\n          };\n\n          if (i < this.levelCount - 1) {\n            for (var i_4 = 0; i_4 < 50; i_4++) {\n              var angle = -90 - i_4 / 50 * 180;\n              points.push({\n                y: centerPoint.y + radius * $math.cos(angle),\n                x: centerPoint.x + radius * $math.sin(angle)\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.xAxes.each(function (axis) {\n      axis.renderer.points = points;\n      axis.renderer.autoScale = false;\n      axis.renderer.autoCenter = false;\n      axis.renderer.polyspline.tensionX = 1;\n      axis.renderer.polyspline.tensionY = 1;\n    });\n    var yInnerRadius = $utils.relativeRadiusToValue(this.yAxisInnerRadius, radius * 2);\n    var yRadius = $utils.relativeRadiusToValue(this.yAxisRadius, radius * 2);\n    this.yAxes.each(function (axis) {\n      axis.renderer.radius = yRadius;\n      axis.renderer.innerRadius = yInnerRadius;\n    });\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  SerpentineChart.prototype.updateYAxis = function (renderer) {\n    _super.prototype.updateYAxis.call(this, renderer);\n\n    renderer.innerRadius = undefined;\n    renderer.radius = undefined;\n  };\n\n  return SerpentineChart;\n}(CurveChart);\n\nexport { SerpentineChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SerpentineChart\"] = SerpentineChart;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/timeline/SerpentineChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Serpentine chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CurveChart, ICurveChartProperties, ICurveChartDataFields, ICurveChartAdapters, ICurveChartEvents, CurveChartDataItem } from \"./CurveChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerpentineChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerpentineChartDataItem extends CurveChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerpentineChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerpentineChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerpentineChart]].\r\n */\r\nexport interface ISerpentineChartDataFields extends ICurveChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerpentineChart]].\r\n */\r\nexport interface ISerpentineChartProperties extends ICurveChartProperties {\r\n\r\n\t/**\r\n\t * Orientation (direction) of the chart.\r\n\t *\r\n\t * @default vertical\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * How many \"turns\" (levels) the chart will have.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tlevelCount?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * @default 25%\r\n\t */\r\n\tyAxisRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * @default -25%\r\n\t */\r\n\tyAxisInnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerpentineChart]].\r\n */\r\nexport interface ISerpentineChartEvents extends ICurveChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerpentineChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerpentineChartAdapters extends ICurveChartAdapters, ISerpentineChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Serpentine chart.\r\n *\r\n * @see {@link ISerpentineChartEvents} for a list of available Events\r\n * @see {@link ISerpentineChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Serpentine} for documentation\r\n * @important\r\n */\r\nexport class SerpentineChart extends CurveChart {\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISerpentineChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerpentineChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerpentineChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerpentineChartEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerpentineChart\";\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.levelCount = 3;\r\n\r\n\t\tthis.yAxisRadius = percent(25);\r\n\t\tthis.yAxisInnerRadius = percent(-25);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation (direction) of the chart.\r\n\t *\r\n\t * Options: \"vertical\" (default) or \"horizontal\".\r\n\t *\r\n\t * @default vertical\r\n\t * @param  value  Orientaiton\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * How many \"turns\" (levels) the chart will have.\r\n\t *\r\n\t * @default 3\r\n\t * @param  value  Level count\r\n\t */\r\n\tpublic set levelCount(value: number) {\r\n\t\tthis.setPropertyValue(\"levelCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level count\r\n\t */\r\n\tpublic get levelCount(): number {\r\n\t\treturn this.getPropertyValue(\"levelCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * IMPORTANT: this will override `radius` setting set on directly on the\r\n\t * Y axis renderer.\r\n\t *\r\n\t * @default 25%\r\n\t * @param  value  Outer radius\r\n\t */\r\n\tpublic set yAxisRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"yAxisRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get yAxisRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"yAxisRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * IMPORTANT: this will override `innerRadius` setting set on directly on the\r\n\t * Y axis renderer.\r\n\t *\r\n\t * @default -25%\r\n\t * @param  value  Inner radius\r\n\t */\r\n\tpublic set yAxisInnerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"yAxisInnerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get yAxisInnerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"yAxisInnerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the chart.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet curveContainer = this.curveContainer;\r\n\r\n\t\tlet w = this.plotContainer.maxWidth - curveContainer.pixelPaddingLeft - curveContainer.pixelPaddingRight;\r\n\t\tlet h = this.plotContainer.maxHeight - curveContainer.pixelPaddingTop - curveContainer.pixelPaddingBottom;\r\n\r\n\t\tlet axisRadius = 0;\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxisRadius = $math.max(axis.renderer.radius, axisRadius);\r\n\t\t})\r\n\r\n\t\tw -= 2 * axisRadius;\r\n\t\th -= 2 * axisRadius;\r\n\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet levelCount = this.levelCount;\r\n\r\n\t\tlet radius: number;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tradius = $math.min(h / (levelCount - 1) / 2, w / 2);\r\n\r\n\t\t\th = $math.min(radius * (levelCount - 1) * 2, h);\r\n\r\n\t\t\tfor (let i = 0; i < this.levelCount; i++) {\r\n\r\n\t\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t\tpoints.push({ x: -w / 2 + radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ x: w / 2 - radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\r\n\t\t\t\t\tlet centerPoint = { x: w / 2 - radius, y: -h / 2 + h / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 + i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ x: centerPoint.x + radius * $math.cos(angle), y: centerPoint.y + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpoints.push({ x: w / 2 - radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ x: -w / 2 + radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\t\t\t\t\tlet centerPoint = { x: -w / 2 + radius, y: -h / 2 + h / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 - i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ x: centerPoint.x + radius * $math.cos(angle), y: centerPoint.y + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tradius = $math.min(w / (levelCount - 1) / 2, h / 2);\r\n\r\n\t\t\tw = $math.min(radius * (levelCount - 1) * 2, w);\r\n\r\n\t\t\tfor (let i = 0; i < this.levelCount; i++) {\r\n\r\n\t\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t\tpoints.push({ y: -h / 2 + radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ y: h / 2 - radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\r\n\t\t\t\t\tlet centerPoint = { y: h / 2 - radius, x: -w / 2 + w / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 + i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ y: centerPoint.y + radius * $math.cos(angle), x: centerPoint.x + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpoints.push({ y: h / 2 - radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ y: -h / 2 + radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\t\t\t\t\tlet centerPoint = { y: -h / 2 + radius, x: -w / 2 + w / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 - i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ y: centerPoint.y + radius * $math.cos(angle), x: centerPoint.x + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.renderer.points = points;\r\n\t\t\taxis.renderer.autoScale = false;\r\n\t\t\taxis.renderer.autoCenter = false;\t\t\t\r\n\t\t\taxis.renderer.polyspline.tensionX = 1;\r\n\t\t\taxis.renderer.polyspline.tensionY = 1;\r\n\t\t})\r\n\r\n\t\tlet yInnerRadius = $utils.relativeRadiusToValue(this.yAxisInnerRadius, radius * 2);\r\n\t\tlet yRadius = $utils.relativeRadiusToValue(this.yAxisRadius, radius * 2);\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.renderer.radius = yRadius;\r\n\t\t\taxis.renderer.innerRadius = yInnerRadius;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRendererCurveY) {\r\n\t\tsuper.updateYAxis(renderer);\r\n\t\trenderer.innerRadius = undefined;\r\n\t\trenderer.radius = undefined;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerpentineChart\"] = SerpentineChart;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}