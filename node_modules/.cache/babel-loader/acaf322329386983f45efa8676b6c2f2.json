{"ast":null,"code":"/**\r\n * Functionality for drawing Stars.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a Star shape.\r\n *\r\n * @since 4.5.7\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IStarEvents} for a list of available events\r\n * @see {@link IStarAdapters} for a list of available Adapters\r\n */\n\nvar Star =\n/** @class */\nfunction (_super) {\n  __extends(Star, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Star() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Star\";\n    _this.pointCount = 5;\n    _this.arc = 360;\n    _this.radius = 100;\n    _this.innerRadius = percent(30);\n    _this.cornerRadius = 0;\n    _this.innerCornerRadius = 0;\n    _this.startAngle = -90;\n    _this.element = _this.paper.add(\"path\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Star.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var startAngle = this.startAngle;\n    var arc = this.arc;\n    var pointCount = this.pointCount;\n    var radius = this.radius;\n    var innerRadius = this.pixelInnerRadius;\n    var cornerRadius = this.cornerRadius;\n\n    if (cornerRadius > radius - innerRadius) {\n      cornerRadius = radius - innerRadius;\n    }\n\n    var innerCornerRadius = this.innerCornerRadius;\n\n    if (innerCornerRadius > radius - cornerRadius - innerRadius) {\n      innerCornerRadius = radius - cornerRadius - innerRadius;\n    }\n\n    var halfAngle = arc / pointCount / 2;\n    var path = \"\";\n\n    for (var i = 0; i < pointCount; i++) {\n      var angle = startAngle + i * arc / pointCount;\n\n      if (cornerRadius > 0) {\n        var p0 = {\n          x: innerRadius * $math.cos(angle - halfAngle),\n          y: innerRadius * $math.sin(angle - halfAngle)\n        };\n        var p1 = {\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        };\n        var p2 = {\n          x: innerRadius * $math.cos(angle + halfAngle),\n          y: innerRadius * $math.sin(angle + halfAngle)\n        };\n        var a1 = $math.getAngle(p1, p0);\n        var a2 = $math.getAngle(p1, p2);\n        var x1 = p1.x + cornerRadius * $math.cos(a1);\n        var y1 = p1.y + cornerRadius * $math.sin(a1);\n        var x2 = p1.x + cornerRadius * $math.cos(a2);\n        var y2 = p1.y + cornerRadius * $math.sin(a2);\n        path += $path.lineTo({\n          x: x1,\n          y: y1\n        });\n        path += \" Q\" + p1.x + \",\" + p1.y + \" \" + x2 + \",\" + y2;\n      } else {\n        path += $path.lineTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n      }\n\n      angle += halfAngle;\n\n      if (innerCornerRadius > 0) {\n        var p0 = {\n          x: radius * $math.cos(angle - halfAngle),\n          y: radius * $math.sin(angle - halfAngle)\n        };\n        var p1 = {\n          x: innerRadius * $math.cos(angle),\n          y: innerRadius * $math.sin(angle)\n        };\n        var p2 = {\n          x: radius * $math.cos(angle + halfAngle),\n          y: radius * $math.sin(angle + halfAngle)\n        };\n        var a1 = $math.getAngle(p1, p0);\n        var a2 = $math.getAngle(p1, p2);\n        var x1 = p1.x + innerCornerRadius * $math.cos(a1);\n        var y1 = p1.y + innerCornerRadius * $math.sin(a1);\n        var x2 = p1.x + innerCornerRadius * $math.cos(a2);\n        var y2 = p1.y + innerCornerRadius * $math.sin(a2);\n        path += $path.lineTo({\n          x: x1,\n          y: y1\n        });\n        path += \" Q\" + p1.x + \",\" + p1.y + \" \" + x2 + \",\" + y2;\n      } else {\n        path += $path.lineTo({\n          x: innerRadius * $math.cos(angle),\n          y: innerRadius * $math.sin(angle)\n        });\n      }\n    }\n\n    if (this.arc < 360) {\n      path += $path.lineTo({\n        x: 0,\n        y: 0\n      });\n    }\n\n    path += $path.closePath();\n    path = path.replace(\"L\", \"M\");\n    this.path = path;\n  };\n\n  Object.defineProperty(Star.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle (0-360)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * The angle at which left edge of the star is drawn. (0-360)\r\n     *\r\n     * 0 is to the right of the center.\r\n     *\r\n     * @default -90\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"arc\", {\n    /**\r\n     * @return Arc scope\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"arc\");\n    },\n\n    /**\r\n     * How much of a complete circle the star will complete.\r\n     *\r\n     * A complete circle is 350 degrees. If set to 180, only half a star will\r\n     * be drawn\r\n     *\r\n     * @default 360\r\n     * @param  value  Arc scope\r\n     */\n    set: function set(value) {\n      if (!$type.isNumber(value)) {\n        value = 360;\n      }\n\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      var radius = this.getPropertyValue(\"radius\");\n\n      if (!$type.isNumber(radius)) {\n        radius = 0;\n      }\n\n      return radius;\n    },\n\n    /**\r\n     * Radius of the star in pixels.\r\n     *\r\n     * @default 100\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function get() {\n      var value = this.getPropertyValue(\"radiusY\");\n\n      if (!$type.isNumber(value)) {\n        value = this.radius;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * Vertical radius for creating skewed star shapes.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius (px or %)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the star (cutout).\r\n     *\r\n     * It can be set either by absolute pixel value or relative to radius in\r\n     * percent.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px or %)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Radius px\r\n     */\n    get: function get() {\n      return $utils.relativeToValue(this.innerRadius, this.radius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n\n    /**\r\n     * Radius of star's outer corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"innerCornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerCornerRadius\");\n    },\n\n    /**\r\n     * Radius of star's inner corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"innerCornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Star.prototype, \"pointCount\", {\n    /**\r\n     * @return Number of star points\r\n     */\n    get: function get() {\n      var value = this.getPropertyValue(\"pointCount\");\n      return $math.max(3, value);\n    },\n\n    /**\r\n     * Number of start points\r\n     *\r\n     * @default 5\r\n     * @param value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"pointCount\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Star;\n}(Sprite);\n\nexport { Star };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Star\"] = Star;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/bullets/Star.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing Stars.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Star]].\r\n */\r\nexport interface IStarProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the star in pixels.\r\n\t *\r\n\t * @default 100\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed star.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the star, in px or %.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * The angle at which left edge of the star is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * Radius of stars's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of stars's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tinnerCornerRadius?: number;\r\n\r\n\t/**\r\n\t * How much of a complete circle the star will complete.\r\n\t *\r\n\t * A complete circle is 350 degrees. If set to 180, only half a star will\r\n\t * be drawn\r\n\t *\r\n\t * @default 360\r\n\t */\r\n\tarc?: number;\r\n\r\n\t/**\r\n\t * Number of points (tips).\r\n\t * \r\n\t * @default 5\r\n\t */\r\n\tpointCount?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Star]].\r\n */\r\nexport interface IStarEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Star]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStarAdapters extends ISpriteAdapters, IStarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a Star shape.\r\n *\r\n * @since 4.5.7\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-bullets/} for usage instructions.\r\n * @see {@link IStarEvents} for a list of available events\r\n * @see {@link IStarAdapters} for a list of available Adapters\r\n */\r\nexport class Star extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStarEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Star\";\r\n\t\tthis.pointCount = 5;\r\n\t\tthis.arc = 360;\r\n\t\tthis.radius = 100;\r\n\t\tthis.innerRadius = percent(30);\r\n\t\tthis.cornerRadius = 0;\r\n\t\tthis.innerCornerRadius = 0;\r\n\t\tthis.startAngle = -90;\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet arc = this.arc;\r\n\t\tlet pointCount = this.pointCount;\r\n\t\tlet radius = this.radius;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\tlet cornerRadius = this.cornerRadius;\r\n\r\n\t\tif (cornerRadius > radius - innerRadius) {\r\n\t\t\tcornerRadius = radius - innerRadius;\r\n\t\t}\r\n\r\n\t\tlet innerCornerRadius = this.innerCornerRadius;\r\n\r\n\t\tif (innerCornerRadius > radius - cornerRadius - innerRadius) {\r\n\t\t\tinnerCornerRadius = radius - cornerRadius - innerRadius;\r\n\t\t}\r\n\r\n\r\n\t\tlet halfAngle = arc / pointCount / 2;\r\n\t\tlet path: string = \"\";\r\n\r\n\t\tfor (let i = 0; i < pointCount; i++) {\r\n\r\n\t\t\tlet angle = startAngle + i * arc / pointCount;\r\n\r\n\t\t\tif (cornerRadius > 0) {\r\n\t\t\t\tlet p0 = { x: innerRadius * $math.cos(angle - halfAngle), y: innerRadius * $math.sin(angle - halfAngle) };\r\n\t\t\t\tlet p1 = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t\t\tlet p2 = { x: innerRadius * $math.cos(angle + halfAngle), y: innerRadius * $math.sin(angle + halfAngle) };\r\n\r\n\t\t\t\tlet a1 = $math.getAngle(p1, p0);\r\n\t\t\t\tlet a2 = $math.getAngle(p1, p2);\r\n\r\n\t\t\t\tlet x1 = p1.x + cornerRadius * $math.cos(a1);\r\n\t\t\t\tlet y1 = p1.y + cornerRadius * $math.sin(a1);\r\n\r\n\t\t\t\tlet x2 = p1.x + cornerRadius * $math.cos(a2);\r\n\t\t\t\tlet y2 = p1.y + cornerRadius * $math.sin(a2);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x1, y: y1 });\r\n\t\t\t\tpath += \" Q\" + p1.x + \",\" + p1.y + \" \" + x2 + \",\" + y2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle += halfAngle;\r\n\r\n\t\t\tif (innerCornerRadius > 0) {\r\n\t\t\t\tlet p0 = { x: radius * $math.cos(angle - halfAngle), y: radius * $math.sin(angle - halfAngle) };\r\n\t\t\t\tlet p1 = { x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) };\r\n\t\t\t\tlet p2 = { x: radius * $math.cos(angle + halfAngle), y: radius * $math.sin(angle + halfAngle) };\r\n\r\n\t\t\t\tlet a1 = $math.getAngle(p1, p0);\r\n\t\t\t\tlet a2 = $math.getAngle(p1, p2);\r\n\r\n\t\t\t\tlet x1 = p1.x + innerCornerRadius * $math.cos(a1);\r\n\t\t\t\tlet y1 = p1.y + innerCornerRadius * $math.sin(a1);\r\n\r\n\t\t\t\tlet x2 = p1.x + innerCornerRadius * $math.cos(a2);\r\n\t\t\t\tlet y2 = p1.y + innerCornerRadius * $math.sin(a2);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x1, y: y1 });\r\n\t\t\t\tpath += \" Q\" + p1.x + \",\" + p1.y + \" \" + x2 + \",\" + y2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.arc < 360) {\r\n\t\t\tpath += $path.lineTo({ x: 0, y: 0 })\r\n\t\t}\r\n\r\n\t\tpath += $path.closePath();\r\n\r\n\t\tpath = path.replace(\"L\", \"M\");\r\n\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * The angle at which left edge of the star is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * How much of a complete circle the star will complete.\r\n\t *\r\n\t * A complete circle is 350 degrees. If set to 180, only half a star will\r\n\t * be drawn\r\n\t *\r\n\t * @default 360\r\n\t * @param  value  Arc scope\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 360;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arc scope\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the star in pixels.\r\n\t *\r\n\t * @default 100\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\tlet radius: number = this.getPropertyValue(\"radius\");\r\n\t\tif (!$type.isNumber(radius)) {\r\n\t\t\tradius = 0;\r\n\t\t}\r\n\t\treturn radius;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed star shapes.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet value: number = this.getPropertyValue(\"radiusY\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radius;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the star (cutout).\r\n\t *\r\n\t * It can be set either by absolute pixel value or relative to radius in\r\n\t * percent.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px or %)\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or %)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius px\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of star's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of star's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set innerCornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerCornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get innerCornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerCornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of start points\r\n\t *\r\n\t * @default 5\r\n\t * @param value\r\n\t */\r\n\tpublic set pointCount(value: number) {\r\n\t\tthis.setPropertyValue(\"pointCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of star points\r\n\t */\r\n\tpublic get pointCount(): number {\r\n\t\tlet value = this.getPropertyValue(\"pointCount\");\r\n\t\treturn $math.max(3, value);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Star\"] = Star;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}