{"ast":null,"code":"\"use strict\";\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _defaults(subClass, superClass);\n}\n\nvar Prefixer = require('./prefixer');\n\nvar AtRule = /*#__PURE__*/function (_Prefixer) {\n  _inheritsLoose(AtRule, _Prefixer);\n\n  function AtRule() {\n    return _Prefixer.apply(this, arguments) || this;\n  }\n\n  var _proto = AtRule.prototype;\n  /**\n     * Clone and add prefixes for at-rule\n     */\n\n  _proto.add = function add(rule, prefix) {\n    var prefixed = prefix + rule.name;\n    var already = rule.parent.some(function (i) {\n      return i.name === prefixed && i.params === rule.params;\n    });\n\n    if (already) {\n      return undefined;\n    }\n\n    var cloned = this.clone(rule, {\n      name: prefixed\n    });\n    return rule.parent.insertBefore(rule, cloned);\n  }\n  /**\n     * Clone node with prefixes\n     */\n  ;\n\n  _proto.process = function process(node) {\n    var parent = this.parentPrefix(node);\n\n    for (var _iterator = this.prefixes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var prefix = _ref;\n\n      if (!parent || parent === prefix) {\n        this.add(node, prefix);\n      }\n    }\n  };\n\n  return AtRule;\n}(Prefixer);\n\nmodule.exports = AtRule;","map":{"version":3,"sources":["C:/Projects/Trunks/OWP-GIT/owp-fe/node_modules/autoprefixer/lib/at-rule.js"],"names":["_defaults","obj","defaults","keys","Object","getOwnPropertyNames","i","length","key","value","getOwnPropertyDescriptor","configurable","undefined","defineProperty","_inheritsLoose","subClass","superClass","prototype","create","constructor","Prefixer","require","AtRule","_Prefixer","apply","arguments","_proto","add","rule","prefix","prefixed","name","already","parent","some","params","cloned","clone","insertBefore","process","node","parentPrefix","_iterator","prefixes","_isArray","Array","isArray","_i","Symbol","iterator","_ref","next","done","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }\n\nvar Prefixer = require('./prefixer');\n\nvar AtRule =\n/*#__PURE__*/\nfunction (_Prefixer) {\n  _inheritsLoose(AtRule, _Prefixer);\n\n  function AtRule() {\n    return _Prefixer.apply(this, arguments) || this;\n  }\n\n  var _proto = AtRule.prototype;\n\n  /**\n     * Clone and add prefixes for at-rule\n     */\n  _proto.add = function add(rule, prefix) {\n    var prefixed = prefix + rule.name;\n    var already = rule.parent.some(function (i) {\n      return i.name === prefixed && i.params === rule.params;\n    });\n\n    if (already) {\n      return undefined;\n    }\n\n    var cloned = this.clone(rule, {\n      name: prefixed\n    });\n    return rule.parent.insertBefore(rule, cloned);\n  }\n  /**\n     * Clone node with prefixes\n     */\n  ;\n\n  _proto.process = function process(node) {\n    var parent = this.parentPrefix(node);\n\n    for (var _iterator = this.prefixes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var prefix = _ref;\n\n      if (!parent || parent === prefix) {\n        this.add(node, prefix);\n      }\n    }\n  };\n\n  return AtRule;\n}(Prefixer);\n\nmodule.exports = AtRule;"]},"metadata":{},"sourceType":"script"}